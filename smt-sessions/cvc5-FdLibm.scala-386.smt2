; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2287 () Bool)

(assert start!2287)

(declare-fun c!1338 () Bool)

(declare-fun i!347 () (_ BitVec 32))

(declare-fun bm!11 () Bool)

(declare-datatypes ((tuple2!104 0))(
  ( (tuple2!105 (_1!257 (_ FloatingPoint 11 53)) (_2!257 (_ FloatingPoint 11 53))) )
))
(declare-fun call!14 () tuple2!104)

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-datatypes ((array!792 0))(
  ( (array!793 (arr!343 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!343 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!792)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!104)

(assert (=> bm!11 (= call!14 (fast2Sum!0 (ite c!1338 s!25 (select (arr!343 fq!120) i!347)) (ite c!1338 (select (arr!343 fq!120) i!347) s!25)))))

(declare-fun b!11651 () Bool)

(declare-fun e!6365 () tuple2!104)

(assert (=> b!11651 (= e!6365 call!14)))

(declare-fun b!11652 () Bool)

(declare-fun e!6366 () Bool)

(declare-fun lt!5675 () tuple2!104)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!11652 (= e!6366 (and (fp.geq (_1!257 lt!5675) (fp.add roundNearestTiesToEven c!23 (_2!257 lt!5675))) (let ((b!7 (fp.add roundNearestTiesToEven c!23 (_2!257 lt!5675)))) (let ((fp!68 (fp.add roundNearestTiesToEven (_1!257 lt!5675) b!7))) (and (not (fp.isInfinite fp!68)) (not (fp.isNaN fp!68)) (not (fp.geq (ite (fp.lt (_1!257 lt!5675) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (fp.neg (_1!257 lt!5675)) (_1!257 lt!5675)) (ite (fp.lt b!7 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (fp.neg b!7) b!7))))))))))

(assert (=> b!11652 (= lt!5675 e!6365)))

(assert (=> b!11652 (= c!1338 (fp.geq s!25 (select (arr!343 fq!120) i!347)))))

(declare-fun b!11653 () Bool)

(declare-fun res!9395 () Bool)

(assert (=> b!11653 (=> (not res!9395) (not e!6366))))

(declare-fun jz!77 () (_ BitVec 32))

(assert (=> b!11653 (= res!9395 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!11654 () Bool)

(assert (=> b!11654 (= e!6365 call!14)))

(declare-fun b!11650 () Bool)

(declare-fun res!9394 () Bool)

(assert (=> b!11650 (=> (not res!9394) (not e!6366))))

(declare-fun fqInv!0 (array!792) Bool)

(assert (=> b!11650 (= res!9394 (fqInv!0 fq!120))))

(declare-fun res!9396 () Bool)

(assert (=> start!2287 (=> (not res!9396) (not e!6366))))

(assert (=> start!2287 (= res!9396 (= (size!343 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2287 e!6366))

(assert (=> start!2287 true))

(declare-fun array_inv!292 (array!792) Bool)

(assert (=> start!2287 (array_inv!292 fq!120)))

(assert (= (and start!2287 res!9396) b!11650))

(assert (= (and b!11650 res!9394) b!11653))

(assert (= (and b!11653 res!9395) b!11652))

(assert (= (and b!11652 c!1338) b!11654))

(assert (= (and b!11652 (not c!1338)) b!11651))

(assert (= (or b!11654 b!11651) bm!11))

(declare-fun m!19509 () Bool)

(assert (=> bm!11 m!19509))

(declare-fun m!19511 () Bool)

(assert (=> bm!11 m!19511))

(declare-fun m!19513 () Bool)

(assert (=> start!2287 m!19513))

(declare-fun m!19515 () Bool)

(assert (=> b!11653 m!19515))

(assert (=> b!11652 m!19509))

(declare-fun m!19517 () Bool)

(assert (=> b!11650 m!19517))

(push 1)

(assert (not b!11650))

(assert (not bm!11))

(assert (not start!2287))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!6546 () Bool)

(assert (=> d!6546 (= (fqInv!0 fq!120) (and (= (size!343 fq!120) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000000)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000001)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000010)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000011)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000100)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000101)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000110)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000111)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001000)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001000) (fp #b0 #b01101000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001001)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001001) (fp #b0 #b01100101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001010)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001010) (fp #b0 #b01100010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001011)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001011) (fp #b0 #b01011111001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001100)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001100) (fp #b0 #b01011100001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001101)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001101) (fp #b0 #b01011001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001110)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001110) (fp #b0 #b01010110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001111)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001111) (fp #b0 #b01010011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010000)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010000) (fp #b0 #b01010000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010001)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010001) (fp #b0 #b01001101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010010)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010010) (fp #b0 #b01001010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010011)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010011) (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000))))))

(declare-fun bs!2728 () Bool)

(assert (= bs!2728 d!6546))

(declare-fun m!19519 () Bool)

(assert (=> bs!2728 m!19519))

(declare-fun m!19521 () Bool)

(assert (=> bs!2728 m!19521))

(declare-fun m!19523 () Bool)

(assert (=> bs!2728 m!19523))

(declare-fun m!19525 () Bool)

(assert (=> bs!2728 m!19525))

(declare-fun m!19527 () Bool)

(assert (=> bs!2728 m!19527))

(declare-fun m!19529 () Bool)

(assert (=> bs!2728 m!19529))

(declare-fun m!19531 () Bool)

(assert (=> bs!2728 m!19531))

(declare-fun m!19533 () Bool)

(assert (=> bs!2728 m!19533))

(declare-fun m!19535 () Bool)

(assert (=> bs!2728 m!19535))

(declare-fun m!19537 () Bool)

(assert (=> bs!2728 m!19537))

(declare-fun m!19539 () Bool)

(assert (=> bs!2728 m!19539))

(declare-fun m!19541 () Bool)

(assert (=> bs!2728 m!19541))

(declare-fun m!19543 () Bool)

(assert (=> bs!2728 m!19543))

(declare-fun m!19545 () Bool)

(assert (=> bs!2728 m!19545))

(declare-fun m!19547 () Bool)

(assert (=> bs!2728 m!19547))

(declare-fun m!19549 () Bool)

(assert (=> bs!2728 m!19549))

(declare-fun m!19551 () Bool)

(assert (=> bs!2728 m!19551))

(declare-fun m!19553 () Bool)

(assert (=> bs!2728 m!19553))

(declare-fun m!19555 () Bool)

(assert (=> bs!2728 m!19555))

(declare-fun m!19557 () Bool)

(assert (=> bs!2728 m!19557))

(assert (=> b!11650 d!6546))

(declare-fun d!6548 () Bool)

(declare-fun lt!5680 () tuple2!104)

(assert (=> d!6548 (fp.eq (fp.add roundNearestTiesToEven (_1!257 lt!5680) (_2!257 lt!5680)) (_1!257 lt!5680))))

(declare-fun lt!5681 () (_ FloatingPoint 11 53))

(assert (=> d!6548 (= lt!5680 (tuple2!105 lt!5681 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (ite c!1338 s!25 (select (arr!343 fq!120) i!347)) lt!5681) (ite c!1338 (select (arr!343 fq!120) i!347) s!25))))))

(assert (=> d!6548 (= lt!5681 (fp.add roundNearestTiesToEven (ite c!1338 s!25 (select (arr!343 fq!120) i!347)) (ite c!1338 (select (arr!343 fq!120) i!347) s!25)))))

(assert (=> d!6548 (= (fast2Sum!0 (ite c!1338 s!25 (select (arr!343 fq!120) i!347)) (ite c!1338 (select (arr!343 fq!120) i!347) s!25)) lt!5680)))

(assert (=> bm!11 d!6548))

(declare-fun d!6550 () Bool)

(assert (=> d!6550 (= (array_inv!292 fq!120) (bvsge (size!343 fq!120) #b00000000000000000000000000000000))))

(assert (=> start!2287 d!6550))

(push 1)

(check-sat)

(pop 1)

