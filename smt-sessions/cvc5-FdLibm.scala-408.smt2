; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2365 () Bool)

(assert start!2365)

(declare-fun e!6612 () Bool)

(declare-fun b!12017 () Bool)

(declare-fun jz!77 () (_ BitVec 32))

(declare-fun lt!5862 () (_ BitVec 32))

(declare-datatypes ((tuple2!130 0))(
  ( (tuple2!131 (_1!275 (_ FloatingPoint 11 53)) (_2!275 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5864 () tuple2!130)

(assert (=> b!12017 (= e!6612 (and (bvslt lt!5862 #b00000000000000000000000000000000) (bvsle #b11111111111111111111111111111111 lt!5862) (bvsle lt!5862 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (_1!275 lt!5864)) (let ((ix!270 (bvadd lt!5862 #b00000000000000000000000000000001))) (or (bvslt ix!270 #b00000000000000000000000000000000) (bvsge ix!270 #b00000000000000000000000000010100)))))))

(declare-fun i!347 () (_ BitVec 32))

(assert (=> b!12017 (= lt!5862 (bvsub i!347 #b00000000000000000000000000000001))))

(declare-fun lt!5863 () tuple2!130)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!130)

(assert (=> b!12017 (= lt!5864 (fast2Sum!0 (_1!275 lt!5863) (fp.add roundNearestTiesToEven c!23 (_2!275 lt!5863))))))

(declare-fun b!12018 () Bool)

(declare-fun res!9656 () Bool)

(declare-fun e!6610 () Bool)

(assert (=> b!12018 (=> (not res!9656) (not e!6610))))

(declare-datatypes ((array!841 0))(
  ( (array!842 (arr!365 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!365 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!841)

(declare-fun fqInv!0 (array!841) Bool)

(assert (=> b!12018 (= res!9656 (fqInv!0 fq!120))))

(declare-fun b!12019 () Bool)

(declare-fun res!9654 () Bool)

(assert (=> b!12019 (=> (not res!9654) (not e!6610))))

(declare-fun s!25 () (_ FloatingPoint 11 53))

(assert (=> b!12019 (= res!9654 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!12020 () Bool)

(declare-fun e!6613 () tuple2!130)

(declare-fun call!59 () tuple2!130)

(assert (=> b!12020 (= e!6613 call!59)))

(declare-fun c!1393 () Bool)

(declare-fun bm!56 () Bool)

(assert (=> bm!56 (= call!59 (fast2Sum!0 (ite c!1393 s!25 (select (arr!365 fq!120) i!347)) (ite c!1393 (select (arr!365 fq!120) i!347) s!25)))))

(declare-fun res!9657 () Bool)

(assert (=> start!2365 (=> (not res!9657) (not e!6610))))

(assert (=> start!2365 (= res!9657 (= (size!365 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2365 e!6610))

(assert (=> start!2365 true))

(declare-fun array_inv!314 (array!841) Bool)

(assert (=> start!2365 (array_inv!314 fq!120)))

(declare-fun b!12021 () Bool)

(assert (=> b!12021 (= e!6610 e!6612)))

(declare-fun res!9655 () Bool)

(assert (=> b!12021 (=> (not res!9655) (not e!6612))))

(assert (=> b!12021 (= res!9655 (fp.geq (_1!275 lt!5863) (fp.add roundNearestTiesToEven c!23 (_2!275 lt!5863))))))

(assert (=> b!12021 (= lt!5863 e!6613)))

(assert (=> b!12021 (= c!1393 (fp.geq s!25 (select (arr!365 fq!120) i!347)))))

(declare-fun b!12022 () Bool)

(assert (=> b!12022 (= e!6613 call!59)))

(assert (= (and start!2365 res!9657) b!12018))

(assert (= (and b!12018 res!9656) b!12019))

(assert (= (and b!12019 res!9654) b!12021))

(assert (= (and b!12021 c!1393) b!12020))

(assert (= (and b!12021 (not c!1393)) b!12022))

(assert (= (or b!12020 b!12022) bm!56))

(assert (= (and b!12021 res!9655) b!12017))

(declare-fun m!19951 () Bool)

(assert (=> bm!56 m!19951))

(declare-fun m!19953 () Bool)

(assert (=> bm!56 m!19953))

(declare-fun m!19955 () Bool)

(assert (=> b!12017 m!19955))

(declare-fun m!19957 () Bool)

(assert (=> start!2365 m!19957))

(declare-fun m!19959 () Bool)

(assert (=> b!12019 m!19959))

(declare-fun m!19961 () Bool)

(assert (=> b!12018 m!19961))

(assert (=> b!12021 m!19951))

(push 1)

(assert (not bm!56))

(assert (not b!12017))

(assert (not start!2365))

(assert (not b!12018))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

