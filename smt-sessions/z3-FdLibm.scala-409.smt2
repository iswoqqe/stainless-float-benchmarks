; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!2183 () Bool)

(assert start!2183)

(declare-fun b!10791 () Bool)

(declare-fun e!6295 () Bool)

(declare-fun e!6298 () Bool)

(assert (=> b!10791 (= e!6295 e!6298)))

(declare-fun res!8580 () Bool)

(assert (=> b!10791 (=> (not res!8580) (not e!6298))))

(declare-datatypes ((tuple2!122 0))(
  ( (tuple2!123 (_1!271 (_ FloatingPoint 11 53)) (_2!271 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5581 () tuple2!122)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!10791 (= res!8580 (fp.geq (_1!271 lt!5581) (fp.add roundNearestTiesToEven c!23 (_2!271 lt!5581))))))

(declare-fun e!6296 () tuple2!122)

(assert (=> b!10791 (= lt!5581 e!6296)))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-datatypes ((array!830 0))(
  ( (array!831 (arr!366 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!366 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!830)

(declare-fun c!1318 () Bool)

(assert (=> b!10791 (= c!1318 (fp.geq s!25 (select (arr!366 fq!120) i!347)))))

(declare-fun b!10792 () Bool)

(declare-fun res!8579 () Bool)

(assert (=> b!10792 (=> (not res!8579) (not e!6295))))

(declare-fun jz!77 () (_ BitVec 32))

(assert (=> b!10792 (= res!8579 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!59 () Bool)

(declare-fun call!62 () tuple2!122)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!122)

(assert (=> bm!59 (= call!62 (fast2Sum!0 (ite c!1318 s!25 (select (arr!366 fq!120) i!347)) (ite c!1318 (select (arr!366 fq!120) i!347) s!25)))))

(declare-fun res!8578 () Bool)

(assert (=> start!2183 (=> (not res!8578) (not e!6295))))

(assert (=> start!2183 (= res!8578 (= (size!366 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2183 e!6295))

(assert (=> start!2183 true))

(declare-fun array_inv!315 (array!830) Bool)

(assert (=> start!2183 (array_inv!315 fq!120)))

(declare-fun b!10793 () Bool)

(declare-fun lt!5582 () (_ BitVec 32))

(declare-fun lt!5583 () tuple2!122)

(assert (=> b!10793 (= e!6298 (and (bvslt lt!5582 #b00000000000000000000000000000000) (or (bvsgt #b11111111111111111111111111111111 lt!5582) (bvsgt lt!5582 (bvsub jz!77 #b00000000000000000000000000000001)) (not (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (_1!271 lt!5583))) (not (fp.leq (_1!271 lt!5583) (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd lt!5582 #b00000000000000000000000000000001)))) (not (fp.eq (fp.add roundNearestTiesToEven (_1!271 lt!5583) (_2!271 lt!5583)) (_1!271 lt!5583))))))))

(assert (=> b!10793 (= lt!5582 (bvsub i!347 #b00000000000000000000000000000001))))

(assert (=> b!10793 (= lt!5583 (fast2Sum!0 (_1!271 lt!5581) (fp.add roundNearestTiesToEven c!23 (_2!271 lt!5581))))))

(declare-fun b!10794 () Bool)

(assert (=> b!10794 (= e!6296 call!62)))

(declare-fun b!10795 () Bool)

(declare-fun res!8581 () Bool)

(assert (=> b!10795 (=> (not res!8581) (not e!6295))))

(declare-fun fqInv!0 (array!830) Bool)

(assert (=> b!10795 (= res!8581 (fqInv!0 fq!120))))

(declare-fun b!10796 () Bool)

(assert (=> b!10796 (= e!6296 call!62)))

(assert (= (and start!2183 res!8578) b!10795))

(assert (= (and b!10795 res!8581) b!10792))

(assert (= (and b!10792 res!8579) b!10791))

(assert (= (and b!10791 c!1318) b!10796))

(assert (= (and b!10791 (not c!1318)) b!10794))

(assert (= (or b!10796 b!10794) bm!59))

(assert (= (and b!10791 res!8580) b!10793))

(declare-fun m!15293 () Bool)

(assert (=> start!2183 m!15293))

(declare-fun m!15295 () Bool)

(assert (=> b!10793 m!15295))

(declare-fun m!15297 () Bool)

(assert (=> b!10793 m!15297))

(declare-fun m!15299 () Bool)

(assert (=> b!10791 m!15299))

(declare-fun m!15301 () Bool)

(assert (=> b!10792 m!15301))

(assert (=> bm!59 m!15299))

(declare-fun m!15303 () Bool)

(assert (=> bm!59 m!15303))

(declare-fun m!15305 () Bool)

(assert (=> b!10795 m!15305))

(check-sat (not b!10795) (not bm!59) (not start!2183) (not b!10793))
(check-sat)
(get-model)

(declare-fun d!4233 () Bool)

(assert (=> d!4233 (= (fqInv!0 fq!120) (and (= (size!366 fq!120) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000000)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000001)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000010)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000011)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000100)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000101)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000110)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000111)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001000)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001000) (fp #b0 #b01101000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001001)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001001) (fp #b0 #b01100101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001010)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001010) (fp #b0 #b01100010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001011)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001011) (fp #b0 #b01011111001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001100)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001100) (fp #b0 #b01011100001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001101)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001101) (fp #b0 #b01011001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001110)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001110) (fp #b0 #b01010110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001111)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001111) (fp #b0 #b01010011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000010000)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000010000) (fp #b0 #b01010000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000010001)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000010001) (fp #b0 #b01001101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000010010)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000010010) (fp #b0 #b01001010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000010011)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000010011) (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000))))))

(declare-fun bs!1755 () Bool)

(assert (= bs!1755 d!4233))

(declare-fun m!15307 () Bool)

(assert (=> bs!1755 m!15307))

(declare-fun m!15309 () Bool)

(assert (=> bs!1755 m!15309))

(declare-fun m!15311 () Bool)

(assert (=> bs!1755 m!15311))

(declare-fun m!15313 () Bool)

(assert (=> bs!1755 m!15313))

(declare-fun m!15315 () Bool)

(assert (=> bs!1755 m!15315))

(declare-fun m!15317 () Bool)

(assert (=> bs!1755 m!15317))

(declare-fun m!15319 () Bool)

(assert (=> bs!1755 m!15319))

(declare-fun m!15321 () Bool)

(assert (=> bs!1755 m!15321))

(declare-fun m!15323 () Bool)

(assert (=> bs!1755 m!15323))

(declare-fun m!15325 () Bool)

(assert (=> bs!1755 m!15325))

(declare-fun m!15327 () Bool)

(assert (=> bs!1755 m!15327))

(declare-fun m!15329 () Bool)

(assert (=> bs!1755 m!15329))

(declare-fun m!15331 () Bool)

(assert (=> bs!1755 m!15331))

(declare-fun m!15333 () Bool)

(assert (=> bs!1755 m!15333))

(declare-fun m!15335 () Bool)

(assert (=> bs!1755 m!15335))

(declare-fun m!15337 () Bool)

(assert (=> bs!1755 m!15337))

(declare-fun m!15339 () Bool)

(assert (=> bs!1755 m!15339))

(declare-fun m!15341 () Bool)

(assert (=> bs!1755 m!15341))

(declare-fun m!15343 () Bool)

(assert (=> bs!1755 m!15343))

(declare-fun m!15345 () Bool)

(assert (=> bs!1755 m!15345))

(assert (=> b!10795 d!4233))

(declare-fun d!4235 () Bool)

(declare-fun lt!5588 () tuple2!122)

(assert (=> d!4235 (fp.eq (fp.add roundNearestTiesToEven (_1!271 lt!5588) (_2!271 lt!5588)) (_1!271 lt!5588))))

(declare-fun lt!5589 () (_ FloatingPoint 11 53))

(assert (=> d!4235 (= lt!5588 (tuple2!123 lt!5589 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (ite c!1318 s!25 (select (arr!366 fq!120) i!347)) lt!5589) (ite c!1318 (select (arr!366 fq!120) i!347) s!25))))))

(assert (=> d!4235 (= lt!5589 (fp.add roundNearestTiesToEven (ite c!1318 s!25 (select (arr!366 fq!120) i!347)) (ite c!1318 (select (arr!366 fq!120) i!347) s!25)))))

(assert (=> d!4235 (= (fast2Sum!0 (ite c!1318 s!25 (select (arr!366 fq!120) i!347)) (ite c!1318 (select (arr!366 fq!120) i!347) s!25)) lt!5588)))

(assert (=> bm!59 d!4235))

(declare-fun d!4237 () Bool)

(assert (=> d!4237 (= (array_inv!315 fq!120) (bvsge (size!366 fq!120) #b00000000000000000000000000000000))))

(assert (=> start!2183 d!4237))

(declare-fun d!4239 () Bool)

(declare-fun lt!5590 () tuple2!122)

(assert (=> d!4239 (fp.eq (fp.add roundNearestTiesToEven (_1!271 lt!5590) (_2!271 lt!5590)) (_1!271 lt!5590))))

(declare-fun lt!5591 () (_ FloatingPoint 11 53))

(assert (=> d!4239 (= lt!5590 (tuple2!123 lt!5591 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (_1!271 lt!5581) lt!5591) (fp.add roundNearestTiesToEven c!23 (_2!271 lt!5581)))))))

(assert (=> d!4239 (= lt!5591 (fp.add roundNearestTiesToEven (_1!271 lt!5581) (fp.add roundNearestTiesToEven c!23 (_2!271 lt!5581))))))

(assert (=> d!4239 (= (fast2Sum!0 (_1!271 lt!5581) (fp.add roundNearestTiesToEven c!23 (_2!271 lt!5581))) lt!5590)))

(assert (=> b!10793 d!4239))

(check-sat)
