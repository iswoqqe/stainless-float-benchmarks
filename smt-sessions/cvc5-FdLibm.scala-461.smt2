; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2641 () Bool)

(assert start!2641)

(declare-datatypes ((array!1028 0))(
  ( (array!1029 (arr!448 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!448 (_ BitVec 32))) )
))
(declare-fun qq!34 () array!1028)

(assert (=> start!2641 (and (= (size!448 qq!34) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!448 qq!34) #b00000000000000000000000000000000)) (fp.leq (select (arr!448 qq!34) #b00000000000000000000000000000000) (fp #b0 #b01111111101 #b1111111111111111111111000000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!448 qq!34) #b00000000000000000000000000000001)) (fp.leq (select (arr!448 qq!34) #b00000000000000000000000000000001) (fp #b0 #b01111100110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!448 qq!34) #b00000000000000000000000000000010)) (fp.leq (select (arr!448 qq!34) #b00000000000000000000000000000010) (fp #b0 #b01111001110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!448 qq!34) #b00000000000000000000000000000011)) (fp.leq (select (arr!448 qq!34) #b00000000000000000000000000000011) (fp #b0 #b01110110110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!448 qq!34) #b00000000000000000000000000000100)) (fp.leq (select (arr!448 qq!34) #b00000000000000000000000000000100) (fp #b0 #b01110011110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!448 qq!34) #b00000000000000000000000000000101)) (fp.leq (select (arr!448 qq!34) #b00000000000000000000000000000101) (fp #b0 #b01110000110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!448 qq!34) #b00000000000000000000000000000110)) (fp.leq (select (arr!448 qq!34) #b00000000000000000000000000000110) (fp #b0 #b01101101110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!448 qq!34) #b00000000000000000000000000000111)) (fp.leq (select (arr!448 qq!34) #b00000000000000000000000000000111) (fp #b0 #b01101010110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!448 qq!34) #b00000000000000000000000000001000)) (bvsge #b00000000000000000000000000001000 (size!448 qq!34)))))

(declare-fun array_inv!397 (array!1028) Bool)

(assert (=> start!2641 (array_inv!397 qq!34)))

(declare-fun bs!2894 () Bool)

(assert (= bs!2894 start!2641))

(declare-fun m!22601 () Bool)

(assert (=> bs!2894 m!22601))

(declare-fun m!22603 () Bool)

(assert (=> bs!2894 m!22603))

(declare-fun m!22605 () Bool)

(assert (=> bs!2894 m!22605))

(declare-fun m!22607 () Bool)

(assert (=> bs!2894 m!22607))

(declare-fun m!22609 () Bool)

(assert (=> bs!2894 m!22609))

(declare-fun m!22611 () Bool)

(assert (=> bs!2894 m!22611))

(declare-fun m!22613 () Bool)

(assert (=> bs!2894 m!22613))

(declare-fun m!22615 () Bool)

(assert (=> bs!2894 m!22615))

(declare-fun m!22617 () Bool)

(assert (=> bs!2894 m!22617))

(declare-fun m!22619 () Bool)

(assert (=> bs!2894 m!22619))

(push 1)

(assert (not start!2641))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

