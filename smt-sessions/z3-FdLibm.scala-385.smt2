; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!2125 () Bool)

(assert start!2125)

(declare-fun b!10764 () Bool)

(declare-datatypes ((tuple2!92 0))(
  ( (tuple2!93 (_1!251 (_ FloatingPoint 11 53)) (_2!251 (_ FloatingPoint 11 53))) )
))
(declare-fun e!6104 () tuple2!92)

(declare-fun call!11 () tuple2!92)

(assert (=> b!10764 (= e!6104 call!11)))

(declare-fun bm!8 () Bool)

(declare-fun c!1275 () Bool)

(declare-fun i!347 () (_ BitVec 32))

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-datatypes ((array!779 0))(
  ( (array!780 (arr!342 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!342 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!779)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!92)

(assert (=> bm!8 (= call!11 (fast2Sum!0 (ite c!1275 s!25 (select (arr!342 fq!120) i!347)) (ite c!1275 (select (arr!342 fq!120) i!347) s!25)))))

(declare-fun b!10765 () Bool)

(declare-fun res!8637 () Bool)

(declare-fun e!6103 () Bool)

(assert (=> b!10765 (=> (not res!8637) (not e!6103))))

(declare-fun fqInv!0 (array!779) Bool)

(assert (=> b!10765 (= res!8637 (fqInv!0 fq!120))))

(declare-fun b!10766 () Bool)

(declare-fun res!8636 () Bool)

(assert (=> b!10766 (=> (not res!8636) (not e!6103))))

(declare-fun jz!77 () (_ BitVec 32))

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!10766 (= res!8636 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!10767 () Bool)

(declare-fun lt!5448 () tuple2!92)

(assert (=> b!10767 (= e!6103 (and (fp.geq (_1!251 lt!5448) (fp.add roundNearestTiesToEven c!23 (_2!251 lt!5448))) (let ((fp!68 (fp.add roundNearestTiesToEven (_1!251 lt!5448) (fp.add roundNearestTiesToEven c!23 (_2!251 lt!5448))))) (or (fp.isInfinite fp!68) (fp.isNaN fp!68)))))))

(assert (=> b!10767 (= lt!5448 e!6104)))

(assert (=> b!10767 (= c!1275 (fp.geq s!25 (select (arr!342 fq!120) i!347)))))

(declare-fun res!8635 () Bool)

(assert (=> start!2125 (=> (not res!8635) (not e!6103))))

(assert (=> start!2125 (= res!8635 (= (size!342 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2125 e!6103))

(assert (=> start!2125 true))

(declare-fun array_inv!291 (array!779) Bool)

(assert (=> start!2125 (array_inv!291 fq!120)))

(declare-fun b!10768 () Bool)

(assert (=> b!10768 (= e!6104 call!11)))

(assert (= (and start!2125 res!8635) b!10765))

(assert (= (and b!10765 res!8637) b!10766))

(assert (= (and b!10766 res!8636) b!10767))

(assert (= (and b!10767 c!1275) b!10768))

(assert (= (and b!10767 (not c!1275)) b!10764))

(assert (= (or b!10768 b!10764) bm!8))

(declare-fun m!16615 () Bool)

(assert (=> b!10767 m!16615))

(declare-fun m!16617 () Bool)

(assert (=> b!10766 m!16617))

(assert (=> bm!8 m!16615))

(declare-fun m!16619 () Bool)

(assert (=> bm!8 m!16619))

(declare-fun m!16621 () Bool)

(assert (=> b!10765 m!16621))

(declare-fun m!16623 () Bool)

(assert (=> start!2125 m!16623))

(check-sat (not b!10765) (not bm!8) (not start!2125))
(check-sat)
(get-model)

(declare-fun d!4897 () Bool)

(assert (=> d!4897 (= (fqInv!0 fq!120) (and (= (size!342 fq!120) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000000)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000001)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000010)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000011)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000100)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000101)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000110)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000111)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001000)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001000) (fp #b0 #b01101000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001001)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001001) (fp #b0 #b01100101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001010)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001010) (fp #b0 #b01100010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001011)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001011) (fp #b0 #b01011111001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001100)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001100) (fp #b0 #b01011100001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001101)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001101) (fp #b0 #b01011001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001110)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001110) (fp #b0 #b01010110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001111)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001111) (fp #b0 #b01010011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000010000)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000010000) (fp #b0 #b01010000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000010001)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000010001) (fp #b0 #b01001101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000010010)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000010010) (fp #b0 #b01001010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000010011)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000010011) (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000))))))

(declare-fun bs!2184 () Bool)

(assert (= bs!2184 d!4897))

(declare-fun m!16625 () Bool)

(assert (=> bs!2184 m!16625))

(declare-fun m!16627 () Bool)

(assert (=> bs!2184 m!16627))

(declare-fun m!16629 () Bool)

(assert (=> bs!2184 m!16629))

(declare-fun m!16631 () Bool)

(assert (=> bs!2184 m!16631))

(declare-fun m!16633 () Bool)

(assert (=> bs!2184 m!16633))

(declare-fun m!16635 () Bool)

(assert (=> bs!2184 m!16635))

(declare-fun m!16637 () Bool)

(assert (=> bs!2184 m!16637))

(declare-fun m!16639 () Bool)

(assert (=> bs!2184 m!16639))

(declare-fun m!16641 () Bool)

(assert (=> bs!2184 m!16641))

(declare-fun m!16643 () Bool)

(assert (=> bs!2184 m!16643))

(declare-fun m!16645 () Bool)

(assert (=> bs!2184 m!16645))

(declare-fun m!16647 () Bool)

(assert (=> bs!2184 m!16647))

(declare-fun m!16649 () Bool)

(assert (=> bs!2184 m!16649))

(declare-fun m!16651 () Bool)

(assert (=> bs!2184 m!16651))

(declare-fun m!16653 () Bool)

(assert (=> bs!2184 m!16653))

(declare-fun m!16655 () Bool)

(assert (=> bs!2184 m!16655))

(declare-fun m!16657 () Bool)

(assert (=> bs!2184 m!16657))

(declare-fun m!16659 () Bool)

(assert (=> bs!2184 m!16659))

(declare-fun m!16661 () Bool)

(assert (=> bs!2184 m!16661))

(declare-fun m!16663 () Bool)

(assert (=> bs!2184 m!16663))

(assert (=> b!10765 d!4897))

(declare-fun d!4899 () Bool)

(declare-fun lt!5453 () tuple2!92)

(assert (=> d!4899 (fp.eq (fp.add roundNearestTiesToEven (_1!251 lt!5453) (_2!251 lt!5453)) (_1!251 lt!5453))))

(declare-fun lt!5454 () (_ FloatingPoint 11 53))

(assert (=> d!4899 (= lt!5453 (tuple2!93 lt!5454 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (ite c!1275 s!25 (select (arr!342 fq!120) i!347)) lt!5454) (ite c!1275 (select (arr!342 fq!120) i!347) s!25))))))

(assert (=> d!4899 (= lt!5454 (fp.add roundNearestTiesToEven (ite c!1275 s!25 (select (arr!342 fq!120) i!347)) (ite c!1275 (select (arr!342 fq!120) i!347) s!25)))))

(assert (=> d!4899 (= (fast2Sum!0 (ite c!1275 s!25 (select (arr!342 fq!120) i!347)) (ite c!1275 (select (arr!342 fq!120) i!347) s!25)) lt!5453)))

(assert (=> bm!8 d!4899))

(declare-fun d!4901 () Bool)

(assert (=> d!4901 (= (array_inv!291 fq!120) (bvsge (size!342 fq!120) #b00000000000000000000000000000000))))

(assert (=> start!2125 d!4901))

(check-sat)
