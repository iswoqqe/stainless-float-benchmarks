; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!1579 () Bool)

(assert start!1579)

(declare-fun b!8391 () Bool)

(declare-fun res!6947 () Bool)

(declare-fun e!4277 () Bool)

(assert (=> b!8391 (=> (not res!6947) (not e!4277))))

(declare-datatypes ((array!620 0))(
  ( (array!621 (arr!272 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!272 (_ BitVec 32))) )
))
(declare-fun q!51 () array!620)

(declare-fun qInv!0 (array!620) Bool)

(assert (=> b!8391 (= res!6947 (qInv!0 q!51))))

(declare-fun e!19 () (_ BitVec 32))

(declare-fun jz!36 () (_ BitVec 32))

(declare-fun b!8392 () Bool)

(declare-fun xx!50 () array!620)

(declare-fun lt!4022 () (_ BitVec 32))

(declare-datatypes ((Unit!567 0))(
  ( (Unit!568) )
))
(declare-datatypes ((tuple3!138 0))(
  ( (tuple3!139 (_1!193 Unit!567) (_2!193 (_ BitVec 32)) (_3!169 array!620)) )
))
(declare-fun e!4280 () tuple3!138)

(declare-fun lt!4025 () array!620)

(declare-fun timesTwoOverPiWhile!0 ((_ BitVec 32) (_ BitVec 32) array!620 (_ BitVec 32) array!620) tuple3!138)

(assert (=> b!8392 (= e!4280 (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4022 lt!4025))))

(declare-fun b!8393 () Bool)

(declare-fun e!4276 () Bool)

(assert (=> b!8393 (= e!4276 e!4277)))

(declare-fun res!6942 () Bool)

(assert (=> b!8393 (=> (not res!6942) (not e!4277))))

(declare-fun i!190 () (_ BitVec 32))

(assert (=> b!8393 (= res!6942 (and (bvsle #b00000000000000000000000000000000 i!190) (bvsle i!190 (bvadd jz!36 #b00000000000000000000000000000001))))))

(declare-fun lt!4024 () tuple3!138)

(assert (=> b!8393 (= lt!4024 e!4280)))

(declare-fun c!931 () Bool)

(assert (=> b!8393 (= c!931 (bvsle lt!4022 (bvadd (bvsub (size!272 xx!50) #b00000000000000000000000000000001) jz!36)))))

(assert (=> b!8393 (= lt!4022 #b00000000000000000000000000000000)))

(assert (=> b!8393 (= lt!4025 (array!621 ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000010100))))

(declare-fun b!8395 () Bool)

(declare-fun res!6943 () Bool)

(assert (=> b!8395 (=> (not res!6943) (not e!4277))))

(declare-fun f!79 () array!620)

(declare-fun fInv!0 (array!620) Bool)

(assert (=> b!8395 (= res!6943 (fInv!0 f!79))))

(declare-fun b!8396 () Bool)

(declare-fun res!6945 () Bool)

(declare-fun e!4278 () Bool)

(assert (=> b!8396 (=> (not res!6945) (not e!4278))))

(declare-fun xxInv!0 (array!620) Bool)

(assert (=> b!8396 (= res!6945 (xxInv!0 xx!50))))

(declare-fun b!8397 () Bool)

(assert (=> b!8397 (= e!4277 (and (bvsle i!190 jz!36) (let ((ix!148 (bvadd i!190 #b00000000000000000000000000000011))) (or (bvslt ix!148 #b00000000000000000000000000000000) (bvsge ix!148 (size!272 f!79))))))))

(declare-fun b!8398 () Bool)

(assert (=> b!8398 (= e!4278 e!4276)))

(declare-fun res!6946 () Bool)

(assert (=> b!8398 (=> (not res!6946) (not e!4276))))

(declare-fun lt!4023 () (_ BitVec 32))

(assert (=> b!8398 (= res!6946 (= (bvsub e!19 (bvmul #b00000000000000000000000000011000 (bvadd (ite (bvslt lt!4023 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!4023) #b00000000000000000000000000000001))) #b00000000000000000000000000000000))))

(assert (=> b!8398 (= lt!4023 (bvsdiv (bvsub e!19 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(declare-fun b!8394 () Bool)

(declare-fun Unit!569 () Unit!567)

(assert (=> b!8394 (= e!4280 (tuple3!139 Unit!569 lt!4022 lt!4025))))

(declare-fun res!6944 () Bool)

(assert (=> start!1579 (=> (not res!6944) (not e!4278))))

(assert (=> start!1579 (= res!6944 (and (bvsle #b00000000000000000000000000000000 jz!36) (bvsle jz!36 #b00000000000000000000000000001111) (bvsle #b00000000000000000000000000011000 e!19) (bvsle e!19 #b00000000000000000000001111110000) (= (bvsrem e!19 #b00000000000000000000000000011000) #b00000000000000000000000000000000)))))

(assert (=> start!1579 e!4278))

(declare-fun array_inv!222 (array!620) Bool)

(assert (=> start!1579 (array_inv!222 f!79)))

(assert (=> start!1579 (array_inv!222 q!51)))

(assert (=> start!1579 true))

(assert (=> start!1579 (array_inv!222 xx!50)))

(assert (= (and start!1579 res!6944) b!8396))

(assert (= (and b!8396 res!6945) b!8398))

(assert (= (and b!8398 res!6946) b!8393))

(assert (= (and b!8393 c!931) b!8392))

(assert (= (and b!8393 (not c!931)) b!8394))

(assert (= (and b!8393 res!6942) b!8395))

(assert (= (and b!8395 res!6943) b!8391))

(assert (= (and b!8391 res!6947) b!8397))

(declare-fun m!16199 () Bool)

(assert (=> b!8392 m!16199))

(declare-fun m!16201 () Bool)

(assert (=> start!1579 m!16201))

(declare-fun m!16203 () Bool)

(assert (=> start!1579 m!16203))

(declare-fun m!16205 () Bool)

(assert (=> start!1579 m!16205))

(declare-fun m!16207 () Bool)

(assert (=> b!8391 m!16207))

(declare-fun m!16209 () Bool)

(assert (=> b!8396 m!16209))

(declare-fun m!16211 () Bool)

(assert (=> b!8395 m!16211))

(push 1)

(assert (not b!8396))

(assert (not start!1579))

(assert (not b!8391))

(assert (not b!8395))

(assert (not b!8392))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!5318 () Bool)

(assert (=> d!5318 (= (array_inv!222 f!79) (bvsge (size!272 f!79) #b00000000000000000000000000000000))))

(assert (=> start!1579 d!5318))

(declare-fun d!5320 () Bool)

(assert (=> d!5320 (= (array_inv!222 q!51) (bvsge (size!272 q!51) #b00000000000000000000000000000000))))

(assert (=> start!1579 d!5320))

(declare-fun d!5322 () Bool)

(assert (=> d!5322 (= (array_inv!222 xx!50) (bvsge (size!272 xx!50) #b00000000000000000000000000000000))))

(assert (=> start!1579 d!5322))

(declare-fun d!5324 () Bool)

(declare-fun res!6950 () Bool)

(declare-fun e!4285 () Bool)

(assert (=> d!5324 (=> (not res!6950) (not e!4285))))

(assert (=> d!5324 (= res!6950 (= (size!272 f!79) #b00000000000000000000000000010100))))

(assert (=> d!5324 (= (fInv!0 f!79) e!4285)))

(declare-fun b!8401 () Bool)

(declare-fun lambda!377 () Int)

(declare-fun all20!0 (array!620 Int) Bool)

(assert (=> b!8401 (= e!4285 (all20!0 f!79 lambda!377))))

(assert (= (and d!5324 res!6950) b!8401))

(declare-fun m!16213 () Bool)

(assert (=> b!8401 m!16213))

(assert (=> b!8395 d!5324))

(declare-fun bs!2342 () Bool)

(declare-fun b!8404 () Bool)

(assert (= bs!2342 (and b!8404 b!8401)))

(declare-fun lambda!380 () Int)

(assert (=> bs!2342 (= lambda!380 lambda!377)))

(declare-fun d!5326 () Bool)

(declare-fun res!6953 () Bool)

(declare-fun e!4288 () Bool)

(assert (=> d!5326 (=> (not res!6953) (not e!4288))))

(assert (=> d!5326 (= res!6953 (= (size!272 xx!50) #b00000000000000000000000000000101))))

(assert (=> d!5326 (= (xxInv!0 xx!50) e!4288)))

(declare-fun all5!0 (array!620 Int) Bool)

(assert (=> b!8404 (= e!4288 (all5!0 xx!50 lambda!380))))

(assert (= (and d!5326 res!6953) b!8404))

(declare-fun m!16215 () Bool)

(assert (=> b!8404 m!16215))

(assert (=> b!8396 d!5326))

(declare-fun bs!2343 () Bool)

(declare-fun b!8407 () Bool)

(assert (= bs!2343 (and b!8407 b!8401)))

(declare-fun lambda!383 () Int)

(assert (=> bs!2343 (not (= lambda!383 lambda!377))))

(declare-fun bs!2344 () Bool)

(assert (= bs!2344 (and b!8407 b!8404)))

(assert (=> bs!2344 (not (= lambda!383 lambda!380))))

(declare-fun d!5328 () Bool)

(declare-fun res!6956 () Bool)

(declare-fun e!4291 () Bool)

(assert (=> d!5328 (=> (not res!6956) (not e!4291))))

(assert (=> d!5328 (= res!6956 (= (size!272 q!51) #b00000000000000000000000000010100))))

(assert (=> d!5328 (= (qInv!0 q!51) e!4291)))

(assert (=> b!8407 (= e!4291 (all20!0 q!51 lambda!383))))

(assert (= (and d!5328 res!6956) b!8407))

(declare-fun m!16217 () Bool)

(assert (=> b!8407 m!16217))

(assert (=> b!8391 d!5328))

(declare-fun b!8420 () Bool)

(declare-fun res!6966 () Bool)

(declare-fun e!4299 () Bool)

(assert (=> b!8420 (=> (not res!6966) (not e!4299))))

(declare-fun lt!4039 () tuple3!138)

(assert (=> b!8420 (= res!6966 (fInv!0 (_3!169 lt!4039)))))

(declare-fun d!5330 () Bool)

(assert (=> d!5330 e!4299))

(declare-fun res!6968 () Bool)

(assert (=> d!5330 (=> (not res!6968) (not e!4299))))

(declare-fun lt!4041 () (_ BitVec 32))

(assert (=> d!5330 (= res!6968 (and (or (and (bvsle #b00000000000000000000000000000000 (_2!193 lt!4039)) (= (bvand lt!4041 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000)) (not (= (bvand lt!4041 #b10000000000000000000000000000000) (bvand (bvadd lt!4041 jz!36) #b10000000000000000000000000000000)))) (bvsgt #b00000000000000000000000000000000 (_2!193 lt!4039)) (let ((lhs!263 (bvadd lt!4041 jz!36))) (or (not (= (bvand lhs!263 #b10000000000000000000000000000000) #b00000000000000000000000000000000)) (= (bvand lhs!263 #b10000000000000000000000000000000) (bvand (bvadd lhs!263 #b00000000000000000000000000000001) #b10000000000000000000000000000000))))) (or (bvsgt #b00000000000000000000000000000000 (_2!193 lt!4039)) (not (= (bvand lt!4041 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000))) (= (bvand lt!4041 #b10000000000000000000000000000000) (bvand (bvadd lt!4041 jz!36) #b10000000000000000000000000000000))) (bvsle #b00000000000000000000000000000000 (_2!193 lt!4039)) (bvsle (_2!193 lt!4039) (bvadd lt!4041 jz!36 #b00000000000000000000000000000001))))))

(declare-fun e!4301 () tuple3!138)

(assert (=> d!5330 (= lt!4039 e!4301)))

(declare-fun c!934 () Bool)

(declare-fun lt!4040 () (_ BitVec 32))

(assert (=> d!5330 (= c!934 (bvsle lt!4040 (bvadd lt!4041 jz!36)))))

(assert (=> d!5330 (= lt!4040 (bvadd lt!4022 #b00000000000000000000000000000001))))

(declare-fun lt!4042 () (_ BitVec 32))

(declare-datatypes ((tuple2!48 0))(
  ( (tuple2!49 (_1!194 Unit!567) (_2!194 array!620)) )
))
(declare-fun lt!4043 () tuple2!48)

(declare-fun Unit!570 () Unit!567)

(declare-fun Unit!571 () Unit!567)

(assert (=> d!5330 (= lt!4043 (ite (bvsge (bvadd (bvsub lt!4042 lt!4041) lt!4022) #b00000000000000000000000000000000) (tuple2!49 Unit!570 (array!621 (store (arr!272 lt!4025) lt!4022 ((_ to_fp 11 53) roundNearestTiesToEven (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 32))) #b00000000000000000000000000000000) #b00000000000000000000000000000000 #b00000000101000101111100110000011) #b00000000000000000000000000000001 #b00000000011011100100111001000100) #b00000000000000000000000000001010 #b00000000110001010110000110110111) #b00000000000000000000000000001011 #b00000000001001000110111000111010) #b00000000000000000000000000001100 #b00000000010000100100110111010010) #b00000000000000000000000000001101 #b00000000111000000000011001001001) #b00000000000000000000000000001110 #b00000000001011101110101000001001) #b00000000000000000000000000001111 #b00000000110100011001001000011100) #b00000000000000000000000000010000 #b00000000111111100001110111101011) #b00000000000000000000000000010001 #b00000000000111001011000100101001) #b00000000000000000000000000010010 #b00000000101001110011111011101000) #b00000000000000000000000000010011 #b00000000100000100011010111110101) #b00000000000000000000000000000010 #b00000000000101010010100111111100) #b00000000000000000000000000010100 #b00000000001011101011101101000100) #b00000000000000000000000000010101 #b00000000100001001110100110011100) #b00000000000000000000000000010110 #b00000000011100000010011010110100) #b00000000000000000000000000010111 #b00000000010111110111111001000001) #b00000000000000000000000000011000 #b00000000001110011001000111010110) #b00000000000000000000000000011001 #b00000000001110011000001101010011) #b00000000000000000000000000011010 #b00000000001110011111010010011100) #b00000000000000000000000000011011 #b00000000100001000101111110001011) #b00000000000000000000000000011100 #b00000000101111011111100100101000) #b00000000000000000000000000011101 #b00000000001110110001111111111000) #b00000000000000000000000000000011 #b00000000001001110101011111010001) #b00000000000000000000000000011110 #b00000000100101111111111111011110) #b00000000000000000000000000011111 #b00000000000001011001100000001111) #b00000000000000000000000000100000 #b00000000111011110010111100010001) #b00000000000000000000000000100001 #b00000000100010110101101000001010) #b00000000000000000000000000100010 #b00000000011011010001111101101101) #b00000000000000000000000000100011 #b00000000001101100111111011001111) #b00000000000000000000000000100100 #b00000000001001111100101100001001) #b00000000000000000000000000100101 #b00000000101101110100111101000110) #b00000000000000000000000000100110 #b00000000001111110110011010011110) #b00000000000000000000000000100111 #b00000000010111111110101000101101) #b00000000000000000000000000000100 #b00000000111101010011010011011101) #b00000000000000000000000000101000 #b00000000011101010010011110111010) #b00000000000000000000000000101001 #b00000000110001111110101111100101) #b00000000000000000000000000101010 #b00000000111100010111101100111101) #b00000000000000000000000000101011 #b00000000000001110011100111110111) #b00000000000000000000000000101100 #b00000000100010100101001010010010) #b00000000000000000000000000101101 #b00000000111010100110101111111011) #b00000000000000000000000000101110 #b00000000010111111011000100011111) #b00000000000000000000000000101111 #b00000000100011010101110100001000) #b00000000000000000000000000110000 #b00000000010101100000001100110000) #b00000000000000000000000000110001 #b00000000010001101111110001111011) #b00000000000000000000000000000101 #b00000000110000001101101101100010) #b00000000000000000000000000110010 #b00000000011010111010101111110000) #b00000000000000000000000000110011 #b00000000110011111011110000100000) #b00000000000000000000000000110100 #b00000000100110101111010000110110) #b00000000000000000000000000110101 #b00000000000111011010100111100011) #b00000000000000000000000000110110 #b00000000100100010110000101011110) #b00000000000000000000000000110111 #b00000000111001100001101100001000) #b00000000000000000000000000111000 #b00000000011001011001100110000101) #b00000000000000000000000000111001 #b00000000010111110001010010100000) #b00000000000000000000000000111010 #b00000000011010000100000010001101) #b00000000000000000000000000111011 #b00000000111111111101100010000000) #b00000000000000000000000000000110 #b00000000100101011001100100111100) #b00000000000000000000000000111100 #b00000000010011010111001100100111) #b00000000000000000000000000111101 #b00000000001100010000011000000110) #b00000000000000000000000000111110 #b00000000000101010101011011001010) #b00000000000000000000000000111111 #b00000000011100111010100011001001) #b00000000000000000000000001000000 #b00000000011000001110001001111011) #b00000000000000000000000001000001 #b00000000110000001000110001101011) #b00000000000000000000000000000111 #b00000000010000111001000001000001) #b00000000000000000000000000001000 #b00000000111111100101000101100011) #b00000000000000000000000000001001 #b00000000101010111101111010111011) (bvadd (bvsub lt!4042 lt!4041) lt!4022)))) (size!272 lt!4025))) (tuple2!49 Unit!571 lt!4025)))))

(declare-fun e!4300 () Bool)

(assert (=> d!5330 e!4300))

(declare-fun res!6965 () Bool)

(assert (=> d!5330 (=> (not res!6965) (not e!4300))))

(assert (=> d!5330 (= res!6965 (and (bvsle #b00000000000000000000000000000000 lt!4022) (bvsle lt!4022 (bvadd lt!4041 jz!36 #b00000000000000000000000000000001))))))

(declare-fun lt!4038 () (_ BitVec 32))

(assert (=> d!5330 (= lt!4042 (ite (bvslt lt!4038 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!4038))))

(assert (=> d!5330 (= lt!4038 (bvsdiv (bvsub e!19 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(assert (=> d!5330 (= lt!4041 (bvsub (size!272 xx!50) #b00000000000000000000000000000001))))

(assert (=> d!5330 (= (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4022 lt!4025) lt!4039)))

(declare-fun b!8421 () Bool)

(assert (=> b!8421 (= e!4299 (bvsgt (_2!193 lt!4039) (bvadd lt!4041 jz!36)))))

(assert (=> b!8421 (or (not (= (bvand lt!4041 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000))) (= (bvand lt!4041 #b10000000000000000000000000000000) (bvand (bvadd lt!4041 jz!36) #b10000000000000000000000000000000)))))

(declare-fun b!8422 () Bool)

(assert (=> b!8422 (= e!4301 (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4040 (_2!194 lt!4043)))))

(declare-fun b!8423 () Bool)

(assert (=> b!8423 (= e!4300 (bvsle lt!4022 (bvadd lt!4041 jz!36)))))

(declare-fun b!8424 () Bool)

(declare-fun res!6967 () Bool)

(assert (=> b!8424 (=> (not res!6967) (not e!4300))))

(assert (=> b!8424 (= res!6967 (fInv!0 lt!4025))))

(declare-fun b!8425 () Bool)

(declare-fun Unit!572 () Unit!567)

(assert (=> b!8425 (= e!4301 (tuple3!139 Unit!572 lt!4040 (_2!194 lt!4043)))))

(assert (= (and d!5330 res!6965) b!8424))

(assert (= (and b!8424 res!6967) b!8423))

(assert (= (and d!5330 c!934) b!8422))

(assert (= (and d!5330 (not c!934)) b!8425))

(assert (= (and d!5330 res!6968) b!8420))

(assert (= (and b!8420 res!6966) b!8421))

(declare-fun m!16219 () Bool)

(assert (=> b!8420 m!16219))

(declare-fun m!16221 () Bool)

(assert (=> d!5330 m!16221))

(declare-fun m!16223 () Bool)

(assert (=> d!5330 m!16223))

(declare-fun m!16225 () Bool)

(assert (=> b!8422 m!16225))

(declare-fun m!16227 () Bool)

(assert (=> b!8424 m!16227))

(assert (=> b!8392 d!5330))

(push 1)

(assert (not b!8422))

(assert (not b!8407))

(assert (not b!8401))

(assert (not b!8424))

(assert (not b!8404))

(assert (not b!8420))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

