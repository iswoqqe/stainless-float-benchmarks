; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2295 () Bool)

(assert start!2295)

(declare-fun res!9408 () Bool)

(declare-fun e!6377 () Bool)

(assert (=> start!2295 (=> (not res!9408) (not e!6377))))

(declare-datatypes ((array!795 0))(
  ( (array!796 (arr!344 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!344 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!795)

(assert (=> start!2295 (= res!9408 (= (size!344 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2295 e!6377))

(assert (=> start!2295 true))

(declare-fun array_inv!293 (array!795) Bool)

(assert (=> start!2295 (array_inv!293 fq!120)))

(declare-fun b!11668 () Bool)

(declare-datatypes ((tuple2!106 0))(
  ( (tuple2!107 (_1!258 (_ FloatingPoint 11 53)) (_2!258 (_ FloatingPoint 11 53))) )
))
(declare-fun e!6378 () tuple2!106)

(declare-fun call!17 () tuple2!106)

(assert (=> b!11668 (= e!6378 call!17)))

(declare-fun b!11669 () Bool)

(declare-fun res!9407 () Bool)

(assert (=> b!11669 (=> (not res!9407) (not e!6377))))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-fun jz!77 () (_ BitVec 32))

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!11669 (= res!9407 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!11670 () Bool)

(declare-fun res!9405 () Bool)

(assert (=> b!11670 (=> (not res!9405) (not e!6377))))

(declare-fun fqInv!0 (array!795) Bool)

(assert (=> b!11670 (= res!9405 (fqInv!0 fq!120))))

(declare-fun b!11671 () Bool)

(declare-fun e!6376 () Bool)

(assert (=> b!11671 (= e!6377 e!6376)))

(declare-fun res!9406 () Bool)

(assert (=> b!11671 (=> (not res!9406) (not e!6376))))

(declare-fun lt!5688 () tuple2!106)

(assert (=> b!11671 (= res!9406 (fp.geq (_1!258 lt!5688) (fp.add roundNearestTiesToEven c!23 (_2!258 lt!5688))))))

(assert (=> b!11671 (= lt!5688 e!6378)))

(declare-fun c!1341 () Bool)

(assert (=> b!11671 (= c!1341 (fp.geq s!25 (select (arr!344 fq!120) i!347)))))

(declare-fun b!11672 () Bool)

(assert (=> b!11672 (= e!6378 call!17)))

(declare-fun lt!5690 () tuple2!106)

(declare-fun lt!5689 () (_ BitVec 32))

(declare-fun b!11673 () Bool)

(assert (=> b!11673 (= e!6376 (and (bvsge lt!5689 #b00000000000000000000000000000000) (or (bvsgt #b11111111111111111111111111111111 lt!5689) (bvsgt lt!5689 (bvsub jz!77 #b00000000000000000000000000000001)) (not (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (_1!258 lt!5690))) (not (fp.leq (_1!258 lt!5690) (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd lt!5689 #b00000000000000000000000000000001)))) (not (fp.eq (fp.add roundNearestTiesToEven (_1!258 lt!5690) (_2!258 lt!5690)) (_1!258 lt!5690))))))))

(assert (=> b!11673 (= lt!5689 (bvsub i!347 #b00000000000000000000000000000001))))

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!106)

(assert (=> b!11673 (= lt!5690 (fast2Sum!0 (_1!258 lt!5688) (fp.add roundNearestTiesToEven c!23 (_2!258 lt!5688))))))

(declare-fun bm!14 () Bool)

(assert (=> bm!14 (= call!17 (fast2Sum!0 (ite c!1341 s!25 (select (arr!344 fq!120) i!347)) (ite c!1341 (select (arr!344 fq!120) i!347) s!25)))))

(assert (= (and start!2295 res!9408) b!11670))

(assert (= (and b!11670 res!9405) b!11669))

(assert (= (and b!11669 res!9407) b!11671))

(assert (= (and b!11671 c!1341) b!11668))

(assert (= (and b!11671 (not c!1341)) b!11672))

(assert (= (or b!11668 b!11672) bm!14))

(assert (= (and b!11671 res!9406) b!11673))

(declare-fun m!19559 () Bool)

(assert (=> b!11673 m!19559))

(declare-fun m!19561 () Bool)

(assert (=> b!11673 m!19561))

(declare-fun m!19563 () Bool)

(assert (=> b!11671 m!19563))

(assert (=> bm!14 m!19563))

(declare-fun m!19565 () Bool)

(assert (=> bm!14 m!19565))

(declare-fun m!19567 () Bool)

(assert (=> b!11669 m!19567))

(declare-fun m!19569 () Bool)

(assert (=> b!11670 m!19569))

(declare-fun m!19571 () Bool)

(assert (=> start!2295 m!19571))

(push 1)

(assert (not start!2295))

(assert (not b!11670))

(assert (not bm!14))

(assert (not b!11673))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!6553 () Bool)

(assert (=> d!6553 (= (array_inv!293 fq!120) (bvsge (size!344 fq!120) #b00000000000000000000000000000000))))

(assert (=> start!2295 d!6553))

(declare-fun d!6555 () Bool)

(assert (=> d!6555 (= (fqInv!0 fq!120) (and (= (size!344 fq!120) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000000000)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000000001)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000000010)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000000011)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000000100)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000000101)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000000110)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000000111)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000001000)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000001000) (fp #b0 #b01101000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000001001)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000001001) (fp #b0 #b01100101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000001010)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000001010) (fp #b0 #b01100010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000001011)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000001011) (fp #b0 #b01011111001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000001100)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000001100) (fp #b0 #b01011100001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000001101)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000001101) (fp #b0 #b01011001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000001110)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000001110) (fp #b0 #b01010110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000001111)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000001111) (fp #b0 #b01010011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000010000)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000010000) (fp #b0 #b01010000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000010001)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000010001) (fp #b0 #b01001101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000010010)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000010010) (fp #b0 #b01001010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!344 fq!120) #b00000000000000000000000000010011)) (fp.leq (select (arr!344 fq!120) #b00000000000000000000000000010011) (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000))))))

(declare-fun bs!2730 () Bool)

(assert (= bs!2730 d!6555))

(declare-fun m!19573 () Bool)

(assert (=> bs!2730 m!19573))

(declare-fun m!19575 () Bool)

(assert (=> bs!2730 m!19575))

(declare-fun m!19577 () Bool)

(assert (=> bs!2730 m!19577))

(declare-fun m!19579 () Bool)

(assert (=> bs!2730 m!19579))

(declare-fun m!19581 () Bool)

(assert (=> bs!2730 m!19581))

(declare-fun m!19583 () Bool)

(assert (=> bs!2730 m!19583))

(declare-fun m!19585 () Bool)

(assert (=> bs!2730 m!19585))

(declare-fun m!19587 () Bool)

(assert (=> bs!2730 m!19587))

(declare-fun m!19589 () Bool)

(assert (=> bs!2730 m!19589))

(declare-fun m!19591 () Bool)

(assert (=> bs!2730 m!19591))

(declare-fun m!19593 () Bool)

(assert (=> bs!2730 m!19593))

(declare-fun m!19595 () Bool)

(assert (=> bs!2730 m!19595))

(declare-fun m!19597 () Bool)

(assert (=> bs!2730 m!19597))

(declare-fun m!19599 () Bool)

(assert (=> bs!2730 m!19599))

(declare-fun m!19601 () Bool)

(assert (=> bs!2730 m!19601))

(declare-fun m!19603 () Bool)

(assert (=> bs!2730 m!19603))

(declare-fun m!19605 () Bool)

(assert (=> bs!2730 m!19605))

(declare-fun m!19607 () Bool)

(assert (=> bs!2730 m!19607))

(declare-fun m!19609 () Bool)

(assert (=> bs!2730 m!19609))

(declare-fun m!19611 () Bool)

(assert (=> bs!2730 m!19611))

(assert (=> b!11670 d!6555))

(declare-fun d!6557 () Bool)

(declare-fun lt!5695 () tuple2!106)

(assert (=> d!6557 (fp.eq (fp.add roundNearestTiesToEven (_1!258 lt!5695) (_2!258 lt!5695)) (_1!258 lt!5695))))

(declare-fun lt!5696 () (_ FloatingPoint 11 53))

(assert (=> d!6557 (= lt!5695 (tuple2!107 lt!5696 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (ite c!1341 s!25 (select (arr!344 fq!120) i!347)) lt!5696) (ite c!1341 (select (arr!344 fq!120) i!347) s!25))))))

(assert (=> d!6557 (= lt!5696 (fp.add roundNearestTiesToEven (ite c!1341 s!25 (select (arr!344 fq!120) i!347)) (ite c!1341 (select (arr!344 fq!120) i!347) s!25)))))

(assert (=> d!6557 (= (fast2Sum!0 (ite c!1341 s!25 (select (arr!344 fq!120) i!347)) (ite c!1341 (select (arr!344 fq!120) i!347) s!25)) lt!5695)))

(assert (=> bm!14 d!6557))

(declare-fun d!6559 () Bool)

(declare-fun lt!5697 () tuple2!106)

(assert (=> d!6559 (fp.eq (fp.add roundNearestTiesToEven (_1!258 lt!5697) (_2!258 lt!5697)) (_1!258 lt!5697))))

(declare-fun lt!5698 () (_ FloatingPoint 11 53))

(assert (=> d!6559 (= lt!5697 (tuple2!107 lt!5698 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (_1!258 lt!5688) lt!5698) (fp.add roundNearestTiesToEven c!23 (_2!258 lt!5688)))))))

(assert (=> d!6559 (= lt!5698 (fp.add roundNearestTiesToEven (_1!258 lt!5688) (fp.add roundNearestTiesToEven c!23 (_2!258 lt!5688))))))

(assert (=> d!6559 (= (fast2Sum!0 (_1!258 lt!5688) (fp.add roundNearestTiesToEven c!23 (_2!258 lt!5688))) lt!5697)))

(assert (=> b!11673 d!6559))

(push 1)

(check-sat)

(pop 1)

