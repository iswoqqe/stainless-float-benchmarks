; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!3213 () Bool)

(assert start!3213)

(declare-datatypes ((array!1472 0))(
  ( (array!1473 (arr!648 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!648 (_ BitVec 32))) )
))
(declare-fun fq!41 () array!1472)

(assert (=> start!3213 (and (= (size!648 fq!41) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!648 fq!41) #b00000000000000000000000000000000)) (fp.leq (select (arr!648 fq!41) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!648 fq!41) #b00000000000000000000000000000001)) (fp.leq (select (arr!648 fq!41) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!648 fq!41) #b00000000000000000000000000000010)) (fp.leq (select (arr!648 fq!41) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!648 fq!41) #b00000000000000000000000000000011)) (fp.leq (select (arr!648 fq!41) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!648 fq!41) #b00000000000000000000000000000100)) (fp.leq (select (arr!648 fq!41) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!648 fq!41) #b00000000000000000000000000000101)) (fp.leq (select (arr!648 fq!41) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!648 fq!41) #b00000000000000000000000000000110)) (fp.leq (select (arr!648 fq!41) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!648 fq!41) #b00000000000000000000000000000111)) (fp.leq (select (arr!648 fq!41) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!648 fq!41) #b00000000000000000000000000001000)) (bvsge #b00000000000000000000000000001000 (size!648 fq!41)))))

(declare-fun array_inv!596 (array!1472) Bool)

(assert (=> start!3213 (array_inv!596 fq!41)))

(declare-fun bs!3590 () Bool)

(assert (= bs!3590 start!3213))

(declare-fun m!29153 () Bool)

(assert (=> bs!3590 m!29153))

(declare-fun m!29155 () Bool)

(assert (=> bs!3590 m!29155))

(declare-fun m!29157 () Bool)

(assert (=> bs!3590 m!29157))

(declare-fun m!29159 () Bool)

(assert (=> bs!3590 m!29159))

(declare-fun m!29161 () Bool)

(assert (=> bs!3590 m!29161))

(declare-fun m!29163 () Bool)

(assert (=> bs!3590 m!29163))

(declare-fun m!29165 () Bool)

(assert (=> bs!3590 m!29165))

(declare-fun m!29167 () Bool)

(assert (=> bs!3590 m!29167))

(declare-fun m!29169 () Bool)

(assert (=> bs!3590 m!29169))

(declare-fun m!29171 () Bool)

(assert (=> bs!3590 m!29171))

(push 1)

(assert (not start!3213))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

