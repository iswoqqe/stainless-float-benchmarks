; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2361 () Bool)

(assert start!2361)

(declare-fun b!11981 () Bool)

(declare-datatypes ((tuple2!126 0))(
  ( (tuple2!127 (_1!273 (_ FloatingPoint 11 53)) (_2!273 (_ FloatingPoint 11 53))) )
))
(declare-fun e!6587 () tuple2!126)

(declare-fun call!53 () tuple2!126)

(assert (=> b!11981 (= e!6587 call!53)))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun c!1387 () Bool)

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-fun bm!50 () Bool)

(declare-datatypes ((array!837 0))(
  ( (array!838 (arr!363 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!363 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!837)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!126)

(assert (=> bm!50 (= call!53 (fast2Sum!0 (ite c!1387 s!25 (select (arr!363 fq!120) i!347)) (ite c!1387 (select (arr!363 fq!120) i!347) s!25)))))

(declare-fun b!11982 () Bool)

(declare-fun e!6588 () Bool)

(declare-fun lt!5846 () (_ BitVec 32))

(declare-fun jz!77 () (_ BitVec 32))

(assert (=> b!11982 (= e!6588 (and (bvslt lt!5846 #b00000000000000000000000000000000) (bvsle #b11111111111111111111111111111111 lt!5846) (not (= (bvand jz!77 #b10000000000000000000000000000000) #b00000000000000000000000000000000)) (not (= (bvand jz!77 #b10000000000000000000000000000000) (bvand (bvsub jz!77 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))))

(assert (=> b!11982 (= lt!5846 (bvsub i!347 #b00000000000000000000000000000001))))

(declare-fun lt!5845 () tuple2!126)

(declare-fun lt!5844 () tuple2!126)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!11982 (= lt!5845 (fast2Sum!0 (_1!273 lt!5844) (fp.add roundNearestTiesToEven c!23 (_2!273 lt!5844))))))

(declare-fun res!9631 () Bool)

(declare-fun e!6589 () Bool)

(assert (=> start!2361 (=> (not res!9631) (not e!6589))))

(assert (=> start!2361 (= res!9631 (= (size!363 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2361 e!6589))

(assert (=> start!2361 true))

(declare-fun array_inv!312 (array!837) Bool)

(assert (=> start!2361 (array_inv!312 fq!120)))

(declare-fun b!11983 () Bool)

(declare-fun res!9633 () Bool)

(assert (=> b!11983 (=> (not res!9633) (not e!6589))))

(assert (=> b!11983 (= res!9633 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!11984 () Bool)

(assert (=> b!11984 (= e!6587 call!53)))

(declare-fun b!11985 () Bool)

(declare-fun res!9630 () Bool)

(assert (=> b!11985 (=> (not res!9630) (not e!6589))))

(declare-fun fqInv!0 (array!837) Bool)

(assert (=> b!11985 (= res!9630 (fqInv!0 fq!120))))

(declare-fun b!11986 () Bool)

(assert (=> b!11986 (= e!6589 e!6588)))

(declare-fun res!9632 () Bool)

(assert (=> b!11986 (=> (not res!9632) (not e!6588))))

(assert (=> b!11986 (= res!9632 (fp.geq (_1!273 lt!5844) (fp.add roundNearestTiesToEven c!23 (_2!273 lt!5844))))))

(assert (=> b!11986 (= lt!5844 e!6587)))

(assert (=> b!11986 (= c!1387 (fp.geq s!25 (select (arr!363 fq!120) i!347)))))

(assert (= (and start!2361 res!9631) b!11985))

(assert (= (and b!11985 res!9630) b!11983))

(assert (= (and b!11983 res!9633) b!11986))

(assert (= (and b!11986 c!1387) b!11981))

(assert (= (and b!11986 (not c!1387)) b!11984))

(assert (= (or b!11981 b!11984) bm!50))

(assert (= (and b!11986 res!9632) b!11982))

(declare-fun m!19927 () Bool)

(assert (=> b!11983 m!19927))

(declare-fun m!19929 () Bool)

(assert (=> b!11982 m!19929))

(declare-fun m!19931 () Bool)

(assert (=> start!2361 m!19931))

(declare-fun m!19933 () Bool)

(assert (=> b!11985 m!19933))

(declare-fun m!19935 () Bool)

(assert (=> bm!50 m!19935))

(declare-fun m!19937 () Bool)

(assert (=> bm!50 m!19937))

(assert (=> b!11986 m!19935))

(push 1)

(assert (not bm!50))

(assert (not b!11982))

(assert (not b!11985))

(assert (not start!2361))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

