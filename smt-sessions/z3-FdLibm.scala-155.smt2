; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!1121 () Bool)

(assert start!1121)

(declare-fun res!4126 () Bool)

(declare-fun e!2681 () Bool)

(assert (=> start!1121 (=> (not res!4126) (not e!2681))))

(declare-fun jz!67 () (_ BitVec 32))

(declare-datatypes ((array!397 0))(
  ( (array!398 (arr!173 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!173 (_ BitVec 32))) )
))
(declare-fun qq!69 () array!397)

(assert (=> start!1121 (= res!4126 (and (bvsle #b00000000000000000000000000000000 jz!67) (bvslt jz!67 #b00000000000000000000000000010100) (= (size!173 qq!69) #b00000000000000000000000000010100)))))

(assert (=> start!1121 e!2681))

(assert (=> start!1121 true))

(declare-fun array_inv!123 (array!397) Bool)

(assert (=> start!1121 (array_inv!123 qq!69)))

(declare-fun b!5253 () Bool)

(declare-fun res!4127 () Bool)

(assert (=> b!5253 (=> (not res!4127) (not e!2681))))

(declare-fun qqInv!0 (array!397) Bool)

(assert (=> b!5253 (= res!4127 (qqInv!0 qq!69))))

(declare-fun b!5254 () Bool)

(assert (=> b!5254 (= e!2681 (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000000)) (fp.leq (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000)))) #b00000000000000000000000000000001)) (fp.leq (select (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000)))) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (bvsge #b00000000000000000000000000000000 (size!173 qq!69))))))

(assert (= (and start!1121 res!4126) b!5253))

(assert (= (and b!5253 res!4127) b!5254))

(declare-fun m!8035 () Bool)

(assert (=> start!1121 m!8035))

(declare-fun m!8037 () Bool)

(assert (=> b!5253 m!8037))

(declare-fun m!8039 () Bool)

(assert (=> b!5254 m!8039))

(declare-fun m!8041 () Bool)

(assert (=> b!5254 m!8041))

(declare-fun m!8043 () Bool)

(assert (=> b!5254 m!8043))

(declare-fun m!8045 () Bool)

(assert (=> b!5254 m!8045))

(declare-fun m!8047 () Bool)

(assert (=> b!5254 m!8047))

(declare-fun m!8049 () Bool)

(assert (=> b!5254 m!8049))

(check-sat (not start!1121) (not b!5253))
(check-sat)
