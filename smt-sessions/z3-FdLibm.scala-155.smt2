; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!1107 () Bool)

(assert start!1107)

(declare-fun res!3788 () Bool)

(declare-fun e!2610 () Bool)

(assert (=> start!1107 (=> (not res!3788) (not e!2610))))

(declare-fun jz!67 () (_ BitVec 32))

(declare-datatypes ((array!396 0))(
  ( (array!397 (arr!173 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!173 (_ BitVec 32))) )
))
(declare-fun qq!69 () array!396)

(assert (=> start!1107 (= res!3788 (and (bvsle #b00000000000000000000000000000000 jz!67) (bvslt jz!67 #b00000000000000000000000000010100) (= (size!173 qq!69) #b00000000000000000000000000010100)))))

(assert (=> start!1107 e!2610))

(assert (=> start!1107 true))

(declare-fun array_inv!123 (array!396) Bool)

(assert (=> start!1107 (array_inv!123 qq!69)))

(declare-fun b!4885 () Bool)

(declare-fun res!3789 () Bool)

(assert (=> b!4885 (=> (not res!3789) (not e!2610))))

(declare-fun qqInv!0 (array!396) Bool)

(assert (=> b!4885 (= res!3789 (qqInv!0 qq!69))))

(declare-fun b!4886 () Bool)

(assert (=> b!4886 (= e!2610 (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000000)) (fp.leq (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000)))) #b00000000000000000000000000000001)) (fp.leq (select (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!173 qq!69) #b00000000000000000000000000000000)))) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (bvsge #b00000000000000000000000000000000 (size!173 qq!69))))))

(assert (= (and start!1107 res!3788) b!4885))

(assert (= (and b!4885 res!3789) b!4886))

(declare-fun m!6355 () Bool)

(assert (=> start!1107 m!6355))

(declare-fun m!6357 () Bool)

(assert (=> b!4885 m!6357))

(declare-fun m!6359 () Bool)

(assert (=> b!4886 m!6359))

(declare-fun m!6361 () Bool)

(assert (=> b!4886 m!6361))

(declare-fun m!6363 () Bool)

(assert (=> b!4886 m!6363))

(declare-fun m!6365 () Bool)

(assert (=> b!4886 m!6365))

(declare-fun m!6367 () Bool)

(assert (=> b!4886 m!6367))

(declare-fun m!6369 () Bool)

(assert (=> b!4886 m!6369))

(check-sat (not start!1107) (not b!4885))
(check-sat)
