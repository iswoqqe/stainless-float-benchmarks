; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2333 () Bool)

(assert start!2333)

(declare-fun b!11793 () Bool)

(declare-fun res!9504 () Bool)

(declare-fun e!6478 () Bool)

(assert (=> b!11793 (=> (not res!9504) (not e!6478))))

(declare-datatypes ((array!823 0))(
  ( (array!824 (arr!357 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!357 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!823)

(declare-fun fqInv!0 (array!823) Bool)

(assert (=> b!11793 (= res!9504 (fqInv!0 fq!120))))

(declare-fun b!11795 () Bool)

(declare-datatypes ((tuple2!114 0))(
  ( (tuple2!115 (_1!262 (_ FloatingPoint 11 53)) (_2!262 (_ FloatingPoint 11 53))) )
))
(declare-fun e!6476 () tuple2!114)

(declare-fun call!29 () tuple2!114)

(assert (=> b!11795 (= e!6476 call!29)))

(declare-fun b!11796 () Bool)

(declare-fun res!9505 () Bool)

(assert (=> b!11796 (=> (not res!9505) (not e!6478))))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-fun jz!77 () (_ BitVec 32))

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!11796 (= res!9505 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!11797 () Bool)

(declare-fun e!6477 () Bool)

(declare-fun lt!5731 () (_ BitVec 32))

(assert (=> b!11797 (= e!6477 (and (bvsge lt!5731 #b00000000000000000000000000000000) (bvsge (bvadd lt!5731 #b00000000000000000000000000000001) (bvadd i!347 #b00000000000000000000000000000001))))))

(assert (=> b!11797 (= lt!5731 (bvsub i!347 #b00000000000000000000000000000001))))

(declare-fun lt!5730 () tuple2!114)

(declare-fun lt!5729 () tuple2!114)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!114)

(assert (=> b!11797 (= lt!5730 (fast2Sum!0 (_1!262 lt!5729) (fp.add roundNearestTiesToEven c!23 (_2!262 lt!5729))))))

(declare-fun b!11798 () Bool)

(assert (=> b!11798 (= e!6478 e!6477)))

(declare-fun res!9506 () Bool)

(assert (=> b!11798 (=> (not res!9506) (not e!6477))))

(assert (=> b!11798 (= res!9506 (fp.geq (_1!262 lt!5729) (fp.add roundNearestTiesToEven c!23 (_2!262 lt!5729))))))

(assert (=> b!11798 (= lt!5729 e!6476)))

(declare-fun c!1353 () Bool)

(assert (=> b!11798 (= c!1353 (fp.geq s!25 (select (arr!357 fq!120) i!347)))))

(declare-fun bm!26 () Bool)

(assert (=> bm!26 (= call!29 (fast2Sum!0 (ite c!1353 s!25 (select (arr!357 fq!120) i!347)) (ite c!1353 (select (arr!357 fq!120) i!347) s!25)))))

(declare-fun b!11794 () Bool)

(assert (=> b!11794 (= e!6476 call!29)))

(declare-fun res!9507 () Bool)

(assert (=> start!2333 (=> (not res!9507) (not e!6478))))

(assert (=> start!2333 (= res!9507 (= (size!357 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2333 e!6478))

(assert (=> start!2333 true))

(declare-fun array_inv!306 (array!823) Bool)

(assert (=> start!2333 (array_inv!306 fq!120)))

(assert (= (and start!2333 res!9507) b!11793))

(assert (= (and b!11793 res!9504) b!11796))

(assert (= (and b!11796 res!9505) b!11798))

(assert (= (and b!11798 c!1353) b!11794))

(assert (= (and b!11798 (not c!1353)) b!11795))

(assert (= (or b!11794 b!11795) bm!26))

(assert (= (and b!11798 res!9506) b!11797))

(declare-fun m!19739 () Bool)

(assert (=> start!2333 m!19739))

(declare-fun m!19741 () Bool)

(assert (=> bm!26 m!19741))

(declare-fun m!19743 () Bool)

(assert (=> bm!26 m!19743))

(declare-fun m!19745 () Bool)

(assert (=> b!11793 m!19745))

(declare-fun m!19747 () Bool)

(assert (=> b!11797 m!19747))

(declare-fun m!19749 () Bool)

(assert (=> b!11796 m!19749))

(assert (=> b!11798 m!19741))

(push 1)

(assert (not start!2333))

(assert (not b!11797))

(assert (not bm!26))

(assert (not b!11793))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

