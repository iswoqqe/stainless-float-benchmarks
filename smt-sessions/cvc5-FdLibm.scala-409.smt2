; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2367 () Bool)

(assert start!2367)

(declare-fun res!9669 () Bool)

(declare-fun e!6623 () Bool)

(assert (=> start!2367 (=> (not res!9669) (not e!6623))))

(declare-datatypes ((array!843 0))(
  ( (array!844 (arr!366 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!366 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!843)

(assert (=> start!2367 (= res!9669 (= (size!366 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2367 e!6623))

(assert (=> start!2367 true))

(declare-fun array_inv!315 (array!843) Bool)

(assert (=> start!2367 (array_inv!315 fq!120)))

(declare-fun b!12035 () Bool)

(declare-fun res!9667 () Bool)

(assert (=> b!12035 (=> (not res!9667) (not e!6623))))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-fun jz!77 () (_ BitVec 32))

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!12035 (= res!9667 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!12036 () Bool)

(declare-fun e!6622 () Bool)

(assert (=> b!12036 (= e!6623 e!6622)))

(declare-fun res!9668 () Bool)

(assert (=> b!12036 (=> (not res!9668) (not e!6622))))

(declare-datatypes ((tuple2!132 0))(
  ( (tuple2!133 (_1!276 (_ FloatingPoint 11 53)) (_2!276 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5871 () tuple2!132)

(assert (=> b!12036 (= res!9668 (fp.geq (_1!276 lt!5871) (fp.add roundNearestTiesToEven c!23 (_2!276 lt!5871))))))

(declare-fun e!6625 () tuple2!132)

(assert (=> b!12036 (= lt!5871 e!6625)))

(declare-fun c!1396 () Bool)

(assert (=> b!12036 (= c!1396 (fp.geq s!25 (select (arr!366 fq!120) i!347)))))

(declare-fun lt!5873 () tuple2!132)

(declare-fun b!12037 () Bool)

(declare-fun lt!5872 () (_ BitVec 32))

(assert (=> b!12037 (= e!6622 (and (bvslt lt!5872 #b00000000000000000000000000000000) (or (bvsgt #b11111111111111111111111111111111 lt!5872) (bvsgt lt!5872 (bvsub jz!77 #b00000000000000000000000000000001)) (not (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (_1!276 lt!5873))) (not (fp.leq (_1!276 lt!5873) (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd lt!5872 #b00000000000000000000000000000001)))) (not (fp.eq (fp.add roundNearestTiesToEven (_1!276 lt!5873) (_2!276 lt!5873)) (_1!276 lt!5873))))))))

(assert (=> b!12037 (= lt!5872 (bvsub i!347 #b00000000000000000000000000000001))))

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!132)

(assert (=> b!12037 (= lt!5873 (fast2Sum!0 (_1!276 lt!5871) (fp.add roundNearestTiesToEven c!23 (_2!276 lt!5871))))))

(declare-fun b!12038 () Bool)

(declare-fun res!9666 () Bool)

(assert (=> b!12038 (=> (not res!9666) (not e!6623))))

(declare-fun fqInv!0 (array!843) Bool)

(assert (=> b!12038 (= res!9666 (fqInv!0 fq!120))))

(declare-fun call!62 () tuple2!132)

(declare-fun bm!59 () Bool)

(assert (=> bm!59 (= call!62 (fast2Sum!0 (ite c!1396 s!25 (select (arr!366 fq!120) i!347)) (ite c!1396 (select (arr!366 fq!120) i!347) s!25)))))

(declare-fun b!12039 () Bool)

(assert (=> b!12039 (= e!6625 call!62)))

(declare-fun b!12040 () Bool)

(assert (=> b!12040 (= e!6625 call!62)))

(assert (= (and start!2367 res!9669) b!12038))

(assert (= (and b!12038 res!9666) b!12035))

(assert (= (and b!12035 res!9667) b!12036))

(assert (= (and b!12036 c!1396) b!12040))

(assert (= (and b!12036 (not c!1396)) b!12039))

(assert (= (or b!12040 b!12039) bm!59))

(assert (= (and b!12036 res!9668) b!12037))

(declare-fun m!19963 () Bool)

(assert (=> bm!59 m!19963))

(declare-fun m!19965 () Bool)

(assert (=> bm!59 m!19965))

(assert (=> b!12036 m!19963))

(declare-fun m!19967 () Bool)

(assert (=> b!12037 m!19967))

(declare-fun m!19969 () Bool)

(assert (=> b!12037 m!19969))

(declare-fun m!19971 () Bool)

(assert (=> b!12038 m!19971))

(declare-fun m!19973 () Bool)

(assert (=> b!12035 m!19973))

(declare-fun m!19975 () Bool)

(assert (=> start!2367 m!19975))

(push 1)

(assert (not bm!59))

(assert (not start!2367))

(assert (not b!12038))

(assert (not b!12037))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!6609 () Bool)

(declare-fun lt!5878 () tuple2!132)

(assert (=> d!6609 (fp.eq (fp.add roundNearestTiesToEven (_1!276 lt!5878) (_2!276 lt!5878)) (_1!276 lt!5878))))

(declare-fun lt!5879 () (_ FloatingPoint 11 53))

(assert (=> d!6609 (= lt!5878 (tuple2!133 lt!5879 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (ite c!1396 s!25 (select (arr!366 fq!120) i!347)) lt!5879) (ite c!1396 (select (arr!366 fq!120) i!347) s!25))))))

(assert (=> d!6609 (= lt!5879 (fp.add roundNearestTiesToEven (ite c!1396 s!25 (select (arr!366 fq!120) i!347)) (ite c!1396 (select (arr!366 fq!120) i!347) s!25)))))

(assert (=> d!6609 (= (fast2Sum!0 (ite c!1396 s!25 (select (arr!366 fq!120) i!347)) (ite c!1396 (select (arr!366 fq!120) i!347) s!25)) lt!5878)))

(assert (=> bm!59 d!6609))

(declare-fun d!6611 () Bool)

(assert (=> d!6611 (= (array_inv!315 fq!120) (bvsge (size!366 fq!120) #b00000000000000000000000000000000))))

(assert (=> start!2367 d!6611))

(declare-fun d!6613 () Bool)

(assert (=> d!6613 (= (fqInv!0 fq!120) (and (= (size!366 fq!120) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000000)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000001)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000010)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000011)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000100)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000101)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000110)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000000111)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001000)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001000) (fp #b0 #b01101000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001001)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001001) (fp #b0 #b01100101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001010)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001010) (fp #b0 #b01100010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001011)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001011) (fp #b0 #b01011111001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001100)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001100) (fp #b0 #b01011100001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001101)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001101) (fp #b0 #b01011001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001110)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001110) (fp #b0 #b01010110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000001111)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000001111) (fp #b0 #b01010011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000010000)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000010000) (fp #b0 #b01010000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000010001)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000010001) (fp #b0 #b01001101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000010010)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000010010) (fp #b0 #b01001010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!366 fq!120) #b00000000000000000000000000010011)) (fp.leq (select (arr!366 fq!120) #b00000000000000000000000000010011) (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000))))))

(declare-fun bs!2756 () Bool)

(assert (= bs!2756 d!6613))

(declare-fun m!19977 () Bool)

(assert (=> bs!2756 m!19977))

(declare-fun m!19979 () Bool)

(assert (=> bs!2756 m!19979))

(declare-fun m!19981 () Bool)

(assert (=> bs!2756 m!19981))

(declare-fun m!19983 () Bool)

(assert (=> bs!2756 m!19983))

(declare-fun m!19985 () Bool)

(assert (=> bs!2756 m!19985))

(declare-fun m!19987 () Bool)

(assert (=> bs!2756 m!19987))

(declare-fun m!19989 () Bool)

(assert (=> bs!2756 m!19989))

(declare-fun m!19991 () Bool)

(assert (=> bs!2756 m!19991))

(declare-fun m!19993 () Bool)

(assert (=> bs!2756 m!19993))

(declare-fun m!19995 () Bool)

(assert (=> bs!2756 m!19995))

(declare-fun m!19997 () Bool)

(assert (=> bs!2756 m!19997))

(declare-fun m!19999 () Bool)

(assert (=> bs!2756 m!19999))

(declare-fun m!20001 () Bool)

(assert (=> bs!2756 m!20001))

(declare-fun m!20003 () Bool)

(assert (=> bs!2756 m!20003))

(declare-fun m!20005 () Bool)

(assert (=> bs!2756 m!20005))

(declare-fun m!20007 () Bool)

(assert (=> bs!2756 m!20007))

(declare-fun m!20009 () Bool)

(assert (=> bs!2756 m!20009))

(declare-fun m!20011 () Bool)

(assert (=> bs!2756 m!20011))

(declare-fun m!20013 () Bool)

(assert (=> bs!2756 m!20013))

(declare-fun m!20015 () Bool)

(assert (=> bs!2756 m!20015))

(assert (=> b!12038 d!6613))

(declare-fun d!6615 () Bool)

(declare-fun lt!5880 () tuple2!132)

(assert (=> d!6615 (fp.eq (fp.add roundNearestTiesToEven (_1!276 lt!5880) (_2!276 lt!5880)) (_1!276 lt!5880))))

(declare-fun lt!5881 () (_ FloatingPoint 11 53))

(assert (=> d!6615 (= lt!5880 (tuple2!133 lt!5881 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (_1!276 lt!5871) lt!5881) (fp.add roundNearestTiesToEven c!23 (_2!276 lt!5871)))))))

(assert (=> d!6615 (= lt!5881 (fp.add roundNearestTiesToEven (_1!276 lt!5871) (fp.add roundNearestTiesToEven c!23 (_2!276 lt!5871))))))

(assert (=> d!6615 (= (fast2Sum!0 (_1!276 lt!5871) (fp.add roundNearestTiesToEven c!23 (_2!276 lt!5871))) lt!5880)))

(assert (=> b!12037 d!6615))

(push 1)

(check-sat)

(pop 1)

