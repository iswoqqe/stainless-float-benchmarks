; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2279 () Bool)

(assert start!2279)

(declare-fun b!11634 () Bool)

(declare-fun e!6356 () Bool)

(declare-datatypes ((tuple2!102 0))(
  ( (tuple2!103 (_1!256 (_ FloatingPoint 11 53)) (_2!256 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5666 () tuple2!102)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!11634 (= e!6356 (and (fp.geq (_1!256 lt!5666) (fp.add roundNearestTiesToEven c!23 (_2!256 lt!5666))) (let ((fp!68 (fp.add roundNearestTiesToEven (_1!256 lt!5666) (fp.add roundNearestTiesToEven c!23 (_2!256 lt!5666))))) (or (fp.isInfinite fp!68) (fp.isNaN fp!68)))))))

(declare-fun e!6357 () tuple2!102)

(assert (=> b!11634 (= lt!5666 e!6357)))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun c!1335 () Bool)

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-datatypes ((array!789 0))(
  ( (array!790 (arr!342 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!342 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!789)

(assert (=> b!11634 (= c!1335 (fp.geq s!25 (select (arr!342 fq!120) i!347)))))

(declare-fun b!11635 () Bool)

(declare-fun call!11 () tuple2!102)

(assert (=> b!11635 (= e!6357 call!11)))

(declare-fun b!11636 () Bool)

(assert (=> b!11636 (= e!6357 call!11)))

(declare-fun res!9387 () Bool)

(assert (=> start!2279 (=> (not res!9387) (not e!6356))))

(assert (=> start!2279 (= res!9387 (= (size!342 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2279 e!6356))

(assert (=> start!2279 true))

(declare-fun array_inv!291 (array!789) Bool)

(assert (=> start!2279 (array_inv!291 fq!120)))

(declare-fun b!11637 () Bool)

(declare-fun res!9386 () Bool)

(assert (=> b!11637 (=> (not res!9386) (not e!6356))))

(declare-fun fqInv!0 (array!789) Bool)

(assert (=> b!11637 (= res!9386 (fqInv!0 fq!120))))

(declare-fun bm!8 () Bool)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!102)

(assert (=> bm!8 (= call!11 (fast2Sum!0 (ite c!1335 s!25 (select (arr!342 fq!120) i!347)) (ite c!1335 (select (arr!342 fq!120) i!347) s!25)))))

(declare-fun b!11638 () Bool)

(declare-fun res!9385 () Bool)

(assert (=> b!11638 (=> (not res!9385) (not e!6356))))

(declare-fun jz!77 () (_ BitVec 32))

(assert (=> b!11638 (= res!9385 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(assert (= (and start!2279 res!9387) b!11637))

(assert (= (and b!11637 res!9386) b!11638))

(assert (= (and b!11638 res!9385) b!11634))

(assert (= (and b!11634 c!1335) b!11636))

(assert (= (and b!11634 (not c!1335)) b!11635))

(assert (= (or b!11636 b!11635) bm!8))

(declare-fun m!19459 () Bool)

(assert (=> bm!8 m!19459))

(declare-fun m!19461 () Bool)

(assert (=> bm!8 m!19461))

(declare-fun m!19463 () Bool)

(assert (=> b!11637 m!19463))

(assert (=> b!11634 m!19459))

(declare-fun m!19465 () Bool)

(assert (=> start!2279 m!19465))

(declare-fun m!19467 () Bool)

(assert (=> b!11638 m!19467))

(push 1)

(assert (not start!2279))

(assert (not b!11637))

(assert (not bm!8))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!6539 () Bool)

(assert (=> d!6539 (= (array_inv!291 fq!120) (bvsge (size!342 fq!120) #b00000000000000000000000000000000))))

(assert (=> start!2279 d!6539))

(declare-fun d!6541 () Bool)

(assert (=> d!6541 (= (fqInv!0 fq!120) (and (= (size!342 fq!120) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000000)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000001)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000010)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000011)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000100)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000101)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000110)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000000111)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001000)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001000) (fp #b0 #b01101000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001001)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001001) (fp #b0 #b01100101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001010)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001010) (fp #b0 #b01100010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001011)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001011) (fp #b0 #b01011111001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001100)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001100) (fp #b0 #b01011100001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001101)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001101) (fp #b0 #b01011001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001110)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001110) (fp #b0 #b01010110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000001111)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000001111) (fp #b0 #b01010011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000010000)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000010000) (fp #b0 #b01010000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000010001)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000010001) (fp #b0 #b01001101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000010010)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000010010) (fp #b0 #b01001010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!342 fq!120) #b00000000000000000000000000010011)) (fp.leq (select (arr!342 fq!120) #b00000000000000000000000000010011) (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000))))))

(declare-fun bs!2726 () Bool)

(assert (= bs!2726 d!6541))

(declare-fun m!19469 () Bool)

(assert (=> bs!2726 m!19469))

(declare-fun m!19471 () Bool)

(assert (=> bs!2726 m!19471))

(declare-fun m!19473 () Bool)

(assert (=> bs!2726 m!19473))

(declare-fun m!19475 () Bool)

(assert (=> bs!2726 m!19475))

(declare-fun m!19477 () Bool)

(assert (=> bs!2726 m!19477))

(declare-fun m!19479 () Bool)

(assert (=> bs!2726 m!19479))

(declare-fun m!19481 () Bool)

(assert (=> bs!2726 m!19481))

(declare-fun m!19483 () Bool)

(assert (=> bs!2726 m!19483))

(declare-fun m!19485 () Bool)

(assert (=> bs!2726 m!19485))

(declare-fun m!19487 () Bool)

(assert (=> bs!2726 m!19487))

(declare-fun m!19489 () Bool)

(assert (=> bs!2726 m!19489))

(declare-fun m!19491 () Bool)

(assert (=> bs!2726 m!19491))

(declare-fun m!19493 () Bool)

(assert (=> bs!2726 m!19493))

(declare-fun m!19495 () Bool)

(assert (=> bs!2726 m!19495))

(declare-fun m!19497 () Bool)

(assert (=> bs!2726 m!19497))

(declare-fun m!19499 () Bool)

(assert (=> bs!2726 m!19499))

(declare-fun m!19501 () Bool)

(assert (=> bs!2726 m!19501))

(declare-fun m!19503 () Bool)

(assert (=> bs!2726 m!19503))

(declare-fun m!19505 () Bool)

(assert (=> bs!2726 m!19505))

(declare-fun m!19507 () Bool)

(assert (=> bs!2726 m!19507))

(assert (=> b!11637 d!6541))

(declare-fun d!6543 () Bool)

(declare-fun lt!5671 () tuple2!102)

(assert (=> d!6543 (fp.eq (fp.add roundNearestTiesToEven (_1!256 lt!5671) (_2!256 lt!5671)) (_1!256 lt!5671))))

(declare-fun lt!5672 () (_ FloatingPoint 11 53))

(assert (=> d!6543 (= lt!5671 (tuple2!103 lt!5672 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (ite c!1335 s!25 (select (arr!342 fq!120) i!347)) lt!5672) (ite c!1335 (select (arr!342 fq!120) i!347) s!25))))))

(assert (=> d!6543 (= lt!5672 (fp.add roundNearestTiesToEven (ite c!1335 s!25 (select (arr!342 fq!120) i!347)) (ite c!1335 (select (arr!342 fq!120) i!347) s!25)))))

(assert (=> d!6543 (= (fast2Sum!0 (ite c!1335 s!25 (select (arr!342 fq!120) i!347)) (ite c!1335 (select (arr!342 fq!120) i!347) s!25)) lt!5671)))

(assert (=> bm!8 d!6543))

(push 1)

(check-sat)

(pop 1)

