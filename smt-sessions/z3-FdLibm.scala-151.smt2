; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!1099 () Bool)

(assert start!1099)

(declare-fun res!3764 () Bool)

(declare-fun e!2586 () Bool)

(assert (=> start!1099 (=> (not res!3764) (not e!2586))))

(declare-fun jz!67 () (_ BitVec 32))

(declare-datatypes ((array!388 0))(
  ( (array!389 (arr!169 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!169 (_ BitVec 32))) )
))
(declare-fun qq!69 () array!388)

(assert (=> start!1099 (= res!3764 (and (bvsle #b00000000000000000000000000000000 jz!67) (bvslt jz!67 #b00000000000000000000000000010100) (= (size!169 qq!69) #b00000000000000000000000000010100)))))

(assert (=> start!1099 e!2586))

(assert (=> start!1099 true))

(declare-fun array_inv!119 (array!388) Bool)

(assert (=> start!1099 (array_inv!119 qq!69)))

(declare-fun b!4861 () Bool)

(declare-fun res!3765 () Bool)

(assert (=> b!4861 (=> (not res!3765) (not e!2586))))

(declare-fun qqInv!0 (array!388) Bool)

(assert (=> b!4861 (= res!3765 (qqInv!0 qq!69))))

(declare-fun b!4862 () Bool)

(assert (=> b!4862 (= e!2586 (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!169 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000000)) (fp.leq (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!169 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!169 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!169 qq!69) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!169 qq!69) #b00000000000000000000000000000000)))) #b00000000000000000000000000000001)) (fp.leq (select (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!169 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!169 qq!69) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!169 qq!69) #b00000000000000000000000000000000)))) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (bvsge #b00000000000000000000000000000010 (size!169 qq!69))))))

(assert (= (and start!1099 res!3764) b!4861))

(assert (= (and b!4861 res!3765) b!4862))

(declare-fun m!6291 () Bool)

(assert (=> start!1099 m!6291))

(declare-fun m!6293 () Bool)

(assert (=> b!4861 m!6293))

(declare-fun m!6295 () Bool)

(assert (=> b!4862 m!6295))

(declare-fun m!6297 () Bool)

(assert (=> b!4862 m!6297))

(declare-fun m!6299 () Bool)

(assert (=> b!4862 m!6299))

(declare-fun m!6301 () Bool)

(assert (=> b!4862 m!6301))

(declare-fun m!6303 () Bool)

(assert (=> b!4862 m!6303))

(declare-fun m!6305 () Bool)

(assert (=> b!4862 m!6305))

(check-sat (not start!1099) (not b!4861))
(check-sat)
