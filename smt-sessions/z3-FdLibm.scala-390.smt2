; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!2153 () Bool)

(assert start!2153)

(declare-fun b!10839 () Bool)

(declare-fun res!8683 () Bool)

(declare-fun e!6152 () Bool)

(assert (=> b!10839 (=> (not res!8683) (not e!6152))))

(declare-datatypes ((array!792 0))(
  ( (array!793 (arr!347 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!347 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!792)

(declare-fun fqInv!0 (array!792) Bool)

(assert (=> b!10839 (= res!8683 (fqInv!0 fq!120))))

(declare-fun b!10840 () Bool)

(declare-fun res!8685 () Bool)

(assert (=> b!10840 (=> (not res!8685) (not e!6152))))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-fun c!23 () (_ FloatingPoint 11 53))

(declare-fun jz!77 () (_ BitVec 32))

(assert (=> b!10840 (= res!8685 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!10841 () Bool)

(declare-datatypes ((tuple2!100 0))(
  ( (tuple2!101 (_1!255 (_ FloatingPoint 11 53)) (_2!255 (_ FloatingPoint 11 53))) )
))
(declare-fun e!6153 () tuple2!100)

(declare-fun call!23 () tuple2!100)

(assert (=> b!10841 (= e!6153 call!23)))

(declare-fun res!8684 () Bool)

(assert (=> start!2153 (=> (not res!8684) (not e!6152))))

(assert (=> start!2153 (= res!8684 (= (size!347 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2153 e!6152))

(assert (=> start!2153 true))

(declare-fun array_inv!296 (array!792) Bool)

(assert (=> start!2153 (array_inv!296 fq!120)))

(declare-fun c!1287 () Bool)

(declare-fun bm!20 () Bool)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!100)

(assert (=> bm!20 (= call!23 (fast2Sum!0 (ite c!1287 s!25 (select (arr!347 fq!120) i!347)) (ite c!1287 (select (arr!347 fq!120) i!347) s!25)))))

(declare-fun b!10842 () Bool)

(assert (=> b!10842 (= e!6153 call!23)))

(declare-fun b!10843 () Bool)

(declare-fun lt!5492 () tuple2!100)

(assert (=> b!10843 (= e!6152 (not (fp.geq (_1!255 lt!5492) (fp.add roundNearestTiesToEven c!23 (_2!255 lt!5492)))))))

(assert (=> b!10843 (= lt!5492 e!6153)))

(assert (=> b!10843 (= c!1287 (fp.geq s!25 (select (arr!347 fq!120) i!347)))))

(assert (= (and start!2153 res!8684) b!10839))

(assert (= (and b!10839 res!8683) b!10840))

(assert (= (and b!10840 res!8685) b!10843))

(assert (= (and b!10843 c!1287) b!10842))

(assert (= (and b!10843 (not c!1287)) b!10841))

(assert (= (or b!10842 b!10841) bm!20))

(declare-fun m!16787 () Bool)

(assert (=> b!10839 m!16787))

(declare-fun m!16789 () Bool)

(assert (=> b!10843 m!16789))

(declare-fun m!16791 () Bool)

(assert (=> b!10840 m!16791))

(declare-fun m!16793 () Bool)

(assert (=> start!2153 m!16793))

(assert (=> bm!20 m!16789))

(declare-fun m!16795 () Bool)

(assert (=> bm!20 m!16795))

(check-sat (not b!10839) (not bm!20) (not start!2153))
(check-sat)
(get-model)

(declare-fun d!4917 () Bool)

(assert (=> d!4917 (= (fqInv!0 fq!120) (and (= (size!347 fq!120) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000000)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000001)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000010)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000011)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000100)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000101)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000110)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000111)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001000)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001000) (fp #b0 #b01101000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001001)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001001) (fp #b0 #b01100101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001010)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001010) (fp #b0 #b01100010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001011)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001011) (fp #b0 #b01011111001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001100)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001100) (fp #b0 #b01011100001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001101)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001101) (fp #b0 #b01011001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001110)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001110) (fp #b0 #b01010110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001111)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001111) (fp #b0 #b01010011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000010000)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000010000) (fp #b0 #b01010000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000010001)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000010001) (fp #b0 #b01001101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000010010)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000010010) (fp #b0 #b01001010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000010011)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000010011) (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000))))))

(declare-fun bs!2192 () Bool)

(assert (= bs!2192 d!4917))

(declare-fun m!16797 () Bool)

(assert (=> bs!2192 m!16797))

(declare-fun m!16799 () Bool)

(assert (=> bs!2192 m!16799))

(declare-fun m!16801 () Bool)

(assert (=> bs!2192 m!16801))

(declare-fun m!16803 () Bool)

(assert (=> bs!2192 m!16803))

(declare-fun m!16805 () Bool)

(assert (=> bs!2192 m!16805))

(declare-fun m!16807 () Bool)

(assert (=> bs!2192 m!16807))

(declare-fun m!16809 () Bool)

(assert (=> bs!2192 m!16809))

(declare-fun m!16811 () Bool)

(assert (=> bs!2192 m!16811))

(declare-fun m!16813 () Bool)

(assert (=> bs!2192 m!16813))

(declare-fun m!16815 () Bool)

(assert (=> bs!2192 m!16815))

(declare-fun m!16817 () Bool)

(assert (=> bs!2192 m!16817))

(declare-fun m!16819 () Bool)

(assert (=> bs!2192 m!16819))

(declare-fun m!16821 () Bool)

(assert (=> bs!2192 m!16821))

(declare-fun m!16823 () Bool)

(assert (=> bs!2192 m!16823))

(declare-fun m!16825 () Bool)

(assert (=> bs!2192 m!16825))

(declare-fun m!16827 () Bool)

(assert (=> bs!2192 m!16827))

(declare-fun m!16829 () Bool)

(assert (=> bs!2192 m!16829))

(declare-fun m!16831 () Bool)

(assert (=> bs!2192 m!16831))

(declare-fun m!16833 () Bool)

(assert (=> bs!2192 m!16833))

(declare-fun m!16835 () Bool)

(assert (=> bs!2192 m!16835))

(assert (=> b!10839 d!4917))

(declare-fun d!4919 () Bool)

(declare-fun lt!5497 () tuple2!100)

(assert (=> d!4919 (fp.eq (fp.add roundNearestTiesToEven (_1!255 lt!5497) (_2!255 lt!5497)) (_1!255 lt!5497))))

(declare-fun lt!5498 () (_ FloatingPoint 11 53))

(assert (=> d!4919 (= lt!5497 (tuple2!101 lt!5498 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (ite c!1287 s!25 (select (arr!347 fq!120) i!347)) lt!5498) (ite c!1287 (select (arr!347 fq!120) i!347) s!25))))))

(assert (=> d!4919 (= lt!5498 (fp.add roundNearestTiesToEven (ite c!1287 s!25 (select (arr!347 fq!120) i!347)) (ite c!1287 (select (arr!347 fq!120) i!347) s!25)))))

(assert (=> d!4919 (= (fast2Sum!0 (ite c!1287 s!25 (select (arr!347 fq!120) i!347)) (ite c!1287 (select (arr!347 fq!120) i!347) s!25)) lt!5497)))

(assert (=> bm!20 d!4919))

(declare-fun d!4921 () Bool)

(assert (=> d!4921 (= (array_inv!296 fq!120) (bvsge (size!347 fq!120) #b00000000000000000000000000000000))))

(assert (=> start!2153 d!4921))

(check-sat)
