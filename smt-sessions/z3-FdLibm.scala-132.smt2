; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!1063 () Bool)

(assert start!1063)

(declare-fun res!3988 () Bool)

(declare-fun e!2543 () Bool)

(assert (=> start!1063 (=> (not res!3988) (not e!2543))))

(declare-fun jz!67 () (_ BitVec 32))

(declare-datatypes ((array!348 0))(
  ( (array!349 (arr!150 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!150 (_ BitVec 32))) )
))
(declare-fun qq!69 () array!348)

(assert (=> start!1063 (= res!3988 (and (bvsle #b00000000000000000000000000000000 jz!67) (bvslt jz!67 #b00000000000000000000000000010100) (= (size!150 qq!69) #b00000000000000000000000000010100)))))

(assert (=> start!1063 e!2543))

(assert (=> start!1063 true))

(declare-fun array_inv!100 (array!348) Bool)

(assert (=> start!1063 (array_inv!100 qq!69)))

(declare-fun b!5115 () Bool)

(declare-fun res!3989 () Bool)

(assert (=> b!5115 (=> (not res!3989) (not e!2543))))

(declare-fun qqInv!0 (array!348) Bool)

(assert (=> b!5115 (= res!3989 (qqInv!0 qq!69))))

(declare-fun b!5116 () Bool)

(assert (=> b!5116 (= e!2543 (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000000)) (fp.leq (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (or (not (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000000)))) #b00000000000000000000000000000001))) (not (fp.leq (select (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000000)))) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000))))))))

(assert (= (and start!1063 res!3988) b!5115))

(assert (= (and b!5115 res!3989) b!5116))

(declare-fun m!7655 () Bool)

(assert (=> start!1063 m!7655))

(declare-fun m!7657 () Bool)

(assert (=> b!5115 m!7657))

(declare-fun m!7659 () Bool)

(assert (=> b!5116 m!7659))

(declare-fun m!7661 () Bool)

(assert (=> b!5116 m!7661))

(declare-fun m!7663 () Bool)

(assert (=> b!5116 m!7663))

(declare-fun m!7665 () Bool)

(assert (=> b!5116 m!7665))

(declare-fun m!7667 () Bool)

(assert (=> b!5116 m!7667))

(declare-fun m!7669 () Bool)

(assert (=> b!5116 m!7669))

(check-sat (not start!1063) (not b!5115))
(check-sat)
(get-model)

(declare-fun d!2865 () Bool)

(assert (=> d!2865 (= (array_inv!100 qq!69) (bvsge (size!150 qq!69) #b00000000000000000000000000000000))))

(assert (=> start!1063 d!2865))

(declare-fun d!2867 () Bool)

(assert (=> d!2867 (= (qqInv!0 qq!69) (and (= (size!150 qq!69) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000000)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000000000) (fp #b0 #b01111111101 #b1111111111111111111111000000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000001)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000000001) (fp #b0 #b01111100110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000010)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000000010) (fp #b0 #b01111001110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000011)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000000011) (fp #b0 #b01110110110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000100)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000000100) (fp #b0 #b01110011110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000101)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000000101) (fp #b0 #b01110000110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000110)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000000110) (fp #b0 #b01101101110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000000111)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000000111) (fp #b0 #b01101010110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000001000)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000001000) (fp #b0 #b01100111110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000001001)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000001001) (fp #b0 #b01100100110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000001010)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000001010) (fp #b0 #b01100001110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000001011)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000001011) (fp #b0 #b01011110110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000001100)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000001100) (fp #b0 #b01011011110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000001101)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000001101) (fp #b0 #b01011000110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000001110)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000001110) (fp #b0 #b01010101110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000001111)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000001111) (fp #b0 #b01010010110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000010000)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000010000) (fp #b0 #b01001111110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000010001)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000010001) (fp #b0 #b01001100110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000010010)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000010010) (fp #b0 #b01001001110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!150 qq!69) #b00000000000000000000000000010011)) (fp.leq (select (arr!150 qq!69) #b00000000000000000000000000010011) (fp #b0 #b01000110110 #b1111111111111111111111100000000000000000000000000000))))))

(declare-fun bs!1276 () Bool)

(assert (= bs!1276 d!2867))

(declare-fun m!7671 () Bool)

(assert (=> bs!1276 m!7671))

(declare-fun m!7673 () Bool)

(assert (=> bs!1276 m!7673))

(declare-fun m!7675 () Bool)

(assert (=> bs!1276 m!7675))

(declare-fun m!7677 () Bool)

(assert (=> bs!1276 m!7677))

(declare-fun m!7679 () Bool)

(assert (=> bs!1276 m!7679))

(declare-fun m!7681 () Bool)

(assert (=> bs!1276 m!7681))

(assert (=> bs!1276 m!7665))

(assert (=> bs!1276 m!7659))

(declare-fun m!7683 () Bool)

(assert (=> bs!1276 m!7683))

(declare-fun m!7685 () Bool)

(assert (=> bs!1276 m!7685))

(declare-fun m!7687 () Bool)

(assert (=> bs!1276 m!7687))

(declare-fun m!7689 () Bool)

(assert (=> bs!1276 m!7689))

(declare-fun m!7691 () Bool)

(assert (=> bs!1276 m!7691))

(declare-fun m!7693 () Bool)

(assert (=> bs!1276 m!7693))

(declare-fun m!7695 () Bool)

(assert (=> bs!1276 m!7695))

(declare-fun m!7697 () Bool)

(assert (=> bs!1276 m!7697))

(declare-fun m!7699 () Bool)

(assert (=> bs!1276 m!7699))

(declare-fun m!7701 () Bool)

(assert (=> bs!1276 m!7701))

(declare-fun m!7703 () Bool)

(assert (=> bs!1276 m!7703))

(declare-fun m!7705 () Bool)

(assert (=> bs!1276 m!7705))

(assert (=> b!5115 d!2867))

(check-sat)
