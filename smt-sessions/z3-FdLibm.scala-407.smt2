; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!2209 () Bool)

(assert start!2209)

(declare-fun res!8895 () Bool)

(declare-fun e!6348 () Bool)

(assert (=> start!2209 (=> (not res!8895) (not e!6348))))

(declare-datatypes ((array!829 0))(
  ( (array!830 (arr!364 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!364 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!829)

(assert (=> start!2209 (= res!8895 (= (size!364 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2209 e!6348))

(assert (=> start!2209 true))

(declare-fun array_inv!313 (array!829) Bool)

(assert (=> start!2209 (array_inv!313 fq!120)))

(declare-fun b!11129 () Bool)

(declare-fun e!6345 () Bool)

(assert (=> b!11129 (= e!6348 e!6345)))

(declare-fun res!8892 () Bool)

(assert (=> b!11129 (=> (not res!8892) (not e!6345))))

(declare-datatypes ((tuple2!118 0))(
  ( (tuple2!119 (_1!269 (_ FloatingPoint 11 53)) (_2!269 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5637 () tuple2!118)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!11129 (= res!8892 (fp.geq (_1!269 lt!5637) (fp.add roundNearestTiesToEven c!23 (_2!269 lt!5637))))))

(declare-fun e!6346 () tuple2!118)

(assert (=> b!11129 (= lt!5637 e!6346)))

(declare-fun c!1330 () Bool)

(declare-fun i!347 () (_ BitVec 32))

(declare-fun s!25 () (_ FloatingPoint 11 53))

(assert (=> b!11129 (= c!1330 (fp.geq s!25 (select (arr!364 fq!120) i!347)))))

(declare-fun b!11130 () Bool)

(declare-fun res!8894 () Bool)

(assert (=> b!11130 (=> (not res!8894) (not e!6348))))

(declare-fun jz!77 () (_ BitVec 32))

(assert (=> b!11130 (= res!8894 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!11131 () Bool)

(declare-fun call!56 () tuple2!118)

(assert (=> b!11131 (= e!6346 call!56)))

(declare-fun bm!53 () Bool)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!118)

(assert (=> bm!53 (= call!56 (fast2Sum!0 (ite c!1330 s!25 (select (arr!364 fq!120) i!347)) (ite c!1330 (select (arr!364 fq!120) i!347) s!25)))))

(declare-fun b!11132 () Bool)

(declare-fun lt!5635 () tuple2!118)

(declare-fun lt!5636 () (_ BitVec 32))

(assert (=> b!11132 (= e!6345 (and (bvslt lt!5636 #b00000000000000000000000000000000) (bvsle #b11111111111111111111111111111111 lt!5636) (bvsle lt!5636 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (_1!269 lt!5635)) (= (bvand lt!5636 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (not (= (bvand lt!5636 #b10000000000000000000000000000000) (bvand (bvadd lt!5636 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))))

(assert (=> b!11132 (= lt!5636 (bvsub i!347 #b00000000000000000000000000000001))))

(assert (=> b!11132 (= lt!5635 (fast2Sum!0 (_1!269 lt!5637) (fp.add roundNearestTiesToEven c!23 (_2!269 lt!5637))))))

(declare-fun b!11133 () Bool)

(assert (=> b!11133 (= e!6346 call!56)))

(declare-fun b!11134 () Bool)

(declare-fun res!8893 () Bool)

(assert (=> b!11134 (=> (not res!8893) (not e!6348))))

(declare-fun fqInv!0 (array!829) Bool)

(assert (=> b!11134 (= res!8893 (fqInv!0 fq!120))))

(assert (= (and start!2209 res!8895) b!11134))

(assert (= (and b!11134 res!8893) b!11130))

(assert (= (and b!11130 res!8894) b!11129))

(assert (= (and b!11129 c!1330) b!11131))

(assert (= (and b!11129 (not c!1330)) b!11133))

(assert (= (or b!11131 b!11133) bm!53))

(assert (= (and b!11129 res!8892) b!11132))

(declare-fun m!17095 () Bool)

(assert (=> b!11130 m!17095))

(declare-fun m!17097 () Bool)

(assert (=> b!11129 m!17097))

(declare-fun m!17099 () Bool)

(assert (=> start!2209 m!17099))

(declare-fun m!17101 () Bool)

(assert (=> b!11132 m!17101))

(declare-fun m!17103 () Bool)

(assert (=> b!11134 m!17103))

(assert (=> bm!53 m!17097))

(declare-fun m!17105 () Bool)

(assert (=> bm!53 m!17105))

(check-sat (not bm!53) (not b!11132) (not start!2209) (not b!11134))
(check-sat)
