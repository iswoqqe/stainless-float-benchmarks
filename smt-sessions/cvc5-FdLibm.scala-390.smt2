; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2307 () Bool)

(assert start!2307)

(declare-fun b!11709 () Bool)

(declare-fun res!9434 () Bool)

(declare-fun e!6404 () Bool)

(assert (=> b!11709 (=> (not res!9434) (not e!6404))))

(declare-datatypes ((array!802 0))(
  ( (array!803 (arr!347 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!347 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!802)

(declare-fun fqInv!0 (array!802) Bool)

(assert (=> b!11709 (= res!9434 (fqInv!0 fq!120))))

(declare-fun b!11710 () Bool)

(declare-datatypes ((tuple2!110 0))(
  ( (tuple2!111 (_1!260 (_ FloatingPoint 11 53)) (_2!260 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5710 () tuple2!110)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!11710 (= e!6404 (not (fp.geq (_1!260 lt!5710) (fp.add roundNearestTiesToEven c!23 (_2!260 lt!5710)))))))

(declare-fun e!6405 () tuple2!110)

(assert (=> b!11710 (= lt!5710 e!6405)))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun c!1347 () Bool)

(declare-fun s!25 () (_ FloatingPoint 11 53))

(assert (=> b!11710 (= c!1347 (fp.geq s!25 (select (arr!347 fq!120) i!347)))))

(declare-fun b!11711 () Bool)

(declare-fun call!23 () tuple2!110)

(assert (=> b!11711 (= e!6405 call!23)))

(declare-fun bm!20 () Bool)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!110)

(assert (=> bm!20 (= call!23 (fast2Sum!0 (ite c!1347 s!25 (select (arr!347 fq!120) i!347)) (ite c!1347 (select (arr!347 fq!120) i!347) s!25)))))

(declare-fun b!11712 () Bool)

(assert (=> b!11712 (= e!6405 call!23)))

(declare-fun b!11713 () Bool)

(declare-fun res!9435 () Bool)

(assert (=> b!11713 (=> (not res!9435) (not e!6404))))

(declare-fun jz!77 () (_ BitVec 32))

(assert (=> b!11713 (= res!9435 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun res!9433 () Bool)

(assert (=> start!2307 (=> (not res!9433) (not e!6404))))

(assert (=> start!2307 (= res!9433 (= (size!347 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2307 e!6404))

(assert (=> start!2307 true))

(declare-fun array_inv!296 (array!802) Bool)

(assert (=> start!2307 (array_inv!296 fq!120)))

(assert (= (and start!2307 res!9433) b!11709))

(assert (= (and b!11709 res!9434) b!11713))

(assert (= (and b!11713 res!9435) b!11710))

(assert (= (and b!11710 c!1347) b!11711))

(assert (= (and b!11710 (not c!1347)) b!11712))

(assert (= (or b!11711 b!11712) bm!20))

(declare-fun m!19631 () Bool)

(assert (=> b!11713 m!19631))

(declare-fun m!19633 () Bool)

(assert (=> bm!20 m!19633))

(declare-fun m!19635 () Bool)

(assert (=> bm!20 m!19635))

(declare-fun m!19637 () Bool)

(assert (=> start!2307 m!19637))

(assert (=> b!11710 m!19633))

(declare-fun m!19639 () Bool)

(assert (=> b!11709 m!19639))

(push 1)

(assert (not bm!20))

(assert (not start!2307))

(assert (not b!11709))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!6564 () Bool)

(declare-fun lt!5715 () tuple2!110)

(assert (=> d!6564 (fp.eq (fp.add roundNearestTiesToEven (_1!260 lt!5715) (_2!260 lt!5715)) (_1!260 lt!5715))))

(declare-fun lt!5716 () (_ FloatingPoint 11 53))

(assert (=> d!6564 (= lt!5715 (tuple2!111 lt!5716 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (ite c!1347 s!25 (select (arr!347 fq!120) i!347)) lt!5716) (ite c!1347 (select (arr!347 fq!120) i!347) s!25))))))

(assert (=> d!6564 (= lt!5716 (fp.add roundNearestTiesToEven (ite c!1347 s!25 (select (arr!347 fq!120) i!347)) (ite c!1347 (select (arr!347 fq!120) i!347) s!25)))))

(assert (=> d!6564 (= (fast2Sum!0 (ite c!1347 s!25 (select (arr!347 fq!120) i!347)) (ite c!1347 (select (arr!347 fq!120) i!347) s!25)) lt!5715)))

(assert (=> bm!20 d!6564))

(declare-fun d!6566 () Bool)

(assert (=> d!6566 (= (array_inv!296 fq!120) (bvsge (size!347 fq!120) #b00000000000000000000000000000000))))

(assert (=> start!2307 d!6566))

(declare-fun d!6568 () Bool)

(assert (=> d!6568 (= (fqInv!0 fq!120) (and (= (size!347 fq!120) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000000)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000001)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000010)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000011)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000100)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000101)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000110)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000000111)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001000)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001000) (fp #b0 #b01101000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001001)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001001) (fp #b0 #b01100101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001010)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001010) (fp #b0 #b01100010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001011)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001011) (fp #b0 #b01011111001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001100)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001100) (fp #b0 #b01011100001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001101)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001101) (fp #b0 #b01011001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001110)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001110) (fp #b0 #b01010110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000001111)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000001111) (fp #b0 #b01010011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000010000)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000010000) (fp #b0 #b01010000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000010001)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000010001) (fp #b0 #b01001101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000010010)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000010010) (fp #b0 #b01001010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!347 fq!120) #b00000000000000000000000000010011)) (fp.leq (select (arr!347 fq!120) #b00000000000000000000000000010011) (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000))))))

(declare-fun bs!2734 () Bool)

(assert (= bs!2734 d!6568))

(declare-fun m!19641 () Bool)

(assert (=> bs!2734 m!19641))

(declare-fun m!19643 () Bool)

(assert (=> bs!2734 m!19643))

(declare-fun m!19645 () Bool)

(assert (=> bs!2734 m!19645))

(declare-fun m!19647 () Bool)

(assert (=> bs!2734 m!19647))

(declare-fun m!19649 () Bool)

(assert (=> bs!2734 m!19649))

(declare-fun m!19651 () Bool)

(assert (=> bs!2734 m!19651))

(declare-fun m!19653 () Bool)

(assert (=> bs!2734 m!19653))

(declare-fun m!19655 () Bool)

(assert (=> bs!2734 m!19655))

(declare-fun m!19657 () Bool)

(assert (=> bs!2734 m!19657))

(declare-fun m!19659 () Bool)

(assert (=> bs!2734 m!19659))

(declare-fun m!19661 () Bool)

(assert (=> bs!2734 m!19661))

(declare-fun m!19663 () Bool)

(assert (=> bs!2734 m!19663))

(declare-fun m!19665 () Bool)

(assert (=> bs!2734 m!19665))

(declare-fun m!19667 () Bool)

(assert (=> bs!2734 m!19667))

(declare-fun m!19669 () Bool)

(assert (=> bs!2734 m!19669))

(declare-fun m!19671 () Bool)

(assert (=> bs!2734 m!19671))

(declare-fun m!19673 () Bool)

(assert (=> bs!2734 m!19673))

(declare-fun m!19675 () Bool)

(assert (=> bs!2734 m!19675))

(declare-fun m!19677 () Bool)

(assert (=> bs!2734 m!19677))

(declare-fun m!19679 () Bool)

(assert (=> bs!2734 m!19679))

(assert (=> b!11709 d!6568))

(push 1)

(check-sat)

(pop 1)

