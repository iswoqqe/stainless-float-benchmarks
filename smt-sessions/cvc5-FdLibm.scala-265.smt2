; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!1691 () Bool)

(assert start!1691)

(declare-fun b!8908 () Bool)

(declare-fun res!7339 () Bool)

(declare-fun e!4679 () Bool)

(assert (=> b!8908 (=> (not res!7339) (not e!4679))))

(declare-datatypes ((array!651 0))(
  ( (array!652 (arr!283 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!283 (_ BitVec 32))) )
))
(declare-fun xx!50 () array!651)

(declare-fun xxInv!0 (array!651) Bool)

(assert (=> b!8908 (= res!7339 (xxInv!0 xx!50))))

(declare-fun b!8909 () Bool)

(declare-datatypes ((Unit!627 0))(
  ( (Unit!628) )
))
(declare-datatypes ((tuple3!160 0))(
  ( (tuple3!161 (_1!213 Unit!627) (_2!213 (_ BitVec 32)) (_3!180 array!651)) )
))
(declare-fun e!4678 () tuple3!160)

(declare-fun lt!4319 () (_ BitVec 32))

(declare-fun lt!4318 () array!651)

(declare-fun Unit!629 () Unit!627)

(assert (=> b!8909 (= e!4678 (tuple3!161 Unit!629 lt!4319 lt!4318))))

(declare-fun b!8910 () Bool)

(declare-fun res!7343 () Bool)

(declare-fun e!4684 () Bool)

(assert (=> b!8910 (=> (not res!7343) (not e!4684))))

(declare-fun f!79 () array!651)

(declare-fun i!190 () (_ BitVec 32))

(declare-fun Q!0 ((_ FloatingPoint 11 53)) Bool)

(assert (=> b!8910 (= res!7343 (Q!0 (select (arr!283 f!79) (bvadd i!190 #b00000000000000000000000000000100))))))

(declare-fun e!19 () (_ BitVec 32))

(declare-fun b!8911 () Bool)

(declare-fun jz!36 () (_ BitVec 32))

(declare-fun timesTwoOverPiWhile!0 ((_ BitVec 32) (_ BitVec 32) array!651 (_ BitVec 32) array!651) tuple3!160)

(assert (=> b!8911 (= e!4678 (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4319 lt!4318))))

(declare-fun b!8912 () Bool)

(declare-fun res!7342 () Bool)

(assert (=> b!8912 (=> (not res!7342) (not e!4684))))

(declare-fun fInv!0 (array!651) Bool)

(assert (=> b!8912 (= res!7342 (fInv!0 f!79))))

(declare-fun b!8913 () Bool)

(declare-fun e!4680 () Bool)

(assert (=> b!8913 (= e!4679 e!4680)))

(declare-fun res!7341 () Bool)

(assert (=> b!8913 (=> (not res!7341) (not e!4680))))

(declare-fun lt!4320 () (_ BitVec 32))

(assert (=> b!8913 (= res!7341 (= (bvsub e!19 (bvmul #b00000000000000000000000000011000 (bvadd (ite (bvslt lt!4320 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!4320) #b00000000000000000000000000000001))) #b00000000000000000000000000000000))))

(assert (=> b!8913 (= lt!4320 (bvsdiv (bvsub e!19 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(declare-fun res!7344 () Bool)

(assert (=> start!1691 (=> (not res!7344) (not e!4679))))

(assert (=> start!1691 (= res!7344 (and (bvsle #b00000000000000000000000000000000 jz!36) (bvsle jz!36 #b00000000000000000000000000001111) (bvsle #b00000000000000000000000000011000 e!19) (bvsle e!19 #b00000000000000000000001111110000) (= (bvsrem e!19 #b00000000000000000000000000011000) #b00000000000000000000000000000000)))))

(assert (=> start!1691 e!4679))

(declare-fun array_inv!233 (array!651) Bool)

(assert (=> start!1691 (array_inv!233 f!79)))

(declare-fun q!51 () array!651)

(assert (=> start!1691 (array_inv!233 q!51)))

(assert (=> start!1691 true))

(assert (=> start!1691 (array_inv!233 xx!50)))

(declare-fun b!8914 () Bool)

(declare-fun res!7346 () Bool)

(assert (=> b!8914 (=> (not res!7346) (not e!4684))))

(assert (=> b!8914 (= res!7346 (bvsle i!190 jz!36))))

(declare-fun b!8915 () Bool)

(declare-fun res!7340 () Bool)

(assert (=> b!8915 (=> (not res!7340) (not e!4684))))

(declare-fun qInv!0 (array!651) Bool)

(assert (=> b!8915 (= res!7340 (qInv!0 q!51))))

(declare-fun b!8916 () Bool)

(assert (=> b!8916 (= e!4680 e!4684)))

(declare-fun res!7345 () Bool)

(assert (=> b!8916 (=> (not res!7345) (not e!4684))))

(assert (=> b!8916 (= res!7345 (and (bvsle #b00000000000000000000000000000000 i!190) (bvsle i!190 (bvadd jz!36 #b00000000000000000000000000000001))))))

(declare-fun lt!4322 () tuple3!160)

(assert (=> b!8916 (= lt!4322 e!4678)))

(declare-fun c!991 () Bool)

(assert (=> b!8916 (= c!991 (bvsle lt!4319 (bvadd (bvsub (size!283 xx!50) #b00000000000000000000000000000001) jz!36)))))

(assert (=> b!8916 (= lt!4319 #b00000000000000000000000000000000)))

(assert (=> b!8916 (= lt!4318 (array!652 ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000010100))))

(declare-fun b!8917 () Bool)

(declare-fun lt!4321 () (_ BitVec 32))

(assert (=> b!8917 (= e!4684 (or (bvslt lt!4321 #b00000000000000000000000000000000) (bvsge lt!4321 (size!283 f!79))))))

(assert (=> b!8917 (= lt!4321 (bvadd i!190 #b00000000000000000000000000000011))))

(assert (= (and start!1691 res!7344) b!8908))

(assert (= (and b!8908 res!7339) b!8913))

(assert (= (and b!8913 res!7341) b!8916))

(assert (= (and b!8916 c!991) b!8911))

(assert (= (and b!8916 (not c!991)) b!8909))

(assert (= (and b!8916 res!7345) b!8912))

(assert (= (and b!8912 res!7342) b!8915))

(assert (= (and b!8915 res!7340) b!8914))

(assert (= (and b!8914 res!7346) b!8910))

(assert (= (and b!8910 res!7343) b!8917))

(declare-fun m!16501 () Bool)

(assert (=> b!8915 m!16501))

(declare-fun m!16503 () Bool)

(assert (=> b!8910 m!16503))

(assert (=> b!8910 m!16503))

(declare-fun m!16505 () Bool)

(assert (=> b!8910 m!16505))

(declare-fun m!16507 () Bool)

(assert (=> b!8912 m!16507))

(declare-fun m!16509 () Bool)

(assert (=> b!8911 m!16509))

(declare-fun m!16511 () Bool)

(assert (=> start!1691 m!16511))

(declare-fun m!16513 () Bool)

(assert (=> start!1691 m!16513))

(declare-fun m!16515 () Bool)

(assert (=> start!1691 m!16515))

(declare-fun m!16517 () Bool)

(assert (=> b!8908 m!16517))

(push 1)

(assert (not b!8908))

(assert (not b!8911))

(assert (not b!8915))

(assert (not b!8910))

(assert (not start!1691))

(assert (not b!8912))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!5455 () Bool)

(assert (=> d!5455 (= (array_inv!233 f!79) (bvsge (size!283 f!79) #b00000000000000000000000000000000))))

(assert (=> start!1691 d!5455))

(declare-fun d!5457 () Bool)

(assert (=> d!5457 (= (array_inv!233 q!51) (bvsge (size!283 q!51) #b00000000000000000000000000000000))))

(assert (=> start!1691 d!5457))

(declare-fun d!5459 () Bool)

(assert (=> d!5459 (= (array_inv!233 xx!50) (bvsge (size!283 xx!50) #b00000000000000000000000000000000))))

(assert (=> start!1691 d!5459))

(declare-fun d!5461 () Bool)

(declare-fun res!7349 () Bool)

(declare-fun e!4687 () Bool)

(assert (=> d!5461 (=> (not res!7349) (not e!4687))))

(assert (=> d!5461 (= res!7349 (= (size!283 xx!50) #b00000000000000000000000000000101))))

(assert (=> d!5461 (= (xxInv!0 xx!50) e!4687)))

(declare-fun b!8920 () Bool)

(declare-fun lambda!458 () Int)

(declare-fun all5!0 (array!651 Int) Bool)

(assert (=> b!8920 (= e!4687 (all5!0 xx!50 lambda!458))))

(assert (= (and d!5461 res!7349) b!8920))

(declare-fun m!16519 () Bool)

(assert (=> b!8920 m!16519))

(assert (=> b!8908 d!5461))

(declare-fun bs!2380 () Bool)

(declare-fun b!8923 () Bool)

(assert (= bs!2380 (and b!8923 b!8920)))

(declare-fun lambda!461 () Int)

(assert (=> bs!2380 (= lambda!461 lambda!458)))

(declare-fun d!5463 () Bool)

(declare-fun res!7352 () Bool)

(declare-fun e!4690 () Bool)

(assert (=> d!5463 (=> (not res!7352) (not e!4690))))

(assert (=> d!5463 (= res!7352 (= (size!283 f!79) #b00000000000000000000000000010100))))

(assert (=> d!5463 (= (fInv!0 f!79) e!4690)))

(declare-fun all20!0 (array!651 Int) Bool)

(assert (=> b!8923 (= e!4690 (all20!0 f!79 lambda!461))))

(assert (= (and d!5463 res!7352) b!8923))

(declare-fun m!16521 () Bool)

(assert (=> b!8923 m!16521))

(assert (=> b!8912 d!5463))

(declare-fun b!8936 () Bool)

(declare-fun res!7362 () Bool)

(declare-fun e!4698 () Bool)

(assert (=> b!8936 (=> (not res!7362) (not e!4698))))

(assert (=> b!8936 (= res!7362 (fInv!0 lt!4318))))

(declare-fun b!8937 () Bool)

(declare-fun e!4699 () tuple3!160)

(declare-fun lt!4338 () (_ BitVec 32))

(declare-datatypes ((tuple2!66 0))(
  ( (tuple2!67 (_1!214 Unit!627) (_2!214 array!651)) )
))
(declare-fun lt!4340 () tuple2!66)

(declare-fun Unit!630 () Unit!627)

(assert (=> b!8937 (= e!4699 (tuple3!161 Unit!630 lt!4338 (_2!214 lt!4340)))))

(declare-fun d!5465 () Bool)

(declare-fun e!4700 () Bool)

(assert (=> d!5465 e!4700))

(declare-fun res!7364 () Bool)

(assert (=> d!5465 (=> (not res!7364) (not e!4700))))

(declare-fun lt!4337 () (_ BitVec 32))

(declare-fun lt!4339 () tuple3!160)

(assert (=> d!5465 (= res!7364 (and (or (and (bvsle #b00000000000000000000000000000000 (_2!213 lt!4339)) (= (bvand lt!4337 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000)) (not (= (bvand lt!4337 #b10000000000000000000000000000000) (bvand (bvadd lt!4337 jz!36) #b10000000000000000000000000000000)))) (bvsgt #b00000000000000000000000000000000 (_2!213 lt!4339)) (let ((lhs!272 (bvadd lt!4337 jz!36))) (or (not (= (bvand lhs!272 #b10000000000000000000000000000000) #b00000000000000000000000000000000)) (= (bvand lhs!272 #b10000000000000000000000000000000) (bvand (bvadd lhs!272 #b00000000000000000000000000000001) #b10000000000000000000000000000000))))) (or (bvsgt #b00000000000000000000000000000000 (_2!213 lt!4339)) (not (= (bvand lt!4337 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000))) (= (bvand lt!4337 #b10000000000000000000000000000000) (bvand (bvadd lt!4337 jz!36) #b10000000000000000000000000000000))) (bvsle #b00000000000000000000000000000000 (_2!213 lt!4339)) (bvsle (_2!213 lt!4339) (bvadd lt!4337 jz!36 #b00000000000000000000000000000001))))))

(assert (=> d!5465 (= lt!4339 e!4699)))

(declare-fun c!994 () Bool)

(assert (=> d!5465 (= c!994 (bvsle lt!4338 (bvadd lt!4337 jz!36)))))

(assert (=> d!5465 (= lt!4338 (bvadd lt!4319 #b00000000000000000000000000000001))))

(declare-fun lt!4335 () (_ BitVec 32))

(declare-fun Unit!631 () Unit!627)

(declare-fun Unit!632 () Unit!627)

(assert (=> d!5465 (= lt!4340 (ite (bvsge (bvadd (bvsub lt!4335 lt!4337) lt!4319) #b00000000000000000000000000000000) (tuple2!67 Unit!631 (array!652 (store (arr!283 lt!4318) lt!4319 ((_ to_fp 11 53) roundNearestTiesToEven (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 32))) #b00000000000000000000000000000000) #b00000000000000000000000000000000 #b00000000101000101111100110000011) #b00000000000000000000000000000001 #b00000000011011100100111001000100) #b00000000000000000000000000001010 #b00000000110001010110000110110111) #b00000000000000000000000000001011 #b00000000001001000110111000111010) #b00000000000000000000000000001100 #b00000000010000100100110111010010) #b00000000000000000000000000001101 #b00000000111000000000011001001001) #b00000000000000000000000000001110 #b00000000001011101110101000001001) #b00000000000000000000000000001111 #b00000000110100011001001000011100) #b00000000000000000000000000010000 #b00000000111111100001110111101011) #b00000000000000000000000000010001 #b00000000000111001011000100101001) #b00000000000000000000000000010010 #b00000000101001110011111011101000) #b00000000000000000000000000010011 #b00000000100000100011010111110101) #b00000000000000000000000000000010 #b00000000000101010010100111111100) #b00000000000000000000000000010100 #b00000000001011101011101101000100) #b00000000000000000000000000010101 #b00000000100001001110100110011100) #b00000000000000000000000000010110 #b00000000011100000010011010110100) #b00000000000000000000000000010111 #b00000000010111110111111001000001) #b00000000000000000000000000011000 #b00000000001110011001000111010110) #b00000000000000000000000000011001 #b00000000001110011000001101010011) #b00000000000000000000000000011010 #b00000000001110011111010010011100) #b00000000000000000000000000011011 #b00000000100001000101111110001011) #b00000000000000000000000000011100 #b00000000101111011111100100101000) #b00000000000000000000000000011101 #b00000000001110110001111111111000) #b00000000000000000000000000000011 #b00000000001001110101011111010001) #b00000000000000000000000000011110 #b00000000100101111111111111011110) #b00000000000000000000000000011111 #b00000000000001011001100000001111) #b00000000000000000000000000100000 #b00000000111011110010111100010001) #b00000000000000000000000000100001 #b00000000100010110101101000001010) #b00000000000000000000000000100010 #b00000000011011010001111101101101) #b00000000000000000000000000100011 #b00000000001101100111111011001111) #b00000000000000000000000000100100 #b00000000001001111100101100001001) #b00000000000000000000000000100101 #b00000000101101110100111101000110) #b00000000000000000000000000100110 #b00000000001111110110011010011110) #b00000000000000000000000000100111 #b00000000010111111110101000101101) #b00000000000000000000000000000100 #b00000000111101010011010011011101) #b00000000000000000000000000101000 #b00000000011101010010011110111010) #b00000000000000000000000000101001 #b00000000110001111110101111100101) #b00000000000000000000000000101010 #b00000000111100010111101100111101) #b00000000000000000000000000101011 #b00000000000001110011100111110111) #b00000000000000000000000000101100 #b00000000100010100101001010010010) #b00000000000000000000000000101101 #b00000000111010100110101111111011) #b00000000000000000000000000101110 #b00000000010111111011000100011111) #b00000000000000000000000000101111 #b00000000100011010101110100001000) #b00000000000000000000000000110000 #b00000000010101100000001100110000) #b00000000000000000000000000110001 #b00000000010001101111110001111011) #b00000000000000000000000000000101 #b00000000110000001101101101100010) #b00000000000000000000000000110010 #b00000000011010111010101111110000) #b00000000000000000000000000110011 #b00000000110011111011110000100000) #b00000000000000000000000000110100 #b00000000100110101111010000110110) #b00000000000000000000000000110101 #b00000000000111011010100111100011) #b00000000000000000000000000110110 #b00000000100100010110000101011110) #b00000000000000000000000000110111 #b00000000111001100001101100001000) #b00000000000000000000000000111000 #b00000000011001011001100110000101) #b00000000000000000000000000111001 #b00000000010111110001010010100000) #b00000000000000000000000000111010 #b00000000011010000100000010001101) #b00000000000000000000000000111011 #b00000000111111111101100010000000) #b00000000000000000000000000000110 #b00000000100101011001100100111100) #b00000000000000000000000000111100 #b00000000010011010111001100100111) #b00000000000000000000000000111101 #b00000000001100010000011000000110) #b00000000000000000000000000111110 #b00000000000101010101011011001010) #b00000000000000000000000000111111 #b00000000011100111010100011001001) #b00000000000000000000000001000000 #b00000000011000001110001001111011) #b00000000000000000000000001000001 #b00000000110000001000110001101011) #b00000000000000000000000000000111 #b00000000010000111001000001000001) #b00000000000000000000000000001000 #b00000000111111100101000101100011) #b00000000000000000000000000001001 #b00000000101010111101111010111011) (bvadd (bvsub lt!4335 lt!4337) lt!4319)))) (size!283 lt!4318))) (tuple2!67 Unit!632 lt!4318)))))

(assert (=> d!5465 e!4698))

(declare-fun res!7361 () Bool)

(assert (=> d!5465 (=> (not res!7361) (not e!4698))))

(assert (=> d!5465 (= res!7361 (and (bvsle #b00000000000000000000000000000000 lt!4319) (bvsle lt!4319 (bvadd lt!4337 jz!36 #b00000000000000000000000000000001))))))

(declare-fun lt!4336 () (_ BitVec 32))

(assert (=> d!5465 (= lt!4335 (ite (bvslt lt!4336 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!4336))))

(assert (=> d!5465 (= lt!4336 (bvsdiv (bvsub e!19 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(assert (=> d!5465 (= lt!4337 (bvsub (size!283 xx!50) #b00000000000000000000000000000001))))

(assert (=> d!5465 (= (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4319 lt!4318) lt!4339)))

(declare-fun b!8938 () Bool)

(assert (=> b!8938 (= e!4699 (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4338 (_2!214 lt!4340)))))

(declare-fun b!8939 () Bool)

(declare-fun res!7363 () Bool)

(assert (=> b!8939 (=> (not res!7363) (not e!4700))))

(assert (=> b!8939 (= res!7363 (fInv!0 (_3!180 lt!4339)))))

(declare-fun b!8940 () Bool)

(assert (=> b!8940 (= e!4700 (bvsgt (_2!213 lt!4339) (bvadd lt!4337 jz!36)))))

(assert (=> b!8940 (or (not (= (bvand lt!4337 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000))) (= (bvand lt!4337 #b10000000000000000000000000000000) (bvand (bvadd lt!4337 jz!36) #b10000000000000000000000000000000)))))

(declare-fun b!8941 () Bool)

(assert (=> b!8941 (= e!4698 (bvsle lt!4319 (bvadd lt!4337 jz!36)))))

(assert (= (and d!5465 res!7361) b!8936))

(assert (= (and b!8936 res!7362) b!8941))

(assert (= (and d!5465 c!994) b!8938))

(assert (= (and d!5465 (not c!994)) b!8937))

(assert (= (and d!5465 res!7364) b!8939))

(assert (= (and b!8939 res!7363) b!8940))

(declare-fun m!16523 () Bool)

(assert (=> b!8936 m!16523))

(declare-fun m!16525 () Bool)

(assert (=> d!5465 m!16525))

(declare-fun m!16527 () Bool)

(assert (=> d!5465 m!16527))

(declare-fun m!16529 () Bool)

(assert (=> b!8938 m!16529))

(declare-fun m!16531 () Bool)

(assert (=> b!8939 m!16531))

(assert (=> b!8911 d!5465))

(declare-fun bs!2381 () Bool)

(declare-fun b!8944 () Bool)

(assert (= bs!2381 (and b!8944 b!8920)))

(declare-fun lambda!464 () Int)

(assert (=> bs!2381 (not (= lambda!464 lambda!458))))

(declare-fun bs!2382 () Bool)

(assert (= bs!2382 (and b!8944 b!8923)))

(assert (=> bs!2382 (not (= lambda!464 lambda!461))))

(declare-fun d!5467 () Bool)

(declare-fun res!7367 () Bool)

(declare-fun e!4703 () Bool)

(assert (=> d!5467 (=> (not res!7367) (not e!4703))))

(assert (=> d!5467 (= res!7367 (= (size!283 q!51) #b00000000000000000000000000010100))))

(assert (=> d!5467 (= (qInv!0 q!51) e!4703)))

(assert (=> b!8944 (= e!4703 (all20!0 q!51 lambda!464))))

(assert (= (and d!5467 res!7367) b!8944))

(declare-fun m!16533 () Bool)

(assert (=> b!8944 m!16533))

(assert (=> b!8915 d!5467))

(declare-fun d!5469 () Bool)

(assert (=> d!5469 (= (Q!0 (select (arr!283 f!79) (bvadd i!190 #b00000000000000000000000000000100))) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!283 f!79) (bvadd i!190 #b00000000000000000000000000000100))) (fp.leq (select (arr!283 f!79) (bvadd i!190 #b00000000000000000000000000000100)) (fp #b0 #b10000010110 #b1111111111111111111111100000000000000000000000000000))))))

(assert (=> b!8910 d!5469))

(push 1)

(assert (not b!8944))

(assert (not b!8938))

(assert (not b!8936))

(assert (not b!8923))

(assert (not b!8920))

(assert (not b!8939))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

