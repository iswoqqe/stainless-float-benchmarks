; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!1567 () Bool)

(assert start!1567)

(declare-fun b!8340 () Bool)

(declare-fun e!4241 () Bool)

(declare-fun e!4237 () Bool)

(assert (=> b!8340 (= e!4241 e!4237)))

(declare-fun res!6905 () Bool)

(assert (=> b!8340 (=> (not res!6905) (not e!4237))))

(declare-fun i!190 () (_ BitVec 32))

(declare-fun jz!36 () (_ BitVec 32))

(assert (=> b!8340 (= res!6905 (and (bvsle #b00000000000000000000000000000000 i!190) (bvsle i!190 (bvadd jz!36 #b00000000000000000000000000000001))))))

(declare-datatypes ((array!617 0))(
  ( (array!618 (arr!271 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!271 (_ BitVec 32))) )
))
(declare-datatypes ((Unit!561 0))(
  ( (Unit!562) )
))
(declare-datatypes ((tuple3!136 0))(
  ( (tuple3!137 (_1!191 Unit!561) (_2!191 (_ BitVec 32)) (_3!168 array!617)) )
))
(declare-fun lt!3994 () tuple3!136)

(declare-fun e!4238 () tuple3!136)

(assert (=> b!8340 (= lt!3994 e!4238)))

(declare-fun lt!3992 () (_ BitVec 32))

(declare-fun c!925 () Bool)

(declare-fun xx!50 () array!617)

(assert (=> b!8340 (= c!925 (bvsle lt!3992 (bvadd (bvsub (size!271 xx!50) #b00000000000000000000000000000001) jz!36)))))

(assert (=> b!8340 (= lt!3992 #b00000000000000000000000000000000)))

(declare-fun lt!3993 () array!617)

(assert (=> b!8340 (= lt!3993 (array!618 ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000010100))))

(declare-fun b!8341 () Bool)

(declare-fun Unit!563 () Unit!561)

(assert (=> b!8341 (= e!4238 (tuple3!137 Unit!563 lt!3992 lt!3993))))

(declare-fun b!8342 () Bool)

(declare-fun res!6908 () Bool)

(assert (=> b!8342 (=> (not res!6908) (not e!4237))))

(declare-fun q!51 () array!617)

(declare-fun qInv!0 (array!617) Bool)

(assert (=> b!8342 (= res!6908 (qInv!0 q!51))))

(declare-fun b!8343 () Bool)

(declare-fun e!19 () (_ BitVec 32))

(declare-fun timesTwoOverPiWhile!0 ((_ BitVec 32) (_ BitVec 32) array!617 (_ BitVec 32) array!617) tuple3!136)

(assert (=> b!8343 (= e!4238 (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!3992 lt!3993))))

(declare-fun b!8344 () Bool)

(declare-fun e!4239 () Bool)

(assert (=> b!8344 (= e!4239 e!4241)))

(declare-fun res!6903 () Bool)

(assert (=> b!8344 (=> (not res!6903) (not e!4241))))

(declare-fun lt!3995 () (_ BitVec 32))

(assert (=> b!8344 (= res!6903 (= (bvsub e!19 (bvmul #b00000000000000000000000000011000 (bvadd (ite (bvslt lt!3995 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!3995) #b00000000000000000000000000000001))) #b00000000000000000000000000000000))))

(assert (=> b!8344 (= lt!3995 (bvsdiv (bvsub e!19 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(declare-fun b!8345 () Bool)

(declare-fun res!6904 () Bool)

(assert (=> b!8345 (=> (not res!6904) (not e!4239))))

(declare-fun xxInv!0 (array!617) Bool)

(assert (=> b!8345 (= res!6904 (xxInv!0 xx!50))))

(declare-fun b!8346 () Bool)

(assert (=> b!8346 (= e!4237 (and (bvsle i!190 jz!36) (bvsge #b00000000000000000000000000000001 (size!271 xx!50))))))

(declare-fun res!6907 () Bool)

(assert (=> start!1567 (=> (not res!6907) (not e!4239))))

(assert (=> start!1567 (= res!6907 (and (bvsle #b00000000000000000000000000000000 jz!36) (bvsle jz!36 #b00000000000000000000000000001111) (bvsle #b00000000000000000000000000011000 e!19) (bvsle e!19 #b00000000000000000000001111110000) (= (bvsrem e!19 #b00000000000000000000000000011000) #b00000000000000000000000000000000)))))

(assert (=> start!1567 e!4239))

(declare-fun f!79 () array!617)

(declare-fun array_inv!221 (array!617) Bool)

(assert (=> start!1567 (array_inv!221 f!79)))

(assert (=> start!1567 (array_inv!221 q!51)))

(assert (=> start!1567 true))

(assert (=> start!1567 (array_inv!221 xx!50)))

(declare-fun b!8347 () Bool)

(declare-fun res!6906 () Bool)

(assert (=> b!8347 (=> (not res!6906) (not e!4237))))

(declare-fun fInv!0 (array!617) Bool)

(assert (=> b!8347 (= res!6906 (fInv!0 f!79))))

(assert (= (and start!1567 res!6907) b!8345))

(assert (= (and b!8345 res!6904) b!8344))

(assert (= (and b!8344 res!6903) b!8340))

(assert (= (and b!8340 c!925) b!8343))

(assert (= (and b!8340 (not c!925)) b!8341))

(assert (= (and b!8340 res!6905) b!8347))

(assert (= (and b!8347 res!6906) b!8342))

(assert (= (and b!8342 res!6908) b!8346))

(declare-fun m!16169 () Bool)

(assert (=> b!8342 m!16169))

(declare-fun m!16171 () Bool)

(assert (=> b!8347 m!16171))

(declare-fun m!16173 () Bool)

(assert (=> b!8343 m!16173))

(declare-fun m!16175 () Bool)

(assert (=> start!1567 m!16175))

(declare-fun m!16177 () Bool)

(assert (=> start!1567 m!16177))

(declare-fun m!16179 () Bool)

(assert (=> start!1567 m!16179))

(declare-fun m!16181 () Bool)

(assert (=> b!8345 m!16181))

(push 1)

(assert (not b!8345))

(assert (not start!1567))

(assert (not b!8343))

(assert (not b!8347))

(assert (not b!8342))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!5303 () Bool)

(declare-fun res!6911 () Bool)

(declare-fun e!4245 () Bool)

(assert (=> d!5303 (=> (not res!6911) (not e!4245))))

(assert (=> d!5303 (= res!6911 (= (size!271 q!51) #b00000000000000000000000000010100))))

(assert (=> d!5303 (= (qInv!0 q!51) e!4245)))

(declare-fun b!8350 () Bool)

(declare-fun lambda!368 () Int)

(declare-fun all20!0 (array!617 Int) Bool)

(assert (=> b!8350 (= e!4245 (all20!0 q!51 lambda!368))))

(assert (= (and d!5303 res!6911) b!8350))

(declare-fun m!16183 () Bool)

(assert (=> b!8350 m!16183))

(assert (=> b!8342 d!5303))

(declare-fun b!8363 () Bool)

(declare-fun e!4254 () tuple3!136)

(declare-fun lt!4009 () (_ BitVec 32))

(declare-datatypes ((tuple2!46 0))(
  ( (tuple2!47 (_1!192 Unit!561) (_2!192 array!617)) )
))
(declare-fun lt!4010 () tuple2!46)

(declare-fun Unit!564 () Unit!561)

(assert (=> b!8363 (= e!4254 (tuple3!137 Unit!564 lt!4009 (_2!192 lt!4010)))))

(declare-fun lt!4013 () tuple3!136)

(declare-fun lt!4008 () (_ BitVec 32))

(declare-fun e!4255 () Bool)

(declare-fun b!8364 () Bool)

(assert (=> b!8364 (= e!4255 (bvsgt (_2!191 lt!4013) (bvadd lt!4008 jz!36)))))

(assert (=> b!8364 (or (not (= (bvand lt!4008 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000))) (= (bvand lt!4008 #b10000000000000000000000000000000) (bvand (bvadd lt!4008 jz!36) #b10000000000000000000000000000000)))))

(declare-fun b!8365 () Bool)

(assert (=> b!8365 (= e!4254 (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4009 (_2!192 lt!4010)))))

(declare-fun b!8366 () Bool)

(declare-fun e!4253 () Bool)

(assert (=> b!8366 (= e!4253 (bvsle lt!3992 (bvadd lt!4008 jz!36)))))

(declare-fun b!8367 () Bool)

(declare-fun res!6921 () Bool)

(assert (=> b!8367 (=> (not res!6921) (not e!4253))))

(assert (=> b!8367 (= res!6921 (fInv!0 lt!3993))))

(declare-fun b!8368 () Bool)

(declare-fun res!6920 () Bool)

(assert (=> b!8368 (=> (not res!6920) (not e!4255))))

(assert (=> b!8368 (= res!6920 (fInv!0 (_3!168 lt!4013)))))

(declare-fun d!5305 () Bool)

(assert (=> d!5305 e!4255))

(declare-fun res!6923 () Bool)

(assert (=> d!5305 (=> (not res!6923) (not e!4255))))

(assert (=> d!5305 (= res!6923 (and (or (and (bvsle #b00000000000000000000000000000000 (_2!191 lt!4013)) (= (bvand lt!4008 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000)) (not (= (bvand lt!4008 #b10000000000000000000000000000000) (bvand (bvadd lt!4008 jz!36) #b10000000000000000000000000000000)))) (bvsgt #b00000000000000000000000000000000 (_2!191 lt!4013)) (let ((lhs!262 (bvadd lt!4008 jz!36))) (or (not (= (bvand lhs!262 #b10000000000000000000000000000000) #b00000000000000000000000000000000)) (= (bvand lhs!262 #b10000000000000000000000000000000) (bvand (bvadd lhs!262 #b00000000000000000000000000000001) #b10000000000000000000000000000000))))) (or (bvsgt #b00000000000000000000000000000000 (_2!191 lt!4013)) (not (= (bvand lt!4008 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000))) (= (bvand lt!4008 #b10000000000000000000000000000000) (bvand (bvadd lt!4008 jz!36) #b10000000000000000000000000000000))) (bvsle #b00000000000000000000000000000000 (_2!191 lt!4013)) (bvsle (_2!191 lt!4013) (bvadd lt!4008 jz!36 #b00000000000000000000000000000001))))))

(assert (=> d!5305 (= lt!4013 e!4254)))

(declare-fun c!928 () Bool)

(assert (=> d!5305 (= c!928 (bvsle lt!4009 (bvadd lt!4008 jz!36)))))

(assert (=> d!5305 (= lt!4009 (bvadd lt!3992 #b00000000000000000000000000000001))))

(declare-fun lt!4012 () (_ BitVec 32))

(declare-fun Unit!565 () Unit!561)

(declare-fun Unit!566 () Unit!561)

(assert (=> d!5305 (= lt!4010 (ite (bvsge (bvadd (bvsub lt!4012 lt!4008) lt!3992) #b00000000000000000000000000000000) (tuple2!47 Unit!565 (array!618 (store (arr!271 lt!3993) lt!3992 ((_ to_fp 11 53) roundNearestTiesToEven (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 32))) #b00000000000000000000000000000000) #b00000000000000000000000000000000 #b00000000101000101111100110000011) #b00000000000000000000000000000001 #b00000000011011100100111001000100) #b00000000000000000000000000001010 #b00000000110001010110000110110111) #b00000000000000000000000000001011 #b00000000001001000110111000111010) #b00000000000000000000000000001100 #b00000000010000100100110111010010) #b00000000000000000000000000001101 #b00000000111000000000011001001001) #b00000000000000000000000000001110 #b00000000001011101110101000001001) #b00000000000000000000000000001111 #b00000000110100011001001000011100) #b00000000000000000000000000010000 #b00000000111111100001110111101011) #b00000000000000000000000000010001 #b00000000000111001011000100101001) #b00000000000000000000000000010010 #b00000000101001110011111011101000) #b00000000000000000000000000010011 #b00000000100000100011010111110101) #b00000000000000000000000000000010 #b00000000000101010010100111111100) #b00000000000000000000000000010100 #b00000000001011101011101101000100) #b00000000000000000000000000010101 #b00000000100001001110100110011100) #b00000000000000000000000000010110 #b00000000011100000010011010110100) #b00000000000000000000000000010111 #b00000000010111110111111001000001) #b00000000000000000000000000011000 #b00000000001110011001000111010110) #b00000000000000000000000000011001 #b00000000001110011000001101010011) #b00000000000000000000000000011010 #b00000000001110011111010010011100) #b00000000000000000000000000011011 #b00000000100001000101111110001011) #b00000000000000000000000000011100 #b00000000101111011111100100101000) #b00000000000000000000000000011101 #b00000000001110110001111111111000) #b00000000000000000000000000000011 #b00000000001001110101011111010001) #b00000000000000000000000000011110 #b00000000100101111111111111011110) #b00000000000000000000000000011111 #b00000000000001011001100000001111) #b00000000000000000000000000100000 #b00000000111011110010111100010001) #b00000000000000000000000000100001 #b00000000100010110101101000001010) #b00000000000000000000000000100010 #b00000000011011010001111101101101) #b00000000000000000000000000100011 #b00000000001101100111111011001111) #b00000000000000000000000000100100 #b00000000001001111100101100001001) #b00000000000000000000000000100101 #b00000000101101110100111101000110) #b00000000000000000000000000100110 #b00000000001111110110011010011110) #b00000000000000000000000000100111 #b00000000010111111110101000101101) #b00000000000000000000000000000100 #b00000000111101010011010011011101) #b00000000000000000000000000101000 #b00000000011101010010011110111010) #b00000000000000000000000000101001 #b00000000110001111110101111100101) #b00000000000000000000000000101010 #b00000000111100010111101100111101) #b00000000000000000000000000101011 #b00000000000001110011100111110111) #b00000000000000000000000000101100 #b00000000100010100101001010010010) #b00000000000000000000000000101101 #b00000000111010100110101111111011) #b00000000000000000000000000101110 #b00000000010111111011000100011111) #b00000000000000000000000000101111 #b00000000100011010101110100001000) #b00000000000000000000000000110000 #b00000000010101100000001100110000) #b00000000000000000000000000110001 #b00000000010001101111110001111011) #b00000000000000000000000000000101 #b00000000110000001101101101100010) #b00000000000000000000000000110010 #b00000000011010111010101111110000) #b00000000000000000000000000110011 #b00000000110011111011110000100000) #b00000000000000000000000000110100 #b00000000100110101111010000110110) #b00000000000000000000000000110101 #b00000000000111011010100111100011) #b00000000000000000000000000110110 #b00000000100100010110000101011110) #b00000000000000000000000000110111 #b00000000111001100001101100001000) #b00000000000000000000000000111000 #b00000000011001011001100110000101) #b00000000000000000000000000111001 #b00000000010111110001010010100000) #b00000000000000000000000000111010 #b00000000011010000100000010001101) #b00000000000000000000000000111011 #b00000000111111111101100010000000) #b00000000000000000000000000000110 #b00000000100101011001100100111100) #b00000000000000000000000000111100 #b00000000010011010111001100100111) #b00000000000000000000000000111101 #b00000000001100010000011000000110) #b00000000000000000000000000111110 #b00000000000101010101011011001010) #b00000000000000000000000000111111 #b00000000011100111010100011001001) #b00000000000000000000000001000000 #b00000000011000001110001001111011) #b00000000000000000000000001000001 #b00000000110000001000110001101011) #b00000000000000000000000000000111 #b00000000010000111001000001000001) #b00000000000000000000000000001000 #b00000000111111100101000101100011) #b00000000000000000000000000001001 #b00000000101010111101111010111011) (bvadd (bvsub lt!4012 lt!4008) lt!3992)))) (size!271 lt!3993))) (tuple2!47 Unit!566 lt!3993)))))

(assert (=> d!5305 e!4253))

(declare-fun res!6922 () Bool)

(assert (=> d!5305 (=> (not res!6922) (not e!4253))))

(assert (=> d!5305 (= res!6922 (and (bvsle #b00000000000000000000000000000000 lt!3992) (bvsle lt!3992 (bvadd lt!4008 jz!36 #b00000000000000000000000000000001))))))

(declare-fun lt!4011 () (_ BitVec 32))

(assert (=> d!5305 (= lt!4012 (ite (bvslt lt!4011 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!4011))))

(assert (=> d!5305 (= lt!4011 (bvsdiv (bvsub e!19 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(assert (=> d!5305 (= lt!4008 (bvsub (size!271 xx!50) #b00000000000000000000000000000001))))

(assert (=> d!5305 (= (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!3992 lt!3993) lt!4013)))

(assert (= (and d!5305 res!6922) b!8367))

(assert (= (and b!8367 res!6921) b!8366))

(assert (= (and d!5305 c!928) b!8365))

(assert (= (and d!5305 (not c!928)) b!8363))

(assert (= (and d!5305 res!6923) b!8368))

(assert (= (and b!8368 res!6920) b!8364))

(declare-fun m!16185 () Bool)

(assert (=> b!8365 m!16185))

(declare-fun m!16187 () Bool)

(assert (=> b!8367 m!16187))

(declare-fun m!16189 () Bool)

(assert (=> b!8368 m!16189))

(declare-fun m!16191 () Bool)

(assert (=> d!5305 m!16191))

(declare-fun m!16193 () Bool)

(assert (=> d!5305 m!16193))

(assert (=> b!8343 d!5305))

(declare-fun d!5307 () Bool)

(assert (=> d!5307 (= (array_inv!221 f!79) (bvsge (size!271 f!79) #b00000000000000000000000000000000))))

(assert (=> start!1567 d!5307))

(declare-fun d!5309 () Bool)

(assert (=> d!5309 (= (array_inv!221 q!51) (bvsge (size!271 q!51) #b00000000000000000000000000000000))))

(assert (=> start!1567 d!5309))

(declare-fun d!5311 () Bool)

(assert (=> d!5311 (= (array_inv!221 xx!50) (bvsge (size!271 xx!50) #b00000000000000000000000000000000))))

(assert (=> start!1567 d!5311))

(declare-fun bs!2338 () Bool)

(declare-fun b!8371 () Bool)

(assert (= bs!2338 (and b!8371 b!8350)))

(declare-fun lambda!371 () Int)

(assert (=> bs!2338 (not (= lambda!371 lambda!368))))

(declare-fun d!5313 () Bool)

(declare-fun res!6926 () Bool)

(declare-fun e!4258 () Bool)

(assert (=> d!5313 (=> (not res!6926) (not e!4258))))

(assert (=> d!5313 (= res!6926 (= (size!271 xx!50) #b00000000000000000000000000000101))))

(assert (=> d!5313 (= (xxInv!0 xx!50) e!4258)))

(declare-fun all5!0 (array!617 Int) Bool)

(assert (=> b!8371 (= e!4258 (all5!0 xx!50 lambda!371))))

(assert (= (and d!5313 res!6926) b!8371))

(declare-fun m!16195 () Bool)

(assert (=> b!8371 m!16195))

(assert (=> b!8345 d!5313))

(declare-fun bs!2339 () Bool)

(declare-fun b!8374 () Bool)

(assert (= bs!2339 (and b!8374 b!8350)))

(declare-fun lambda!374 () Int)

(assert (=> bs!2339 (not (= lambda!374 lambda!368))))

(declare-fun bs!2340 () Bool)

(assert (= bs!2340 (and b!8374 b!8371)))

(assert (=> bs!2340 (= lambda!374 lambda!371)))

(declare-fun d!5315 () Bool)

(declare-fun res!6929 () Bool)

(declare-fun e!4261 () Bool)

(assert (=> d!5315 (=> (not res!6929) (not e!4261))))

(assert (=> d!5315 (= res!6929 (= (size!271 f!79) #b00000000000000000000000000010100))))

(assert (=> d!5315 (= (fInv!0 f!79) e!4261)))

(assert (=> b!8374 (= e!4261 (all20!0 f!79 lambda!374))))

(assert (= (and d!5315 res!6929) b!8374))

(declare-fun m!16197 () Bool)

(assert (=> b!8374 m!16197))

(assert (=> b!8347 d!5315))

(push 1)

(assert (not b!8374))

(assert (not b!8365))

(assert (not b!8367))

(assert (not b!8371))

(assert (not b!8350))

(assert (not b!8368))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

