; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!1057 () Bool)

(assert start!1057)

(declare-fun res!3982 () Bool)

(declare-fun e!2537 () Bool)

(assert (=> start!1057 (=> (not res!3982) (not e!2537))))

(declare-fun jz!67 () (_ BitVec 32))

(declare-datatypes ((array!345 0))(
  ( (array!346 (arr!149 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!149 (_ BitVec 32))) )
))
(declare-fun qq!69 () array!345)

(assert (=> start!1057 (= res!3982 (and (bvsle #b00000000000000000000000000000000 jz!67) (bvslt jz!67 #b00000000000000000000000000010100) (= (size!149 qq!69) #b00000000000000000000000000010100)))))

(assert (=> start!1057 e!2537))

(assert (=> start!1057 true))

(declare-fun array_inv!99 (array!345) Bool)

(assert (=> start!1057 (array_inv!99 qq!69)))

(declare-fun b!5109 () Bool)

(declare-fun res!3983 () Bool)

(assert (=> b!5109 (=> (not res!3983) (not e!2537))))

(declare-fun qqInv!0 (array!345) Bool)

(assert (=> b!5109 (= res!3983 (qqInv!0 qq!69))))

(declare-fun b!5110 () Bool)

(assert (=> b!5110 (= e!2537 (or (not (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000000))) (not (fp.leq (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000000000))) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)))))))

(assert (= (and start!1057 res!3982) b!5109))

(assert (= (and b!5109 res!3983) b!5110))

(declare-fun m!7607 () Bool)

(assert (=> start!1057 m!7607))

(declare-fun m!7609 () Bool)

(assert (=> b!5109 m!7609))

(declare-fun m!7611 () Bool)

(assert (=> b!5110 m!7611))

(declare-fun m!7613 () Bool)

(assert (=> b!5110 m!7613))

(declare-fun m!7615 () Bool)

(assert (=> b!5110 m!7615))

(check-sat (not b!5109) (not start!1057))
(check-sat)
(get-model)

(declare-fun d!2861 () Bool)

(assert (=> d!2861 (= (qqInv!0 qq!69) (and (= (size!149 qq!69) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000000000)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000000000) (fp #b0 #b01111111101 #b1111111111111111111111000000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000000001)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000000001) (fp #b0 #b01111100110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000000010)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000000010) (fp #b0 #b01111001110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000000011)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000000011) (fp #b0 #b01110110110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000000100)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000000100) (fp #b0 #b01110011110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000000101)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000000101) (fp #b0 #b01110000110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000000110)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000000110) (fp #b0 #b01101101110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000000111)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000000111) (fp #b0 #b01101010110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000001000)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000001000) (fp #b0 #b01100111110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000001001)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000001001) (fp #b0 #b01100100110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000001010)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000001010) (fp #b0 #b01100001110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000001011)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000001011) (fp #b0 #b01011110110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000001100)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000001100) (fp #b0 #b01011011110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000001101)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000001101) (fp #b0 #b01011000110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000001110)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000001110) (fp #b0 #b01010101110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000001111)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000001111) (fp #b0 #b01010010110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000010000)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000010000) (fp #b0 #b01001111110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000010001)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000010001) (fp #b0 #b01001100110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000010010)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000010010) (fp #b0 #b01001001110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!149 qq!69) #b00000000000000000000000000010011)) (fp.leq (select (arr!149 qq!69) #b00000000000000000000000000010011) (fp #b0 #b01000110110 #b1111111111111111111111100000000000000000000000000000))))))

(declare-fun bs!1274 () Bool)

(assert (= bs!1274 d!2861))

(declare-fun m!7617 () Bool)

(assert (=> bs!1274 m!7617))

(declare-fun m!7619 () Bool)

(assert (=> bs!1274 m!7619))

(declare-fun m!7621 () Bool)

(assert (=> bs!1274 m!7621))

(assert (=> bs!1274 m!7611))

(declare-fun m!7623 () Bool)

(assert (=> bs!1274 m!7623))

(declare-fun m!7625 () Bool)

(assert (=> bs!1274 m!7625))

(declare-fun m!7627 () Bool)

(assert (=> bs!1274 m!7627))

(declare-fun m!7629 () Bool)

(assert (=> bs!1274 m!7629))

(declare-fun m!7631 () Bool)

(assert (=> bs!1274 m!7631))

(declare-fun m!7633 () Bool)

(assert (=> bs!1274 m!7633))

(declare-fun m!7635 () Bool)

(assert (=> bs!1274 m!7635))

(declare-fun m!7637 () Bool)

(assert (=> bs!1274 m!7637))

(declare-fun m!7639 () Bool)

(assert (=> bs!1274 m!7639))

(declare-fun m!7641 () Bool)

(assert (=> bs!1274 m!7641))

(declare-fun m!7643 () Bool)

(assert (=> bs!1274 m!7643))

(declare-fun m!7645 () Bool)

(assert (=> bs!1274 m!7645))

(declare-fun m!7647 () Bool)

(assert (=> bs!1274 m!7647))

(declare-fun m!7649 () Bool)

(assert (=> bs!1274 m!7649))

(declare-fun m!7651 () Bool)

(assert (=> bs!1274 m!7651))

(declare-fun m!7653 () Bool)

(assert (=> bs!1274 m!7653))

(assert (=> b!5109 d!2861))

(declare-fun d!2863 () Bool)

(assert (=> d!2863 (= (array_inv!99 qq!69) (bvsge (size!149 qq!69) #b00000000000000000000000000000000))))

(assert (=> start!1057 d!2863))

(check-sat)
