; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!1639 () Bool)

(assert start!1639)

(declare-fun b!8646 () Bool)

(declare-datatypes ((array!635 0))(
  ( (array!636 (arr!277 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!277 (_ BitVec 32))) )
))
(declare-datatypes ((Unit!597 0))(
  ( (Unit!598) )
))
(declare-datatypes ((tuple3!148 0))(
  ( (tuple3!149 (_1!203 Unit!597) (_2!203 (_ BitVec 32)) (_3!174 array!635)) )
))
(declare-fun e!4482 () tuple3!148)

(declare-fun lt!4175 () (_ BitVec 32))

(declare-fun lt!4172 () array!635)

(declare-fun Unit!599 () Unit!597)

(assert (=> b!8646 (= e!4482 (tuple3!149 Unit!599 lt!4175 lt!4172))))

(declare-fun jz!36 () (_ BitVec 32))

(declare-fun e!4476 () Bool)

(declare-fun i!190 () (_ BitVec 32))

(declare-fun b!8647 () Bool)

(declare-fun xx!50 () array!635)

(assert (=> b!8647 (= e!4476 (and (bvsle i!190 jz!36) (bvsge #b00000000000000000000000000000100 (size!277 xx!50))))))

(declare-fun b!8648 () Bool)

(declare-fun e!4478 () Bool)

(assert (=> b!8648 (= e!4478 e!4476)))

(declare-fun res!7139 () Bool)

(assert (=> b!8648 (=> (not res!7139) (not e!4476))))

(assert (=> b!8648 (= res!7139 (and (bvsle #b00000000000000000000000000000000 i!190) (bvsle i!190 (bvadd jz!36 #b00000000000000000000000000000001))))))

(declare-fun lt!4174 () tuple3!148)

(assert (=> b!8648 (= lt!4174 e!4482)))

(declare-fun c!961 () Bool)

(assert (=> b!8648 (= c!961 (bvsle lt!4175 (bvadd (bvsub (size!277 xx!50) #b00000000000000000000000000000001) jz!36)))))

(assert (=> b!8648 (= lt!4175 #b00000000000000000000000000000000)))

(assert (=> b!8648 (= lt!4172 (array!636 ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000010100))))

(declare-fun b!8649 () Bool)

(declare-fun e!4477 () Bool)

(assert (=> b!8649 (= e!4477 e!4478)))

(declare-fun res!7142 () Bool)

(assert (=> b!8649 (=> (not res!7142) (not e!4478))))

(declare-fun e!19 () (_ BitVec 32))

(declare-fun lt!4173 () (_ BitVec 32))

(assert (=> b!8649 (= res!7142 (= (bvsub e!19 (bvmul #b00000000000000000000000000011000 (bvadd (ite (bvslt lt!4173 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!4173) #b00000000000000000000000000000001))) #b00000000000000000000000000000000))))

(assert (=> b!8649 (= lt!4173 (bvsdiv (bvsub e!19 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(declare-fun res!7137 () Bool)

(assert (=> start!1639 (=> (not res!7137) (not e!4477))))

(assert (=> start!1639 (= res!7137 (and (bvsle #b00000000000000000000000000000000 jz!36) (bvsle jz!36 #b00000000000000000000000000001111) (bvsle #b00000000000000000000000000011000 e!19) (bvsle e!19 #b00000000000000000000001111110000) (= (bvsrem e!19 #b00000000000000000000000000011000) #b00000000000000000000000000000000)))))

(assert (=> start!1639 e!4477))

(declare-fun f!79 () array!635)

(declare-fun array_inv!227 (array!635) Bool)

(assert (=> start!1639 (array_inv!227 f!79)))

(declare-fun q!51 () array!635)

(assert (=> start!1639 (array_inv!227 q!51)))

(assert (=> start!1639 true))

(assert (=> start!1639 (array_inv!227 xx!50)))

(declare-fun b!8650 () Bool)

(declare-fun res!7138 () Bool)

(assert (=> b!8650 (=> (not res!7138) (not e!4477))))

(declare-fun xxInv!0 (array!635) Bool)

(assert (=> b!8650 (= res!7138 (xxInv!0 xx!50))))

(declare-fun b!8651 () Bool)

(declare-fun res!7140 () Bool)

(assert (=> b!8651 (=> (not res!7140) (not e!4476))))

(declare-fun fInv!0 (array!635) Bool)

(assert (=> b!8651 (= res!7140 (fInv!0 f!79))))

(declare-fun b!8652 () Bool)

(declare-fun res!7141 () Bool)

(assert (=> b!8652 (=> (not res!7141) (not e!4476))))

(declare-fun qInv!0 (array!635) Bool)

(assert (=> b!8652 (= res!7141 (qInv!0 q!51))))

(declare-fun b!8653 () Bool)

(declare-fun timesTwoOverPiWhile!0 ((_ BitVec 32) (_ BitVec 32) array!635 (_ BitVec 32) array!635) tuple3!148)

(assert (=> b!8653 (= e!4482 (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4175 lt!4172))))

(assert (= (and start!1639 res!7137) b!8650))

(assert (= (and b!8650 res!7138) b!8649))

(assert (= (and b!8649 res!7142) b!8648))

(assert (= (and b!8648 c!961) b!8653))

(assert (= (and b!8648 (not c!961)) b!8646))

(assert (= (and b!8648 res!7139) b!8651))

(assert (= (and b!8651 res!7140) b!8652))

(assert (= (and b!8652 res!7141) b!8647))

(declare-fun m!16349 () Bool)

(assert (=> start!1639 m!16349))

(declare-fun m!16351 () Bool)

(assert (=> start!1639 m!16351))

(declare-fun m!16353 () Bool)

(assert (=> start!1639 m!16353))

(declare-fun m!16355 () Bool)

(assert (=> b!8652 m!16355))

(declare-fun m!16357 () Bool)

(assert (=> b!8653 m!16357))

(declare-fun m!16359 () Bool)

(assert (=> b!8650 m!16359))

(declare-fun m!16361 () Bool)

(assert (=> b!8651 m!16361))

(push 1)

(assert (not b!8653))

(assert (not start!1639))

(assert (not b!8651))

(assert (not b!8650))

(assert (not b!8652))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!5393 () Bool)

(declare-fun res!7145 () Bool)

(declare-fun e!4485 () Bool)

(assert (=> d!5393 (=> (not res!7145) (not e!4485))))

(assert (=> d!5393 (= res!7145 (= (size!277 f!79) #b00000000000000000000000000010100))))

(assert (=> d!5393 (= (fInv!0 f!79) e!4485)))

(declare-fun b!8656 () Bool)

(declare-fun lambda!422 () Int)

(declare-fun all20!0 (array!635 Int) Bool)

(assert (=> b!8656 (= e!4485 (all20!0 f!79 lambda!422))))

(assert (= (and d!5393 res!7145) b!8656))

(declare-fun m!16363 () Bool)

(assert (=> b!8656 m!16363))

(assert (=> b!8651 d!5393))

(declare-fun bs!2362 () Bool)

(declare-fun b!8659 () Bool)

(assert (= bs!2362 (and b!8659 b!8656)))

(declare-fun lambda!425 () Int)

(assert (=> bs!2362 (= lambda!425 lambda!422)))

(declare-fun d!5395 () Bool)

(declare-fun res!7148 () Bool)

(declare-fun e!4488 () Bool)

(assert (=> d!5395 (=> (not res!7148) (not e!4488))))

(assert (=> d!5395 (= res!7148 (= (size!277 xx!50) #b00000000000000000000000000000101))))

(assert (=> d!5395 (= (xxInv!0 xx!50) e!4488)))

(declare-fun all5!0 (array!635 Int) Bool)

(assert (=> b!8659 (= e!4488 (all5!0 xx!50 lambda!425))))

(assert (= (and d!5395 res!7148) b!8659))

(declare-fun m!16365 () Bool)

(assert (=> b!8659 m!16365))

(assert (=> b!8650 d!5395))

(declare-fun d!5397 () Bool)

(assert (=> d!5397 (= (array_inv!227 f!79) (bvsge (size!277 f!79) #b00000000000000000000000000000000))))

(assert (=> start!1639 d!5397))

(declare-fun d!5399 () Bool)

(assert (=> d!5399 (= (array_inv!227 q!51) (bvsge (size!277 q!51) #b00000000000000000000000000000000))))

(assert (=> start!1639 d!5399))

(declare-fun d!5401 () Bool)

(assert (=> d!5401 (= (array_inv!227 xx!50) (bvsge (size!277 xx!50) #b00000000000000000000000000000000))))

(assert (=> start!1639 d!5401))

(declare-fun b!8672 () Bool)

(declare-fun res!7160 () Bool)

(declare-fun e!4497 () Bool)

(assert (=> b!8672 (=> (not res!7160) (not e!4497))))

(assert (=> b!8672 (= res!7160 (fInv!0 lt!4172))))

(declare-fun b!8673 () Bool)

(declare-fun e!4498 () tuple3!148)

(declare-fun lt!4188 () (_ BitVec 32))

(declare-datatypes ((tuple2!58 0))(
  ( (tuple2!59 (_1!204 Unit!597) (_2!204 array!635)) )
))
(declare-fun lt!4193 () tuple2!58)

(declare-fun Unit!600 () Unit!597)

(assert (=> b!8673 (= e!4498 (tuple3!149 Unit!600 lt!4188 (_2!204 lt!4193)))))

(declare-fun b!8674 () Bool)

(declare-fun res!7157 () Bool)

(declare-fun e!4496 () Bool)

(assert (=> b!8674 (=> (not res!7157) (not e!4496))))

(declare-fun lt!4192 () tuple3!148)

(assert (=> b!8674 (= res!7157 (fInv!0 (_3!174 lt!4192)))))

(declare-fun d!5403 () Bool)

(assert (=> d!5403 e!4496))

(declare-fun res!7158 () Bool)

(assert (=> d!5403 (=> (not res!7158) (not e!4496))))

(declare-fun lt!4189 () (_ BitVec 32))

(assert (=> d!5403 (= res!7158 (and (or (and (bvsle #b00000000000000000000000000000000 (_2!203 lt!4192)) (= (bvand lt!4189 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000)) (not (= (bvand lt!4189 #b10000000000000000000000000000000) (bvand (bvadd lt!4189 jz!36) #b10000000000000000000000000000000)))) (bvsgt #b00000000000000000000000000000000 (_2!203 lt!4192)) (let ((lhs!268 (bvadd lt!4189 jz!36))) (or (not (= (bvand lhs!268 #b10000000000000000000000000000000) #b00000000000000000000000000000000)) (= (bvand lhs!268 #b10000000000000000000000000000000) (bvand (bvadd lhs!268 #b00000000000000000000000000000001) #b10000000000000000000000000000000))))) (or (bvsgt #b00000000000000000000000000000000 (_2!203 lt!4192)) (not (= (bvand lt!4189 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000))) (= (bvand lt!4189 #b10000000000000000000000000000000) (bvand (bvadd lt!4189 jz!36) #b10000000000000000000000000000000))) (bvsle #b00000000000000000000000000000000 (_2!203 lt!4192)) (bvsle (_2!203 lt!4192) (bvadd lt!4189 jz!36 #b00000000000000000000000000000001))))))

(assert (=> d!5403 (= lt!4192 e!4498)))

(declare-fun c!964 () Bool)

(assert (=> d!5403 (= c!964 (bvsle lt!4188 (bvadd lt!4189 jz!36)))))

(assert (=> d!5403 (= lt!4188 (bvadd lt!4175 #b00000000000000000000000000000001))))

(declare-fun lt!4190 () (_ BitVec 32))

(declare-fun Unit!601 () Unit!597)

(declare-fun Unit!602 () Unit!597)

(assert (=> d!5403 (= lt!4193 (ite (bvsge (bvadd (bvsub lt!4190 lt!4189) lt!4175) #b00000000000000000000000000000000) (tuple2!59 Unit!601 (array!636 (store (arr!277 lt!4172) lt!4175 ((_ to_fp 11 53) roundNearestTiesToEven (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 32))) #b00000000000000000000000000000000) #b00000000000000000000000000000000 #b00000000101000101111100110000011) #b00000000000000000000000000000001 #b00000000011011100100111001000100) #b00000000000000000000000000001010 #b00000000110001010110000110110111) #b00000000000000000000000000001011 #b00000000001001000110111000111010) #b00000000000000000000000000001100 #b00000000010000100100110111010010) #b00000000000000000000000000001101 #b00000000111000000000011001001001) #b00000000000000000000000000001110 #b00000000001011101110101000001001) #b00000000000000000000000000001111 #b00000000110100011001001000011100) #b00000000000000000000000000010000 #b00000000111111100001110111101011) #b00000000000000000000000000010001 #b00000000000111001011000100101001) #b00000000000000000000000000010010 #b00000000101001110011111011101000) #b00000000000000000000000000010011 #b00000000100000100011010111110101) #b00000000000000000000000000000010 #b00000000000101010010100111111100) #b00000000000000000000000000010100 #b00000000001011101011101101000100) #b00000000000000000000000000010101 #b00000000100001001110100110011100) #b00000000000000000000000000010110 #b00000000011100000010011010110100) #b00000000000000000000000000010111 #b00000000010111110111111001000001) #b00000000000000000000000000011000 #b00000000001110011001000111010110) #b00000000000000000000000000011001 #b00000000001110011000001101010011) #b00000000000000000000000000011010 #b00000000001110011111010010011100) #b00000000000000000000000000011011 #b00000000100001000101111110001011) #b00000000000000000000000000011100 #b00000000101111011111100100101000) #b00000000000000000000000000011101 #b00000000001110110001111111111000) #b00000000000000000000000000000011 #b00000000001001110101011111010001) #b00000000000000000000000000011110 #b00000000100101111111111111011110) #b00000000000000000000000000011111 #b00000000000001011001100000001111) #b00000000000000000000000000100000 #b00000000111011110010111100010001) #b00000000000000000000000000100001 #b00000000100010110101101000001010) #b00000000000000000000000000100010 #b00000000011011010001111101101101) #b00000000000000000000000000100011 #b00000000001101100111111011001111) #b00000000000000000000000000100100 #b00000000001001111100101100001001) #b00000000000000000000000000100101 #b00000000101101110100111101000110) #b00000000000000000000000000100110 #b00000000001111110110011010011110) #b00000000000000000000000000100111 #b00000000010111111110101000101101) #b00000000000000000000000000000100 #b00000000111101010011010011011101) #b00000000000000000000000000101000 #b00000000011101010010011110111010) #b00000000000000000000000000101001 #b00000000110001111110101111100101) #b00000000000000000000000000101010 #b00000000111100010111101100111101) #b00000000000000000000000000101011 #b00000000000001110011100111110111) #b00000000000000000000000000101100 #b00000000100010100101001010010010) #b00000000000000000000000000101101 #b00000000111010100110101111111011) #b00000000000000000000000000101110 #b00000000010111111011000100011111) #b00000000000000000000000000101111 #b00000000100011010101110100001000) #b00000000000000000000000000110000 #b00000000010101100000001100110000) #b00000000000000000000000000110001 #b00000000010001101111110001111011) #b00000000000000000000000000000101 #b00000000110000001101101101100010) #b00000000000000000000000000110010 #b00000000011010111010101111110000) #b00000000000000000000000000110011 #b00000000110011111011110000100000) #b00000000000000000000000000110100 #b00000000100110101111010000110110) #b00000000000000000000000000110101 #b00000000000111011010100111100011) #b00000000000000000000000000110110 #b00000000100100010110000101011110) #b00000000000000000000000000110111 #b00000000111001100001101100001000) #b00000000000000000000000000111000 #b00000000011001011001100110000101) #b00000000000000000000000000111001 #b00000000010111110001010010100000) #b00000000000000000000000000111010 #b00000000011010000100000010001101) #b00000000000000000000000000111011 #b00000000111111111101100010000000) #b00000000000000000000000000000110 #b00000000100101011001100100111100) #b00000000000000000000000000111100 #b00000000010011010111001100100111) #b00000000000000000000000000111101 #b00000000001100010000011000000110) #b00000000000000000000000000111110 #b00000000000101010101011011001010) #b00000000000000000000000000111111 #b00000000011100111010100011001001) #b00000000000000000000000001000000 #b00000000011000001110001001111011) #b00000000000000000000000001000001 #b00000000110000001000110001101011) #b00000000000000000000000000000111 #b00000000010000111001000001000001) #b00000000000000000000000000001000 #b00000000111111100101000101100011) #b00000000000000000000000000001001 #b00000000101010111101111010111011) (bvadd (bvsub lt!4190 lt!4189) lt!4175)))) (size!277 lt!4172))) (tuple2!59 Unit!602 lt!4172)))))

(assert (=> d!5403 e!4497))

(declare-fun res!7159 () Bool)

(assert (=> d!5403 (=> (not res!7159) (not e!4497))))

(assert (=> d!5403 (= res!7159 (and (bvsle #b00000000000000000000000000000000 lt!4175) (bvsle lt!4175 (bvadd lt!4189 jz!36 #b00000000000000000000000000000001))))))

(declare-fun lt!4191 () (_ BitVec 32))

(assert (=> d!5403 (= lt!4190 (ite (bvslt lt!4191 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!4191))))

(assert (=> d!5403 (= lt!4191 (bvsdiv (bvsub e!19 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(assert (=> d!5403 (= lt!4189 (bvsub (size!277 xx!50) #b00000000000000000000000000000001))))

(assert (=> d!5403 (= (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4175 lt!4172) lt!4192)))

(declare-fun b!8675 () Bool)

(assert (=> b!8675 (= e!4497 (bvsle lt!4175 (bvadd lt!4189 jz!36)))))

(declare-fun b!8676 () Bool)

(assert (=> b!8676 (= e!4498 (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4188 (_2!204 lt!4193)))))

(declare-fun b!8677 () Bool)

(assert (=> b!8677 (= e!4496 (bvsgt (_2!203 lt!4192) (bvadd lt!4189 jz!36)))))

(assert (=> b!8677 (or (not (= (bvand lt!4189 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000))) (= (bvand lt!4189 #b10000000000000000000000000000000) (bvand (bvadd lt!4189 jz!36) #b10000000000000000000000000000000)))))

(assert (= (and d!5403 res!7159) b!8672))

(assert (= (and b!8672 res!7160) b!8675))

(assert (= (and d!5403 c!964) b!8676))

(assert (= (and d!5403 (not c!964)) b!8673))

(assert (= (and d!5403 res!7158) b!8674))

(assert (= (and b!8674 res!7157) b!8677))

(declare-fun m!16367 () Bool)

(assert (=> b!8672 m!16367))

(declare-fun m!16369 () Bool)

(assert (=> b!8674 m!16369))

(declare-fun m!16371 () Bool)

(assert (=> d!5403 m!16371))

(declare-fun m!16373 () Bool)

(assert (=> d!5403 m!16373))

(declare-fun m!16375 () Bool)

(assert (=> b!8676 m!16375))

(assert (=> b!8653 d!5403))

(declare-fun bs!2363 () Bool)

(declare-fun b!8680 () Bool)

(assert (= bs!2363 (and b!8680 b!8656)))

(declare-fun lambda!428 () Int)

(assert (=> bs!2363 (not (= lambda!428 lambda!422))))

(declare-fun bs!2364 () Bool)

(assert (= bs!2364 (and b!8680 b!8659)))

(assert (=> bs!2364 (not (= lambda!428 lambda!425))))

(declare-fun d!5405 () Bool)

(declare-fun res!7163 () Bool)

(declare-fun e!4501 () Bool)

(assert (=> d!5405 (=> (not res!7163) (not e!4501))))

(assert (=> d!5405 (= res!7163 (= (size!277 q!51) #b00000000000000000000000000010100))))

(assert (=> d!5405 (= (qInv!0 q!51) e!4501)))

(assert (=> b!8680 (= e!4501 (all20!0 q!51 lambda!428))))

(assert (= (and d!5405 res!7163) b!8680))

(declare-fun m!16377 () Bool)

(assert (=> b!8680 m!16377))

(assert (=> b!8652 d!5405))

(push 1)

(assert (not b!8672))

(assert (not b!8656))

(assert (not b!8659))

(assert (not b!8674))

(assert (not b!8676))

(assert (not b!8680))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

