; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2643 () Bool)

(assert start!2643)

(declare-datatypes ((array!1030 0))(
  ( (array!1031 (arr!449 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!449 (_ BitVec 32))) )
))
(declare-fun qq!34 () array!1030)

(assert (=> start!2643 (and (= (size!449 qq!34) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!449 qq!34) #b00000000000000000000000000000000)) (fp.leq (select (arr!449 qq!34) #b00000000000000000000000000000000) (fp #b0 #b01111111101 #b1111111111111111111111000000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!449 qq!34) #b00000000000000000000000000000001)) (fp.leq (select (arr!449 qq!34) #b00000000000000000000000000000001) (fp #b0 #b01111100110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!449 qq!34) #b00000000000000000000000000000010)) (fp.leq (select (arr!449 qq!34) #b00000000000000000000000000000010) (fp #b0 #b01111001110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!449 qq!34) #b00000000000000000000000000000011)) (fp.leq (select (arr!449 qq!34) #b00000000000000000000000000000011) (fp #b0 #b01110110110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!449 qq!34) #b00000000000000000000000000000100)) (fp.leq (select (arr!449 qq!34) #b00000000000000000000000000000100) (fp #b0 #b01110011110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!449 qq!34) #b00000000000000000000000000000101)) (fp.leq (select (arr!449 qq!34) #b00000000000000000000000000000101) (fp #b0 #b01110000110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!449 qq!34) #b00000000000000000000000000000110)) (fp.leq (select (arr!449 qq!34) #b00000000000000000000000000000110) (fp #b0 #b01101101110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!449 qq!34) #b00000000000000000000000000000111)) (fp.leq (select (arr!449 qq!34) #b00000000000000000000000000000111) (fp #b0 #b01101010110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!449 qq!34) #b00000000000000000000000000001000)) (fp.leq (select (arr!449 qq!34) #b00000000000000000000000000001000) (fp #b0 #b01100111110 #b1111111111111111111111100000000000000000000000000000)) (bvsge #b00000000000000000000000000001001 (size!449 qq!34)))))

(declare-fun array_inv!398 (array!1030) Bool)

(assert (=> start!2643 (array_inv!398 qq!34)))

(declare-fun bs!2896 () Bool)

(assert (= bs!2896 start!2643))

(declare-fun m!22621 () Bool)

(assert (=> bs!2896 m!22621))

(declare-fun m!22623 () Bool)

(assert (=> bs!2896 m!22623))

(declare-fun m!22625 () Bool)

(assert (=> bs!2896 m!22625))

(declare-fun m!22627 () Bool)

(assert (=> bs!2896 m!22627))

(declare-fun m!22629 () Bool)

(assert (=> bs!2896 m!22629))

(declare-fun m!22631 () Bool)

(assert (=> bs!2896 m!22631))

(declare-fun m!22633 () Bool)

(assert (=> bs!2896 m!22633))

(declare-fun m!22635 () Bool)

(assert (=> bs!2896 m!22635))

(declare-fun m!22637 () Bool)

(assert (=> bs!2896 m!22637))

(declare-fun m!22639 () Bool)

(assert (=> bs!2896 m!22639))

(push 1)

(assert (not start!2643))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

