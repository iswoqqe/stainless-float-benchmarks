; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!2103 () Bool)

(assert start!2103)

(declare-fun b!10406 () Bool)

(declare-fun res!8307 () Bool)

(declare-fun e!6038 () Bool)

(assert (=> b!10406 (=> (not res!8307) (not e!6038))))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-fun jz!77 () (_ BitVec 32))

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!10406 (= res!8307 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun c!1260 () Bool)

(declare-fun bm!11 () Bool)

(declare-datatypes ((tuple2!94 0))(
  ( (tuple2!95 (_1!252 (_ FloatingPoint 11 53)) (_2!252 (_ FloatingPoint 11 53))) )
))
(declare-fun call!14 () tuple2!94)

(declare-datatypes ((array!779 0))(
  ( (array!780 (arr!343 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!343 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!779)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!94)

(assert (=> bm!11 (= call!14 (fast2Sum!0 (ite c!1260 s!25 (select (arr!343 fq!120) i!347)) (ite c!1260 (select (arr!343 fq!120) i!347) s!25)))))

(declare-fun b!10408 () Bool)

(declare-fun e!6040 () tuple2!94)

(assert (=> b!10408 (= e!6040 call!14)))

(declare-fun b!10409 () Bool)

(declare-fun res!8306 () Bool)

(assert (=> b!10409 (=> (not res!8306) (not e!6038))))

(declare-fun fqInv!0 (array!779) Bool)

(assert (=> b!10409 (= res!8306 (fqInv!0 fq!120))))

(declare-fun b!10410 () Bool)

(declare-fun lt!5385 () tuple2!94)

(assert (=> b!10410 (= e!6038 (and (fp.geq (_1!252 lt!5385) (fp.add roundNearestTiesToEven c!23 (_2!252 lt!5385))) (let ((b!7 (fp.add roundNearestTiesToEven c!23 (_2!252 lt!5385)))) (let ((fp!68 (fp.add roundNearestTiesToEven (_1!252 lt!5385) b!7))) (and (not (fp.isInfinite fp!68)) (not (fp.isNaN fp!68)) (not (fp.geq (ite (fp.lt (_1!252 lt!5385) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (fp.neg (_1!252 lt!5385)) (_1!252 lt!5385)) (ite (fp.lt b!7 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (fp.neg b!7) b!7))))))))))

(assert (=> b!10410 (= lt!5385 e!6040)))

(assert (=> b!10410 (= c!1260 (fp.geq s!25 (select (arr!343 fq!120) i!347)))))

(declare-fun b!10407 () Bool)

(assert (=> b!10407 (= e!6040 call!14)))

(declare-fun res!8308 () Bool)

(assert (=> start!2103 (=> (not res!8308) (not e!6038))))

(assert (=> start!2103 (= res!8308 (= (size!343 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2103 e!6038))

(assert (=> start!2103 true))

(declare-fun array_inv!292 (array!779) Bool)

(assert (=> start!2103 (array_inv!292 fq!120)))

(assert (= (and start!2103 res!8308) b!10409))

(assert (= (and b!10409 res!8306) b!10406))

(assert (= (and b!10406 res!8307) b!10410))

(assert (= (and b!10410 c!1260) b!10407))

(assert (= (and b!10410 (not c!1260)) b!10408))

(assert (= (or b!10407 b!10408) bm!11))

(declare-fun m!14839 () Bool)

(assert (=> start!2103 m!14839))

(declare-fun m!14841 () Bool)

(assert (=> b!10406 m!14841))

(declare-fun m!14843 () Bool)

(assert (=> bm!11 m!14843))

(declare-fun m!14845 () Bool)

(assert (=> bm!11 m!14845))

(declare-fun m!14847 () Bool)

(assert (=> b!10409 m!14847))

(assert (=> b!10410 m!14843))

(check-sat (not b!10409) (not start!2103) (not bm!11))
(check-sat)
(get-model)

(declare-fun d!4193 () Bool)

(assert (=> d!4193 (= (fqInv!0 fq!120) (and (= (size!343 fq!120) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000000)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000001)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000010)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000011)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000100)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000101)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000110)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000111)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001000)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001000) (fp #b0 #b01101000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001001)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001001) (fp #b0 #b01100101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001010)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001010) (fp #b0 #b01100010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001011)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001011) (fp #b0 #b01011111001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001100)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001100) (fp #b0 #b01011100001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001101)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001101) (fp #b0 #b01011001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001110)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001110) (fp #b0 #b01010110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001111)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001111) (fp #b0 #b01010011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010000)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010000) (fp #b0 #b01010000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010001)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010001) (fp #b0 #b01001101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010010)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010010) (fp #b0 #b01001010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010011)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010011) (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000))))))

(declare-fun bs!1727 () Bool)

(assert (= bs!1727 d!4193))

(declare-fun m!14849 () Bool)

(assert (=> bs!1727 m!14849))

(declare-fun m!14851 () Bool)

(assert (=> bs!1727 m!14851))

(declare-fun m!14853 () Bool)

(assert (=> bs!1727 m!14853))

(declare-fun m!14855 () Bool)

(assert (=> bs!1727 m!14855))

(declare-fun m!14857 () Bool)

(assert (=> bs!1727 m!14857))

(declare-fun m!14859 () Bool)

(assert (=> bs!1727 m!14859))

(declare-fun m!14861 () Bool)

(assert (=> bs!1727 m!14861))

(declare-fun m!14863 () Bool)

(assert (=> bs!1727 m!14863))

(declare-fun m!14865 () Bool)

(assert (=> bs!1727 m!14865))

(declare-fun m!14867 () Bool)

(assert (=> bs!1727 m!14867))

(declare-fun m!14869 () Bool)

(assert (=> bs!1727 m!14869))

(declare-fun m!14871 () Bool)

(assert (=> bs!1727 m!14871))

(declare-fun m!14873 () Bool)

(assert (=> bs!1727 m!14873))

(declare-fun m!14875 () Bool)

(assert (=> bs!1727 m!14875))

(declare-fun m!14877 () Bool)

(assert (=> bs!1727 m!14877))

(declare-fun m!14879 () Bool)

(assert (=> bs!1727 m!14879))

(declare-fun m!14881 () Bool)

(assert (=> bs!1727 m!14881))

(declare-fun m!14883 () Bool)

(assert (=> bs!1727 m!14883))

(declare-fun m!14885 () Bool)

(assert (=> bs!1727 m!14885))

(declare-fun m!14887 () Bool)

(assert (=> bs!1727 m!14887))

(assert (=> b!10409 d!4193))

(declare-fun d!4195 () Bool)

(assert (=> d!4195 (= (array_inv!292 fq!120) (bvsge (size!343 fq!120) #b00000000000000000000000000000000))))

(assert (=> start!2103 d!4195))

(declare-fun d!4197 () Bool)

(declare-fun lt!5390 () tuple2!94)

(assert (=> d!4197 (fp.eq (fp.add roundNearestTiesToEven (_1!252 lt!5390) (_2!252 lt!5390)) (_1!252 lt!5390))))

(declare-fun lt!5391 () (_ FloatingPoint 11 53))

(assert (=> d!4197 (= lt!5390 (tuple2!95 lt!5391 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (ite c!1260 s!25 (select (arr!343 fq!120) i!347)) lt!5391) (ite c!1260 (select (arr!343 fq!120) i!347) s!25))))))

(assert (=> d!4197 (= lt!5391 (fp.add roundNearestTiesToEven (ite c!1260 s!25 (select (arr!343 fq!120) i!347)) (ite c!1260 (select (arr!343 fq!120) i!347) s!25)))))

(assert (=> d!4197 (= (fast2Sum!0 (ite c!1260 s!25 (select (arr!343 fq!120) i!347)) (ite c!1260 (select (arr!343 fq!120) i!347) s!25)) lt!5390)))

(assert (=> bm!11 d!4197))

(check-sat)
