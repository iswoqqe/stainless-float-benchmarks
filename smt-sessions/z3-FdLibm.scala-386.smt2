; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!2133 () Bool)

(assert start!2133)

(declare-fun b!10780 () Bool)

(declare-fun e!6114 () Bool)

(declare-datatypes ((tuple2!94 0))(
  ( (tuple2!95 (_1!252 (_ FloatingPoint 11 53)) (_2!252 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5457 () tuple2!94)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!10780 (= e!6114 (and (fp.geq (_1!252 lt!5457) (fp.add roundNearestTiesToEven c!23 (_2!252 lt!5457))) (let ((b!7 (fp.add roundNearestTiesToEven c!23 (_2!252 lt!5457)))) (let ((fp!68 (fp.add roundNearestTiesToEven (_1!252 lt!5457) b!7))) (and (not (fp.isInfinite fp!68)) (not (fp.isNaN fp!68)) (not (fp.geq (ite (fp.lt (_1!252 lt!5457) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (fp.neg (_1!252 lt!5457)) (_1!252 lt!5457)) (ite (fp.lt b!7 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (fp.neg b!7) b!7))))))))))

(declare-fun e!6113 () tuple2!94)

(assert (=> b!10780 (= lt!5457 e!6113)))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun c!1278 () Bool)

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-datatypes ((array!782 0))(
  ( (array!783 (arr!343 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!343 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!782)

(assert (=> b!10780 (= c!1278 (fp.geq s!25 (select (arr!343 fq!120) i!347)))))

(declare-fun b!10781 () Bool)

(declare-fun res!8644 () Bool)

(assert (=> b!10781 (=> (not res!8644) (not e!6114))))

(declare-fun fqInv!0 (array!782) Bool)

(assert (=> b!10781 (= res!8644 (fqInv!0 fq!120))))

(declare-fun bm!11 () Bool)

(declare-fun call!14 () tuple2!94)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!94)

(assert (=> bm!11 (= call!14 (fast2Sum!0 (ite c!1278 s!25 (select (arr!343 fq!120) i!347)) (ite c!1278 (select (arr!343 fq!120) i!347) s!25)))))

(declare-fun res!8646 () Bool)

(assert (=> start!2133 (=> (not res!8646) (not e!6114))))

(assert (=> start!2133 (= res!8646 (= (size!343 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2133 e!6114))

(assert (=> start!2133 true))

(declare-fun array_inv!292 (array!782) Bool)

(assert (=> start!2133 (array_inv!292 fq!120)))

(declare-fun b!10782 () Bool)

(assert (=> b!10782 (= e!6113 call!14)))

(declare-fun b!10783 () Bool)

(declare-fun res!8645 () Bool)

(assert (=> b!10783 (=> (not res!8645) (not e!6114))))

(declare-fun jz!77 () (_ BitVec 32))

(assert (=> b!10783 (= res!8645 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!10784 () Bool)

(assert (=> b!10784 (= e!6113 call!14)))

(assert (= (and start!2133 res!8646) b!10781))

(assert (= (and b!10781 res!8644) b!10783))

(assert (= (and b!10783 res!8645) b!10780))

(assert (= (and b!10780 c!1278) b!10784))

(assert (= (and b!10780 (not c!1278)) b!10782))

(assert (= (or b!10784 b!10782) bm!11))

(declare-fun m!16665 () Bool)

(assert (=> b!10780 m!16665))

(assert (=> bm!11 m!16665))

(declare-fun m!16667 () Bool)

(assert (=> bm!11 m!16667))

(declare-fun m!16669 () Bool)

(assert (=> start!2133 m!16669))

(declare-fun m!16671 () Bool)

(assert (=> b!10783 m!16671))

(declare-fun m!16673 () Bool)

(assert (=> b!10781 m!16673))

(check-sat (not bm!11) (not b!10781) (not start!2133))
(check-sat)
(get-model)

(declare-fun d!4903 () Bool)

(declare-fun lt!5462 () tuple2!94)

(assert (=> d!4903 (fp.eq (fp.add roundNearestTiesToEven (_1!252 lt!5462) (_2!252 lt!5462)) (_1!252 lt!5462))))

(declare-fun lt!5463 () (_ FloatingPoint 11 53))

(assert (=> d!4903 (= lt!5462 (tuple2!95 lt!5463 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (ite c!1278 s!25 (select (arr!343 fq!120) i!347)) lt!5463) (ite c!1278 (select (arr!343 fq!120) i!347) s!25))))))

(assert (=> d!4903 (= lt!5463 (fp.add roundNearestTiesToEven (ite c!1278 s!25 (select (arr!343 fq!120) i!347)) (ite c!1278 (select (arr!343 fq!120) i!347) s!25)))))

(assert (=> d!4903 (= (fast2Sum!0 (ite c!1278 s!25 (select (arr!343 fq!120) i!347)) (ite c!1278 (select (arr!343 fq!120) i!347) s!25)) lt!5462)))

(assert (=> bm!11 d!4903))

(declare-fun d!4905 () Bool)

(assert (=> d!4905 (= (fqInv!0 fq!120) (and (= (size!343 fq!120) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000000)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000001)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000010)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000011)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000100)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000100) (fp #b0 #b01110100001 #b1001101000011011010011011100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000101)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000101) (fp #b0 #b01110001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000110)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000110) (fp #b0 #b01101110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000000111)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000000111) (fp #b0 #b01101011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001000)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001000) (fp #b0 #b01101000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001001)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001001) (fp #b0 #b01100101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001010)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001010) (fp #b0 #b01100010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001011)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001011) (fp #b0 #b01011111001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001100)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001100) (fp #b0 #b01011100001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001101)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001101) (fp #b0 #b01011001001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001110)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001110) (fp #b0 #b01010110001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000001111)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000001111) (fp #b0 #b01010011001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010000)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010000) (fp #b0 #b01010000001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010001)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010001) (fp #b0 #b01001101001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010010)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010010) (fp #b0 #b01001010001 #b1011101001010010010101001100010110101101101010011000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!343 fq!120) #b00000000000000000000000000010011)) (fp.leq (select (arr!343 fq!120) #b00000000000000000000000000010011) (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000))))))

(declare-fun bs!2186 () Bool)

(assert (= bs!2186 d!4905))

(declare-fun m!16675 () Bool)

(assert (=> bs!2186 m!16675))

(declare-fun m!16677 () Bool)

(assert (=> bs!2186 m!16677))

(declare-fun m!16679 () Bool)

(assert (=> bs!2186 m!16679))

(declare-fun m!16681 () Bool)

(assert (=> bs!2186 m!16681))

(declare-fun m!16683 () Bool)

(assert (=> bs!2186 m!16683))

(declare-fun m!16685 () Bool)

(assert (=> bs!2186 m!16685))

(declare-fun m!16687 () Bool)

(assert (=> bs!2186 m!16687))

(declare-fun m!16689 () Bool)

(assert (=> bs!2186 m!16689))

(declare-fun m!16691 () Bool)

(assert (=> bs!2186 m!16691))

(declare-fun m!16693 () Bool)

(assert (=> bs!2186 m!16693))

(declare-fun m!16695 () Bool)

(assert (=> bs!2186 m!16695))

(declare-fun m!16697 () Bool)

(assert (=> bs!2186 m!16697))

(declare-fun m!16699 () Bool)

(assert (=> bs!2186 m!16699))

(declare-fun m!16701 () Bool)

(assert (=> bs!2186 m!16701))

(declare-fun m!16703 () Bool)

(assert (=> bs!2186 m!16703))

(declare-fun m!16705 () Bool)

(assert (=> bs!2186 m!16705))

(declare-fun m!16707 () Bool)

(assert (=> bs!2186 m!16707))

(declare-fun m!16709 () Bool)

(assert (=> bs!2186 m!16709))

(declare-fun m!16711 () Bool)

(assert (=> bs!2186 m!16711))

(declare-fun m!16713 () Bool)

(assert (=> bs!2186 m!16713))

(assert (=> b!10781 d!4905))

(declare-fun d!4907 () Bool)

(assert (=> d!4907 (= (array_inv!292 fq!120) (bvsge (size!343 fq!120) #b00000000000000000000000000000000))))

(assert (=> start!2133 d!4907))

(check-sat)
