; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!1223 () Bool)

(assert start!1223)

(declare-fun b!5396 () Bool)

(declare-fun res!4296 () Bool)

(declare-fun e!3019 () Bool)

(assert (=> b!5396 (=> (not res!4296) (not e!3019))))

(declare-datatypes ((array!497 0))(
  ( (array!498 (arr!222 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!222 (_ BitVec 32))) )
))
(declare-fun qq!74 () array!497)

(declare-fun qqInv!0 (array!497) Bool)

(assert (=> b!5396 (= res!4296 (qqInv!0 qq!74))))

(declare-fun res!4294 () Bool)

(assert (=> start!1223 (=> (not res!4294) (not e!3019))))

(declare-fun jz!70 () (_ BitVec 32))

(assert (=> start!1223 (= res!4294 (and (bvsle #b00000000000000000000000000000000 jz!70) (bvslt jz!70 #b00000000000000000000000000010100) (= (size!222 qq!74) #b00000000000000000000000000010100)))))

(assert (=> start!1223 e!3019))

(assert (=> start!1223 true))

(declare-fun array_inv!172 (array!497) Bool)

(assert (=> start!1223 (array_inv!172 qq!74)))

(declare-fun fq!78 () array!497)

(assert (=> start!1223 (array_inv!172 fq!78)))

(declare-fun b!5397 () Bool)

(declare-fun res!4293 () Bool)

(assert (=> b!5397 (=> (not res!4293) (not e!3019))))

(declare-fun i!327 () (_ BitVec 32))

(assert (=> b!5397 (= res!4293 (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000))) #b00000000000000000000000000000000)) (fp.leq (select (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000))) #b00000000000000000000000000000000) (fp #b0 #b01111111110 #b1001001000011111101100001101101111000000100110000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000001)) (fp.leq (select (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000001) (fp #b0 #b01111101000 #b0001101000100000100011001001010011001110101111100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000010 (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000010)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001))) (fp.mul roundNearestTiesToEven (fp #b0 #b01111001111 #b1000010001101001100010000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000010)) (fp.leq (select (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000010 (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000010)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001))) (fp.mul roundNearestTiesToEven (fp #b0 #b01111001111 #b1000010001101001100010000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000010) (fp #b0 #b01111010000 #b1100110001001011101000011101001010011001111110100000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000010 (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000010)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001))) (fp.mul roundNearestTiesToEven (fp #b0 #b01111001111 #b1000010001101001100010000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000011 (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000011)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000010))) (fp.mul roundNearestTiesToEven (fp #b0 #b01111001111 #b1000010001101001100010000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001))) (fp.mul roundNearestTiesToEven (fp #b0 #b01110110111 #b1000110011000101000101100000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000011)) (fp.leq (select (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000))) #b00000000000000000000000000000001 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000010 (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000010)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001))) (fp.mul roundNearestTiesToEven (fp #b0 #b01111001111 #b1000010001101001100010000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000011 (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000011)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000010))) (fp.mul roundNearestTiesToEven (fp #b0 #b01111001111 #b1000010001101001100010000000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000001))) (fp.mul roundNearestTiesToEven (fp #b0 #b01110110111 #b1000110011000101000101100000000000000000000000000000) (select (arr!222 qq!74) #b00000000000000000000000000000000)))) #b00000000000000000000000000000011) (fp #b0 #b01110111001 #b0100100001001011101001000100011000011011101101111000)) (bvsle #b00000000000000000000000000000100 i!327) (bvsle i!327 jz!70) (= (size!222 fq!78) #b00000000000000000000000000010100)))))

(declare-fun b!5399 () Bool)

(assert (=> b!5399 (= e!3019 (and (bvslt i!327 jz!70) (let ((fw0!4 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (arr!222 qq!74) i!327)))) (let ((fw1!4 (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (arr!222 qq!74) (bvsub i!327 #b00000000000000000000000000000001))))) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) fw0!4) (fp.leq fw0!4 (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001001000011111101101000000000000000000000000000000) (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111101 #b1111111111111111111111000000000000000000000000000000)) #b00000000000000000000000000000001 (fp #b0 #b01111100110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001010 (fp #b0 #b01100001110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011110110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011011110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011000110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010101110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010010110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01001111110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001100110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001001110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000010011 (fp #b0 #b01000110110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000010 (fp #b0 #b01111001110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000011 (fp #b0 #b01110110110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000100 (fp #b0 #b01110011110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110000110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101101110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101010110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01100111110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100100110 #b1111111111111111111111100000000000000000000000000000)) i!327))) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) fw1!4) (fp.leq fw1!4 (fp.mul roundNearestTiesToEven (fp #b0 #b01111100111 #b0100010001000010110100000000000000000000000000000000) (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111101 #b1111111111111111111111000000000000000000000000000000)) #b00000000000000000000000000000001 (fp #b0 #b01111100110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001010 (fp #b0 #b01100001110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011110110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011011110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011000110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010101110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010010110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01001111110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001100110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001001110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000010011 (fp #b0 #b01000110110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000010 (fp #b0 #b01111001110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000011 (fp #b0 #b01110110110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000100 (fp #b0 #b01110011110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110000110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101101110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101010110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01100111110 #b1111111111111111111111100000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100100110 #b1111111111111111111111100000000000000000000000000000)) (bvsub i!327 #b00000000000000000000000000000001)))) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111001111 #b1000010001101001100010000000000000000000000000000000) (select (arr!222 qq!74) (bvsub i!327 #b00000000000000000000000000000010)))) (not (= (bvand i!327 #b10000000000000000000000000000000) #b00000000000000000000000000000000)) (not (= (bvand i!327 #b10000000000000000000000000000000) (bvand (bvsub i!327 #b00000000000000000000000000000010) #b10000000000000000000000000000000))))))))))

(declare-fun b!5398 () Bool)

(declare-fun res!4295 () Bool)

(assert (=> b!5398 (=> (not res!4295) (not e!3019))))

(declare-fun fqInv!0 (array!497) Bool)

(assert (=> b!5398 (= res!4295 (fqInv!0 fq!78))))

(assert (= (and start!1223 res!4294) b!5396))

(assert (= (and b!5396 res!4296) b!5397))

(assert (= (and b!5397 res!4293) b!5398))

(assert (= (and b!5398 res!4295) b!5399))

(declare-fun m!8117 () Bool)

(assert (=> b!5398 m!8117))

(declare-fun m!8119 () Bool)

(assert (=> b!5396 m!8119))

(declare-fun m!8121 () Bool)

(assert (=> start!1223 m!8121))

(declare-fun m!8123 () Bool)

(assert (=> start!1223 m!8123))

(declare-fun m!8125 () Bool)

(assert (=> b!5399 m!8125))

(declare-fun m!8127 () Bool)

(assert (=> b!5399 m!8127))

(declare-fun m!8129 () Bool)

(assert (=> b!5399 m!8129))

(declare-fun m!8131 () Bool)

(assert (=> b!5399 m!8131))

(declare-fun m!8133 () Bool)

(assert (=> b!5399 m!8133))

(declare-fun m!8135 () Bool)

(assert (=> b!5397 m!8135))

(declare-fun m!8137 () Bool)

(assert (=> b!5397 m!8137))

(declare-fun m!8139 () Bool)

(assert (=> b!5397 m!8139))

(declare-fun m!8141 () Bool)

(assert (=> b!5397 m!8141))

(declare-fun m!8143 () Bool)

(assert (=> b!5397 m!8143))

(declare-fun m!8145 () Bool)

(assert (=> b!5397 m!8145))

(declare-fun m!8147 () Bool)

(assert (=> b!5397 m!8147))

(declare-fun m!8149 () Bool)

(assert (=> b!5397 m!8149))

(declare-fun m!8151 () Bool)

(assert (=> b!5397 m!8151))

(declare-fun m!8153 () Bool)

(assert (=> b!5397 m!8153))

(declare-fun m!8155 () Bool)

(assert (=> b!5397 m!8155))

(declare-fun m!8157 () Bool)

(assert (=> b!5397 m!8157))

(check-sat (not b!5398) (not start!1223) (not b!5396))
(check-sat)
