; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!2185 () Bool)

(assert start!2185)

(declare-fun b!10988 () Bool)

(declare-fun e!6268 () Bool)

(declare-fun e!6266 () Bool)

(assert (=> b!10988 (= e!6268 e!6266)))

(declare-fun res!8803 () Bool)

(assert (=> b!10988 (=> (not res!8803) (not e!6266))))

(declare-fun lt!5545 () (_ BitVec 32))

(assert (=> b!10988 (= res!8803 (bvsge lt!5545 #b00000000000000000000000000000000))))

(declare-fun i!347 () (_ BitVec 32))

(assert (=> b!10988 (= lt!5545 (bvsub i!347 #b00000000000000000000000000000001))))

(declare-datatypes ((tuple2!110 0))(
  ( (tuple2!111 (_1!262 (_ FloatingPoint 11 53)) (_2!262 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5544 () tuple2!110)

(declare-fun lt!5546 () tuple2!110)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!110)

(assert (=> b!10988 (= lt!5544 (fast2Sum!0 (_1!262 lt!5546) (fp.add roundNearestTiesToEven c!23 (_2!262 lt!5546))))))

(declare-fun b!10989 () Bool)

(declare-fun res!8802 () Bool)

(declare-fun e!6267 () Bool)

(assert (=> b!10989 (=> (not res!8802) (not e!6267))))

(declare-datatypes ((array!819 0))(
  ( (array!820 (arr!360 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!360 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!819)

(declare-fun fqInv!0 (array!819) Bool)

(assert (=> b!10989 (= res!8802 (fqInv!0 fq!120))))

(declare-fun b!10990 () Bool)

(assert (=> b!10990 (= e!6267 e!6268)))

(declare-fun res!8805 () Bool)

(assert (=> b!10990 (=> (not res!8805) (not e!6268))))

(assert (=> b!10990 (= res!8805 (fp.geq (_1!262 lt!5546) (fp.add roundNearestTiesToEven c!23 (_2!262 lt!5546))))))

(declare-fun e!6270 () tuple2!110)

(assert (=> b!10990 (= lt!5546 e!6270)))

(declare-fun c!1302 () Bool)

(declare-fun s!25 () (_ FloatingPoint 11 53))

(assert (=> b!10990 (= c!1302 (fp.geq s!25 (select (arr!360 fq!120) i!347)))))

(declare-fun res!8801 () Bool)

(assert (=> start!2185 (=> (not res!8801) (not e!6267))))

(assert (=> start!2185 (= res!8801 (= (size!360 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2185 e!6267))

(assert (=> start!2185 true))

(declare-fun array_inv!309 (array!819) Bool)

(assert (=> start!2185 (array_inv!309 fq!120)))

(declare-fun call!38 () tuple2!110)

(declare-fun bm!35 () Bool)

(assert (=> bm!35 (= call!38 (fast2Sum!0 (ite c!1302 s!25 (select (arr!360 fq!120) i!347)) (ite c!1302 (select (arr!360 fq!120) i!347) s!25)))))

(declare-fun b!10991 () Bool)

(assert (=> b!10991 (= e!6270 call!38)))

(declare-fun b!10992 () Bool)

(declare-fun res!8804 () Bool)

(assert (=> b!10992 (=> (not res!8804) (not e!6267))))

(declare-fun jz!77 () (_ BitVec 32))

(assert (=> b!10992 (= res!8804 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!10993 () Bool)

(assert (=> b!10993 (= e!6270 call!38)))

(declare-fun b!10994 () Bool)

(declare-datatypes ((Unit!1251 0))(
  ( (Unit!1252) )
))
(declare-datatypes ((tuple4!214 0))(
  ( (tuple4!215 (_1!263 Unit!1251) (_2!263 (_ FloatingPoint 11 53)) (_3!207 (_ BitVec 32)) (_4!107 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5543 () tuple4!214)

(assert (=> b!10994 (= e!6266 (and (bvsle #b11111111111111111111111111111111 (_3!207 lt!5543)) (bvsle (_3!207 lt!5543) (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (_2!263 lt!5543)) (let ((ix!269 (bvadd (_3!207 lt!5543) #b00000000000000000000000000000001))) (or (bvslt ix!269 #b00000000000000000000000000000000) (bvsge ix!269 #b00000000000000000000000000010100)))))))

(declare-fun fqCompressionWhile!0 (array!819 (_ BitVec 32) (_ FloatingPoint 11 53) (_ BitVec 32) (_ FloatingPoint 11 53)) tuple4!214)

(assert (=> b!10994 (= lt!5543 (fqCompressionWhile!0 fq!120 jz!77 (_1!262 lt!5544) lt!5545 (_2!262 lt!5544)))))

(assert (= (and start!2185 res!8801) b!10989))

(assert (= (and b!10989 res!8802) b!10992))

(assert (= (and b!10992 res!8804) b!10990))

(assert (= (and b!10990 c!1302) b!10993))

(assert (= (and b!10990 (not c!1302)) b!10991))

(assert (= (or b!10993 b!10991) bm!35))

(assert (= (and b!10990 res!8805) b!10988))

(assert (= (and b!10988 res!8803) b!10994))

(declare-fun m!16935 () Bool)

(assert (=> b!10992 m!16935))

(declare-fun m!16937 () Bool)

(assert (=> b!10989 m!16937))

(declare-fun m!16939 () Bool)

(assert (=> start!2185 m!16939))

(declare-fun m!16941 () Bool)

(assert (=> b!10994 m!16941))

(declare-fun m!16943 () Bool)

(assert (=> b!10990 m!16943))

(assert (=> bm!35 m!16943))

(declare-fun m!16945 () Bool)

(assert (=> bm!35 m!16945))

(declare-fun m!16947 () Bool)

(assert (=> b!10988 m!16947))

(check-sat (not b!10994) (not bm!35) (not b!10989) (not start!2185) (not b!10988))
(check-sat)
