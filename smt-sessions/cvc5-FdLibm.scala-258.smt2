; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!1627 () Bool)

(assert start!1627)

(declare-fun b!8595 () Bool)

(declare-fun e!4436 () Bool)

(declare-fun e!4437 () Bool)

(assert (=> b!8595 (= e!4436 e!4437)))

(declare-fun res!7099 () Bool)

(assert (=> b!8595 (=> (not res!7099) (not e!4437))))

(declare-fun e!19 () (_ BitVec 32))

(declare-fun lt!4145 () (_ BitVec 32))

(assert (=> b!8595 (= res!7099 (= (bvsub e!19 (bvmul #b00000000000000000000000000011000 (bvadd (ite (bvslt lt!4145 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!4145) #b00000000000000000000000000000001))) #b00000000000000000000000000000000))))

(assert (=> b!8595 (= lt!4145 (bvsdiv (bvsub e!19 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(declare-fun b!8596 () Bool)

(declare-fun res!7103 () Bool)

(declare-fun e!4442 () Bool)

(assert (=> b!8596 (=> (not res!7103) (not e!4442))))

(declare-datatypes ((array!632 0))(
  ( (array!633 (arr!276 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!276 (_ BitVec 32))) )
))
(declare-fun q!51 () array!632)

(declare-fun qInv!0 (array!632) Bool)

(assert (=> b!8596 (= res!7103 (qInv!0 q!51))))

(declare-fun jz!36 () (_ BitVec 32))

(declare-datatypes ((Unit!591 0))(
  ( (Unit!592) )
))
(declare-datatypes ((tuple3!146 0))(
  ( (tuple3!147 (_1!201 Unit!591) (_2!201 (_ BitVec 32)) (_3!173 array!632)) )
))
(declare-fun e!4438 () tuple3!146)

(declare-fun lt!4144 () (_ BitVec 32))

(declare-fun lt!4143 () array!632)

(declare-fun xx!50 () array!632)

(declare-fun b!8597 () Bool)

(declare-fun timesTwoOverPiWhile!0 ((_ BitVec 32) (_ BitVec 32) array!632 (_ BitVec 32) array!632) tuple3!146)

(assert (=> b!8597 (= e!4438 (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4144 lt!4143))))

(declare-fun f!79 () array!632)

(declare-fun i!190 () (_ BitVec 32))

(declare-fun b!8598 () Bool)

(assert (=> b!8598 (= e!4442 (and (bvsle i!190 jz!36) (let ((ix!150 (bvadd i!190 #b00000000000000000000000000000001))) (or (bvslt ix!150 #b00000000000000000000000000000000) (bvsge ix!150 (size!276 f!79))))))))

(declare-fun b!8599 () Bool)

(declare-fun res!7098 () Bool)

(assert (=> b!8599 (=> (not res!7098) (not e!4442))))

(declare-fun fInv!0 (array!632) Bool)

(assert (=> b!8599 (= res!7098 (fInv!0 f!79))))

(declare-fun b!8600 () Bool)

(declare-fun res!7102 () Bool)

(assert (=> b!8600 (=> (not res!7102) (not e!4436))))

(declare-fun xxInv!0 (array!632) Bool)

(assert (=> b!8600 (= res!7102 (xxInv!0 xx!50))))

(declare-fun res!7101 () Bool)

(assert (=> start!1627 (=> (not res!7101) (not e!4436))))

(assert (=> start!1627 (= res!7101 (and (bvsle #b00000000000000000000000000000000 jz!36) (bvsle jz!36 #b00000000000000000000000000001111) (bvsle #b00000000000000000000000000011000 e!19) (bvsle e!19 #b00000000000000000000001111110000) (= (bvsrem e!19 #b00000000000000000000000000011000) #b00000000000000000000000000000000)))))

(assert (=> start!1627 e!4436))

(declare-fun array_inv!226 (array!632) Bool)

(assert (=> start!1627 (array_inv!226 f!79)))

(assert (=> start!1627 (array_inv!226 q!51)))

(assert (=> start!1627 true))

(assert (=> start!1627 (array_inv!226 xx!50)))

(declare-fun b!8601 () Bool)

(declare-fun Unit!593 () Unit!591)

(assert (=> b!8601 (= e!4438 (tuple3!147 Unit!593 lt!4144 lt!4143))))

(declare-fun b!8602 () Bool)

(assert (=> b!8602 (= e!4437 e!4442)))

(declare-fun res!7100 () Bool)

(assert (=> b!8602 (=> (not res!7100) (not e!4442))))

(assert (=> b!8602 (= res!7100 (and (bvsle #b00000000000000000000000000000000 i!190) (bvsle i!190 (bvadd jz!36 #b00000000000000000000000000000001))))))

(declare-fun lt!4142 () tuple3!146)

(assert (=> b!8602 (= lt!4142 e!4438)))

(declare-fun c!955 () Bool)

(assert (=> b!8602 (= c!955 (bvsle lt!4144 (bvadd (bvsub (size!276 xx!50) #b00000000000000000000000000000001) jz!36)))))

(assert (=> b!8602 (= lt!4144 #b00000000000000000000000000000000)))

(assert (=> b!8602 (= lt!4143 (array!633 ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000010100))))

(assert (= (and start!1627 res!7101) b!8600))

(assert (= (and b!8600 res!7102) b!8595))

(assert (= (and b!8595 res!7099) b!8602))

(assert (= (and b!8602 c!955) b!8597))

(assert (= (and b!8602 (not c!955)) b!8601))

(assert (= (and b!8602 res!7100) b!8599))

(assert (= (and b!8599 res!7098) b!8596))

(assert (= (and b!8596 res!7103) b!8598))

(declare-fun m!16319 () Bool)

(assert (=> b!8600 m!16319))

(declare-fun m!16321 () Bool)

(assert (=> start!1627 m!16321))

(declare-fun m!16323 () Bool)

(assert (=> start!1627 m!16323))

(declare-fun m!16325 () Bool)

(assert (=> start!1627 m!16325))

(declare-fun m!16327 () Bool)

(assert (=> b!8599 m!16327))

(declare-fun m!16329 () Bool)

(assert (=> b!8596 m!16329))

(declare-fun m!16331 () Bool)

(assert (=> b!8597 m!16331))

(push 1)

(assert (not start!1627))

(assert (not b!8596))

(assert (not b!8599))

(assert (not b!8597))

(assert (not b!8600))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!5378 () Bool)

(declare-fun res!7106 () Bool)

(declare-fun e!4445 () Bool)

(assert (=> d!5378 (=> (not res!7106) (not e!4445))))

(assert (=> d!5378 (= res!7106 (= (size!276 q!51) #b00000000000000000000000000010100))))

(assert (=> d!5378 (= (qInv!0 q!51) e!4445)))

(declare-fun b!8605 () Bool)

(declare-fun lambda!413 () Int)

(declare-fun all20!0 (array!632 Int) Bool)

(assert (=> b!8605 (= e!4445 (all20!0 q!51 lambda!413))))

(assert (= (and d!5378 res!7106) b!8605))

(declare-fun m!16333 () Bool)

(assert (=> b!8605 m!16333))

(assert (=> b!8596 d!5378))

(declare-fun b!8618 () Bool)

(declare-fun e!4455 () tuple3!146)

(declare-fun lt!4162 () (_ BitVec 32))

(declare-datatypes ((tuple2!56 0))(
  ( (tuple2!57 (_1!202 Unit!591) (_2!202 array!632)) )
))
(declare-fun lt!4163 () tuple2!56)

(declare-fun Unit!594 () Unit!591)

(assert (=> b!8618 (= e!4455 (tuple3!147 Unit!594 lt!4162 (_2!202 lt!4163)))))

(declare-fun b!8619 () Bool)

(declare-fun res!7117 () Bool)

(declare-fun e!4453 () Bool)

(assert (=> b!8619 (=> (not res!7117) (not e!4453))))

(assert (=> b!8619 (= res!7117 (fInv!0 lt!4143))))

(declare-fun d!5380 () Bool)

(declare-fun e!4454 () Bool)

(assert (=> d!5380 e!4454))

(declare-fun res!7115 () Bool)

(assert (=> d!5380 (=> (not res!7115) (not e!4454))))

(declare-fun lt!4160 () (_ BitVec 32))

(declare-fun lt!4158 () tuple3!146)

(assert (=> d!5380 (= res!7115 (and (or (and (bvsle #b00000000000000000000000000000000 (_2!201 lt!4158)) (= (bvand lt!4160 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000)) (not (= (bvand lt!4160 #b10000000000000000000000000000000) (bvand (bvadd lt!4160 jz!36) #b10000000000000000000000000000000)))) (bvsgt #b00000000000000000000000000000000 (_2!201 lt!4158)) (let ((lhs!267 (bvadd lt!4160 jz!36))) (or (not (= (bvand lhs!267 #b10000000000000000000000000000000) #b00000000000000000000000000000000)) (= (bvand lhs!267 #b10000000000000000000000000000000) (bvand (bvadd lhs!267 #b00000000000000000000000000000001) #b10000000000000000000000000000000))))) (or (bvsgt #b00000000000000000000000000000000 (_2!201 lt!4158)) (not (= (bvand lt!4160 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000))) (= (bvand lt!4160 #b10000000000000000000000000000000) (bvand (bvadd lt!4160 jz!36) #b10000000000000000000000000000000))) (bvsle #b00000000000000000000000000000000 (_2!201 lt!4158)) (bvsle (_2!201 lt!4158) (bvadd lt!4160 jz!36 #b00000000000000000000000000000001))))))

(assert (=> d!5380 (= lt!4158 e!4455)))

(declare-fun c!958 () Bool)

(assert (=> d!5380 (= c!958 (bvsle lt!4162 (bvadd lt!4160 jz!36)))))

(assert (=> d!5380 (= lt!4162 (bvadd lt!4144 #b00000000000000000000000000000001))))

(declare-fun lt!4159 () (_ BitVec 32))

(declare-fun Unit!595 () Unit!591)

(declare-fun Unit!596 () Unit!591)

(assert (=> d!5380 (= lt!4163 (ite (bvsge (bvadd (bvsub lt!4159 lt!4160) lt!4144) #b00000000000000000000000000000000) (tuple2!57 Unit!595 (array!633 (store (arr!276 lt!4143) lt!4144 ((_ to_fp 11 53) roundNearestTiesToEven (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 32))) #b00000000000000000000000000000000) #b00000000000000000000000000000000 #b00000000101000101111100110000011) #b00000000000000000000000000000001 #b00000000011011100100111001000100) #b00000000000000000000000000001010 #b00000000110001010110000110110111) #b00000000000000000000000000001011 #b00000000001001000110111000111010) #b00000000000000000000000000001100 #b00000000010000100100110111010010) #b00000000000000000000000000001101 #b00000000111000000000011001001001) #b00000000000000000000000000001110 #b00000000001011101110101000001001) #b00000000000000000000000000001111 #b00000000110100011001001000011100) #b00000000000000000000000000010000 #b00000000111111100001110111101011) #b00000000000000000000000000010001 #b00000000000111001011000100101001) #b00000000000000000000000000010010 #b00000000101001110011111011101000) #b00000000000000000000000000010011 #b00000000100000100011010111110101) #b00000000000000000000000000000010 #b00000000000101010010100111111100) #b00000000000000000000000000010100 #b00000000001011101011101101000100) #b00000000000000000000000000010101 #b00000000100001001110100110011100) #b00000000000000000000000000010110 #b00000000011100000010011010110100) #b00000000000000000000000000010111 #b00000000010111110111111001000001) #b00000000000000000000000000011000 #b00000000001110011001000111010110) #b00000000000000000000000000011001 #b00000000001110011000001101010011) #b00000000000000000000000000011010 #b00000000001110011111010010011100) #b00000000000000000000000000011011 #b00000000100001000101111110001011) #b00000000000000000000000000011100 #b00000000101111011111100100101000) #b00000000000000000000000000011101 #b00000000001110110001111111111000) #b00000000000000000000000000000011 #b00000000001001110101011111010001) #b00000000000000000000000000011110 #b00000000100101111111111111011110) #b00000000000000000000000000011111 #b00000000000001011001100000001111) #b00000000000000000000000000100000 #b00000000111011110010111100010001) #b00000000000000000000000000100001 #b00000000100010110101101000001010) #b00000000000000000000000000100010 #b00000000011011010001111101101101) #b00000000000000000000000000100011 #b00000000001101100111111011001111) #b00000000000000000000000000100100 #b00000000001001111100101100001001) #b00000000000000000000000000100101 #b00000000101101110100111101000110) #b00000000000000000000000000100110 #b00000000001111110110011010011110) #b00000000000000000000000000100111 #b00000000010111111110101000101101) #b00000000000000000000000000000100 #b00000000111101010011010011011101) #b00000000000000000000000000101000 #b00000000011101010010011110111010) #b00000000000000000000000000101001 #b00000000110001111110101111100101) #b00000000000000000000000000101010 #b00000000111100010111101100111101) #b00000000000000000000000000101011 #b00000000000001110011100111110111) #b00000000000000000000000000101100 #b00000000100010100101001010010010) #b00000000000000000000000000101101 #b00000000111010100110101111111011) #b00000000000000000000000000101110 #b00000000010111111011000100011111) #b00000000000000000000000000101111 #b00000000100011010101110100001000) #b00000000000000000000000000110000 #b00000000010101100000001100110000) #b00000000000000000000000000110001 #b00000000010001101111110001111011) #b00000000000000000000000000000101 #b00000000110000001101101101100010) #b00000000000000000000000000110010 #b00000000011010111010101111110000) #b00000000000000000000000000110011 #b00000000110011111011110000100000) #b00000000000000000000000000110100 #b00000000100110101111010000110110) #b00000000000000000000000000110101 #b00000000000111011010100111100011) #b00000000000000000000000000110110 #b00000000100100010110000101011110) #b00000000000000000000000000110111 #b00000000111001100001101100001000) #b00000000000000000000000000111000 #b00000000011001011001100110000101) #b00000000000000000000000000111001 #b00000000010111110001010010100000) #b00000000000000000000000000111010 #b00000000011010000100000010001101) #b00000000000000000000000000111011 #b00000000111111111101100010000000) #b00000000000000000000000000000110 #b00000000100101011001100100111100) #b00000000000000000000000000111100 #b00000000010011010111001100100111) #b00000000000000000000000000111101 #b00000000001100010000011000000110) #b00000000000000000000000000111110 #b00000000000101010101011011001010) #b00000000000000000000000000111111 #b00000000011100111010100011001001) #b00000000000000000000000001000000 #b00000000011000001110001001111011) #b00000000000000000000000001000001 #b00000000110000001000110001101011) #b00000000000000000000000000000111 #b00000000010000111001000001000001) #b00000000000000000000000000001000 #b00000000111111100101000101100011) #b00000000000000000000000000001001 #b00000000101010111101111010111011) (bvadd (bvsub lt!4159 lt!4160) lt!4144)))) (size!276 lt!4143))) (tuple2!57 Unit!596 lt!4143)))))

(assert (=> d!5380 e!4453))

(declare-fun res!7118 () Bool)

(assert (=> d!5380 (=> (not res!7118) (not e!4453))))

(assert (=> d!5380 (= res!7118 (and (bvsle #b00000000000000000000000000000000 lt!4144) (bvsle lt!4144 (bvadd lt!4160 jz!36 #b00000000000000000000000000000001))))))

(declare-fun lt!4161 () (_ BitVec 32))

(assert (=> d!5380 (= lt!4159 (ite (bvslt lt!4161 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!4161))))

(assert (=> d!5380 (= lt!4161 (bvsdiv (bvsub e!19 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(assert (=> d!5380 (= lt!4160 (bvsub (size!276 xx!50) #b00000000000000000000000000000001))))

(assert (=> d!5380 (= (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4144 lt!4143) lt!4158)))

(declare-fun b!8620 () Bool)

(declare-fun res!7116 () Bool)

(assert (=> b!8620 (=> (not res!7116) (not e!4454))))

(assert (=> b!8620 (= res!7116 (fInv!0 (_3!173 lt!4158)))))

(declare-fun b!8621 () Bool)

(assert (=> b!8621 (= e!4454 (bvsgt (_2!201 lt!4158) (bvadd lt!4160 jz!36)))))

(assert (=> b!8621 (or (not (= (bvand lt!4160 #b10000000000000000000000000000000) (bvand jz!36 #b10000000000000000000000000000000))) (= (bvand lt!4160 #b10000000000000000000000000000000) (bvand (bvadd lt!4160 jz!36) #b10000000000000000000000000000000)))))

(declare-fun b!8622 () Bool)

(assert (=> b!8622 (= e!4453 (bvsle lt!4144 (bvadd lt!4160 jz!36)))))

(declare-fun b!8623 () Bool)

(assert (=> b!8623 (= e!4455 (timesTwoOverPiWhile!0 e!19 jz!36 xx!50 lt!4162 (_2!202 lt!4163)))))

(assert (= (and d!5380 res!7118) b!8619))

(assert (= (and b!8619 res!7117) b!8622))

(assert (= (and d!5380 c!958) b!8623))

(assert (= (and d!5380 (not c!958)) b!8618))

(assert (= (and d!5380 res!7115) b!8620))

(assert (= (and b!8620 res!7116) b!8621))

(declare-fun m!16335 () Bool)

(assert (=> b!8619 m!16335))

(declare-fun m!16337 () Bool)

(assert (=> d!5380 m!16337))

(declare-fun m!16339 () Bool)

(assert (=> d!5380 m!16339))

(declare-fun m!16341 () Bool)

(assert (=> b!8620 m!16341))

(declare-fun m!16343 () Bool)

(assert (=> b!8623 m!16343))

(assert (=> b!8597 d!5380))

(declare-fun d!5382 () Bool)

(assert (=> d!5382 (= (array_inv!226 f!79) (bvsge (size!276 f!79) #b00000000000000000000000000000000))))

(assert (=> start!1627 d!5382))

(declare-fun d!5384 () Bool)

(assert (=> d!5384 (= (array_inv!226 q!51) (bvsge (size!276 q!51) #b00000000000000000000000000000000))))

(assert (=> start!1627 d!5384))

(declare-fun d!5386 () Bool)

(assert (=> d!5386 (= (array_inv!226 xx!50) (bvsge (size!276 xx!50) #b00000000000000000000000000000000))))

(assert (=> start!1627 d!5386))

(declare-fun bs!2358 () Bool)

(declare-fun b!8626 () Bool)

(assert (= bs!2358 (and b!8626 b!8605)))

(declare-fun lambda!416 () Int)

(assert (=> bs!2358 (not (= lambda!416 lambda!413))))

(declare-fun d!5388 () Bool)

(declare-fun res!7121 () Bool)

(declare-fun e!4458 () Bool)

(assert (=> d!5388 (=> (not res!7121) (not e!4458))))

(assert (=> d!5388 (= res!7121 (= (size!276 f!79) #b00000000000000000000000000010100))))

(assert (=> d!5388 (= (fInv!0 f!79) e!4458)))

(assert (=> b!8626 (= e!4458 (all20!0 f!79 lambda!416))))

(assert (= (and d!5388 res!7121) b!8626))

(declare-fun m!16345 () Bool)

(assert (=> b!8626 m!16345))

(assert (=> b!8599 d!5388))

(declare-fun bs!2359 () Bool)

(declare-fun b!8629 () Bool)

(assert (= bs!2359 (and b!8629 b!8605)))

(declare-fun lambda!419 () Int)

(assert (=> bs!2359 (not (= lambda!419 lambda!413))))

(declare-fun bs!2360 () Bool)

(assert (= bs!2360 (and b!8629 b!8626)))

(assert (=> bs!2360 (= lambda!419 lambda!416)))

(declare-fun d!5390 () Bool)

(declare-fun res!7124 () Bool)

(declare-fun e!4461 () Bool)

(assert (=> d!5390 (=> (not res!7124) (not e!4461))))

(assert (=> d!5390 (= res!7124 (= (size!276 xx!50) #b00000000000000000000000000000101))))

(assert (=> d!5390 (= (xxInv!0 xx!50) e!4461)))

(declare-fun all5!0 (array!632 Int) Bool)

(assert (=> b!8629 (= e!4461 (all5!0 xx!50 lambda!419))))

(assert (= (and d!5390 res!7124) b!8629))

(declare-fun m!16347 () Bool)

(assert (=> b!8629 m!16347))

(assert (=> b!8600 d!5390))

(push 1)

(assert (not b!8626))

(assert (not b!8629))

(assert (not b!8620))

(assert (not b!8605))

(assert (not b!8619))

(assert (not b!8623))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

