; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!1897 () Bool)

(assert start!1897)

(declare-fun b!10308 () Bool)

(declare-fun e!5478 () Bool)

(declare-fun e!5482 () Bool)

(assert (=> b!10308 (= e!5478 e!5482)))

(declare-fun res!8577 () Bool)

(assert (=> b!10308 (=> (not res!8577) (not e!5482))))

(declare-fun e!15 () (_ BitVec 32))

(declare-fun i!179 () (_ BitVec 32))

(declare-fun lt!4889 () (_ BitVec 32))

(declare-fun jz!32 () (_ BitVec 32))

(declare-fun lt!4886 () (_ BitVec 32))

(assert (=> b!10308 (= res!8577 (and (= (bvsub e!15 (bvmul #b00000000000000000000000000011000 (bvadd lt!4886 #b00000000000000000000000000000001))) #b00000000000000000000000000000000) (bvsle #b00000000000000000000000000000000 i!179) (bvsle i!179 (bvadd lt!4889 jz!32 #b00000000000000000000000000000001))))))

(declare-fun lt!4885 () (_ BitVec 32))

(assert (=> b!10308 (= lt!4886 (ite (bvslt lt!4885 #b00000000000000000000000000000000) #b00000000000000000000000000000000 lt!4885))))

(assert (=> b!10308 (= lt!4885 (bvsdiv (bvsub e!15 #b00000000000000000000000000000011) #b00000000000000000000000000011000))))

(declare-datatypes ((array!733 0))(
  ( (array!734 (arr!318 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!318 (_ BitVec 32))) )
))
(declare-fun xx!44 () array!733)

(assert (=> b!10308 (= lt!4889 (bvsub (size!318 xx!44) #b00000000000000000000000000000001))))

(declare-fun res!8579 () Bool)

(assert (=> start!1897 (=> (not res!8579) (not e!5478))))

(assert (=> start!1897 (= res!8579 (and (bvsle #b00000000000000000000000000000000 jz!32) (bvsle jz!32 #b00000000000000000000000000001111) (bvsle #b00000000000000000000000000011000 e!15) (bvsle e!15 #b00000000000000000000001111110000) (= (bvsrem e!15 #b00000000000000000000000000011000) #b00000000000000000000000000000000)))))

(assert (=> start!1897 e!5478))

(assert (=> start!1897 true))

(declare-fun array_inv!268 (array!733) Bool)

(assert (=> start!1897 (array_inv!268 xx!44)))

(declare-fun f!58 () array!733)

(assert (=> start!1897 (array_inv!268 f!58)))

(declare-fun b!10309 () Bool)

(declare-fun e!5483 () Bool)

(assert (=> b!10309 (= e!5483 (and (= (bvand lt!4889 #b10000000000000000000000000000000) (bvand jz!32 #b10000000000000000000000000000000)) (not (= (bvand lt!4889 #b10000000000000000000000000000000) (bvand (bvadd lt!4889 jz!32) #b10000000000000000000000000000000)))))))

(declare-fun b!10310 () Bool)

(declare-fun res!8574 () Bool)

(assert (=> b!10310 (=> (not res!8574) (not e!5482))))

(declare-fun fInv!0 (array!733) Bool)

(assert (=> b!10310 (= res!8574 (fInv!0 f!58))))

(declare-fun b!10311 () Bool)

(declare-fun res!8575 () Bool)

(assert (=> b!10311 (=> (not res!8575) (not e!5478))))

(declare-fun xxInv!0 (array!733) Bool)

(assert (=> b!10311 (= res!8575 (xxInv!0 xx!44))))

(declare-fun b!10312 () Bool)

(declare-fun e!5479 () Bool)

(assert (=> b!10312 (= e!5479 e!5483)))

(declare-fun res!8573 () Bool)

(assert (=> b!10312 (=> (not res!8573) (not e!5483))))

(declare-datatypes ((Unit!964 0))(
  ( (Unit!965) )
))
(declare-datatypes ((tuple3!194 0))(
  ( (tuple3!195 (_1!244 Unit!964) (_2!244 (_ BitVec 32)) (_3!200 array!733)) )
))
(declare-fun lt!4887 () tuple3!194)

(assert (=> b!10312 (= res!8573 (and (bvsle #b00000000000000000000000000000000 (_2!244 lt!4887)) (bvsle (_2!244 lt!4887) (bvadd lt!4889 jz!32 #b00000000000000000000000000000001))))))

(declare-fun lt!4888 () (_ BitVec 32))

(declare-fun timesTwoOverPiWhile!0 ((_ BitVec 32) (_ BitVec 32) array!733 (_ BitVec 32) array!733) tuple3!194)

(declare-datatypes ((tuple2!88 0))(
  ( (tuple2!89 (_1!245 Unit!964) (_2!245 array!733)) )
))
(declare-fun Unit!966 () Unit!964)

(declare-fun Unit!967 () Unit!964)

(assert (=> b!10312 (= lt!4887 (timesTwoOverPiWhile!0 e!15 jz!32 xx!44 lt!4888 (_2!245 (ite (bvsge (bvadd (bvsub lt!4886 lt!4889) i!179) #b00000000000000000000000000000000) (tuple2!89 Unit!966 (array!734 (store (arr!318 f!58) i!179 ((_ to_fp 11 53) roundNearestTiesToEven (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 32))) #b00000000000000000000000000000000) #b00000000000000000000000000000000 #b00000000101000101111100110000011) #b00000000000000000000000000000001 #b00000000011011100100111001000100) #b00000000000000000000000000001010 #b00000000110001010110000110110111) #b00000000000000000000000000001011 #b00000000001001000110111000111010) #b00000000000000000000000000001100 #b00000000010000100100110111010010) #b00000000000000000000000000001101 #b00000000111000000000011001001001) #b00000000000000000000000000001110 #b00000000001011101110101000001001) #b00000000000000000000000000001111 #b00000000110100011001001000011100) #b00000000000000000000000000010000 #b00000000111111100001110111101011) #b00000000000000000000000000010001 #b00000000000111001011000100101001) #b00000000000000000000000000010010 #b00000000101001110011111011101000) #b00000000000000000000000000010011 #b00000000100000100011010111110101) #b00000000000000000000000000000010 #b00000000000101010010100111111100) #b00000000000000000000000000010100 #b00000000001011101011101101000100) #b00000000000000000000000000010101 #b00000000100001001110100110011100) #b00000000000000000000000000010110 #b00000000011100000010011010110100) #b00000000000000000000000000010111 #b00000000010111110111111001000001) #b00000000000000000000000000011000 #b00000000001110011001000111010110) #b00000000000000000000000000011001 #b00000000001110011000001101010011) #b00000000000000000000000000011010 #b00000000001110011111010010011100) #b00000000000000000000000000011011 #b00000000100001000101111110001011) #b00000000000000000000000000011100 #b00000000101111011111100100101000) #b00000000000000000000000000011101 #b00000000001110110001111111111000) #b00000000000000000000000000000011 #b00000000001001110101011111010001) #b00000000000000000000000000011110 #b00000000100101111111111111011110) #b00000000000000000000000000011111 #b00000000000001011001100000001111) #b00000000000000000000000000100000 #b00000000111011110010111100010001) #b00000000000000000000000000100001 #b00000000100010110101101000001010) #b00000000000000000000000000100010 #b00000000011011010001111101101101) #b00000000000000000000000000100011 #b00000000001101100111111011001111) #b00000000000000000000000000100100 #b00000000001001111100101100001001) #b00000000000000000000000000100101 #b00000000101101110100111101000110) #b00000000000000000000000000100110 #b00000000001111110110011010011110) #b00000000000000000000000000100111 #b00000000010111111110101000101101) #b00000000000000000000000000000100 #b00000000111101010011010011011101) #b00000000000000000000000000101000 #b00000000011101010010011110111010) #b00000000000000000000000000101001 #b00000000110001111110101111100101) #b00000000000000000000000000101010 #b00000000111100010111101100111101) #b00000000000000000000000000101011 #b00000000000001110011100111110111) #b00000000000000000000000000101100 #b00000000100010100101001010010010) #b00000000000000000000000000101101 #b00000000111010100110101111111011) #b00000000000000000000000000101110 #b00000000010111111011000100011111) #b00000000000000000000000000101111 #b00000000100011010101110100001000) #b00000000000000000000000000110000 #b00000000010101100000001100110000) #b00000000000000000000000000110001 #b00000000010001101111110001111011) #b00000000000000000000000000000101 #b00000000110000001101101101100010) #b00000000000000000000000000110010 #b00000000011010111010101111110000) #b00000000000000000000000000110011 #b00000000110011111011110000100000) #b00000000000000000000000000110100 #b00000000100110101111010000110110) #b00000000000000000000000000110101 #b00000000000111011010100111100011) #b00000000000000000000000000110110 #b00000000100100010110000101011110) #b00000000000000000000000000110111 #b00000000111001100001101100001000) #b00000000000000000000000000111000 #b00000000011001011001100110000101) #b00000000000000000000000000111001 #b00000000010111110001010010100000) #b00000000000000000000000000111010 #b00000000011010000100000010001101) #b00000000000000000000000000111011 #b00000000111111111101100010000000) #b00000000000000000000000000000110 #b00000000100101011001100100111100) #b00000000000000000000000000111100 #b00000000010011010111001100100111) #b00000000000000000000000000111101 #b00000000001100010000011000000110) #b00000000000000000000000000111110 #b00000000000101010101011011001010) #b00000000000000000000000000111111 #b00000000011100111010100011001001) #b00000000000000000000000001000000 #b00000000011000001110001001111011) #b00000000000000000000000001000001 #b00000000110000001000110001101011) #b00000000000000000000000000000111 #b00000000010000111001000001000001) #b00000000000000000000000000001000 #b00000000111111100101000101100011) #b00000000000000000000000000001001 #b00000000101010111101111010111011) (bvadd (bvsub lt!4886 lt!4889) i!179)))) (size!318 f!58))) (tuple2!89 Unit!967 f!58)))))))

(declare-fun b!10313 () Bool)

(declare-fun res!8578 () Bool)

(assert (=> b!10313 (=> (not res!8578) (not e!5483))))

(assert (=> b!10313 (= res!8578 (fInv!0 (_3!200 lt!4887)))))

(declare-fun b!10314 () Bool)

(assert (=> b!10314 (= e!5482 e!5479)))

(declare-fun res!8580 () Bool)

(assert (=> b!10314 (=> (not res!8580) (not e!5479))))

(assert (=> b!10314 (= res!8580 (bvsle lt!4888 (bvadd lt!4889 jz!32)))))

(assert (=> b!10314 (= lt!4888 (bvadd i!179 #b00000000000000000000000000000001))))

(declare-fun b!10315 () Bool)

(declare-fun res!8576 () Bool)

(assert (=> b!10315 (=> (not res!8576) (not e!5482))))

(assert (=> b!10315 (= res!8576 (bvsle i!179 (bvadd lt!4889 jz!32)))))

(assert (= (and start!1897 res!8579) b!10311))

(assert (= (and b!10311 res!8575) b!10308))

(assert (= (and b!10308 res!8577) b!10310))

(assert (= (and b!10310 res!8574) b!10315))

(assert (= (and b!10315 res!8576) b!10314))

(assert (= (and b!10314 res!8580) b!10312))

(assert (= (and b!10312 res!8573) b!10313))

(assert (= (and b!10313 res!8578) b!10309))

(declare-fun m!18119 () Bool)

(assert (=> b!10313 m!18119))

(declare-fun m!18121 () Bool)

(assert (=> start!1897 m!18121))

(declare-fun m!18123 () Bool)

(assert (=> start!1897 m!18123))

(declare-fun m!18125 () Bool)

(assert (=> b!10311 m!18125))

(declare-fun m!18127 () Bool)

(assert (=> b!10312 m!18127))

(declare-fun m!18129 () Bool)

(assert (=> b!10312 m!18129))

(declare-fun m!18131 () Bool)

(assert (=> b!10312 m!18131))

(declare-fun m!18133 () Bool)

(assert (=> b!10310 m!18133))

(push 1)

(assert (not b!10311))

(assert (not b!10310))

(assert (not b!10312))

(assert (not b!10313))

(assert (not start!1897))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

