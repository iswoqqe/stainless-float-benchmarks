; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!2207 () Bool)

(assert start!2207)

(declare-fun b!11111 () Bool)

(declare-fun e!6336 () Bool)

(declare-fun e!6334 () Bool)

(assert (=> b!11111 (= e!6336 e!6334)))

(declare-fun res!8882 () Bool)

(assert (=> b!11111 (=> (not res!8882) (not e!6334))))

(declare-datatypes ((tuple2!116 0))(
  ( (tuple2!117 (_1!268 (_ FloatingPoint 11 53)) (_2!268 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5626 () tuple2!116)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!11111 (= res!8882 (fp.geq (_1!268 lt!5626) (fp.add roundNearestTiesToEven c!23 (_2!268 lt!5626))))))

(declare-fun e!6333 () tuple2!116)

(assert (=> b!11111 (= lt!5626 e!6333)))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun c!1327 () Bool)

(declare-fun s!25 () (_ FloatingPoint 11 53))

(declare-datatypes ((array!827 0))(
  ( (array!828 (arr!363 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!363 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!827)

(assert (=> b!11111 (= c!1327 (fp.geq s!25 (select (arr!363 fq!120) i!347)))))

(declare-fun b!11112 () Bool)

(declare-fun call!53 () tuple2!116)

(assert (=> b!11112 (= e!6333 call!53)))

(declare-fun b!11113 () Bool)

(declare-fun res!8881 () Bool)

(assert (=> b!11113 (=> (not res!8881) (not e!6336))))

(declare-fun jz!77 () (_ BitVec 32))

(assert (=> b!11113 (= res!8881 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun b!11114 () Bool)

(declare-fun lt!5627 () (_ BitVec 32))

(assert (=> b!11114 (= e!6334 (and (bvslt lt!5627 #b00000000000000000000000000000000) (bvsle #b11111111111111111111111111111111 lt!5627) (not (= (bvand jz!77 #b10000000000000000000000000000000) #b00000000000000000000000000000000)) (not (= (bvand jz!77 #b10000000000000000000000000000000) (bvand (bvsub jz!77 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))))

(assert (=> b!11114 (= lt!5627 (bvsub i!347 #b00000000000000000000000000000001))))

(declare-fun lt!5628 () tuple2!116)

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!116)

(assert (=> b!11114 (= lt!5628 (fast2Sum!0 (_1!268 lt!5626) (fp.add roundNearestTiesToEven c!23 (_2!268 lt!5626))))))

(declare-fun b!11115 () Bool)

(declare-fun res!8880 () Bool)

(assert (=> b!11115 (=> (not res!8880) (not e!6336))))

(declare-fun fqInv!0 (array!827) Bool)

(assert (=> b!11115 (= res!8880 (fqInv!0 fq!120))))

(declare-fun res!8883 () Bool)

(assert (=> start!2207 (=> (not res!8883) (not e!6336))))

(assert (=> start!2207 (= res!8883 (= (size!363 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2207 e!6336))

(assert (=> start!2207 true))

(declare-fun array_inv!312 (array!827) Bool)

(assert (=> start!2207 (array_inv!312 fq!120)))

(declare-fun bm!50 () Bool)

(assert (=> bm!50 (= call!53 (fast2Sum!0 (ite c!1327 s!25 (select (arr!363 fq!120) i!347)) (ite c!1327 (select (arr!363 fq!120) i!347) s!25)))))

(declare-fun b!11116 () Bool)

(assert (=> b!11116 (= e!6333 call!53)))

(assert (= (and start!2207 res!8883) b!11115))

(assert (= (and b!11115 res!8880) b!11113))

(assert (= (and b!11113 res!8881) b!11111))

(assert (= (and b!11111 c!1327) b!11116))

(assert (= (and b!11111 (not c!1327)) b!11112))

(assert (= (or b!11116 b!11112) bm!50))

(assert (= (and b!11111 res!8882) b!11114))

(declare-fun m!17083 () Bool)

(assert (=> b!11113 m!17083))

(declare-fun m!17085 () Bool)

(assert (=> b!11114 m!17085))

(declare-fun m!17087 () Bool)

(assert (=> b!11111 m!17087))

(declare-fun m!17089 () Bool)

(assert (=> b!11115 m!17089))

(assert (=> bm!50 m!17087))

(declare-fun m!17091 () Bool)

(assert (=> bm!50 m!17091))

(declare-fun m!17093 () Bool)

(assert (=> start!2207 m!17093))

(check-sat (not b!11115) (not start!2207) (not b!11114) (not bm!50))
(check-sat)
