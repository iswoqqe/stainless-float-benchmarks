; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2635 () Bool)

(assert start!2635)

(declare-datatypes ((array!1022 0))(
  ( (array!1023 (arr!445 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!445 (_ BitVec 32))) )
))
(declare-fun qq!34 () array!1022)

(assert (=> start!2635 (and (= (size!445 qq!34) #b00000000000000000000000000010100) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!445 qq!34) #b00000000000000000000000000000000)) (fp.leq (select (arr!445 qq!34) #b00000000000000000000000000000000) (fp #b0 #b01111111101 #b1111111111111111111111000000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!445 qq!34) #b00000000000000000000000000000001)) (fp.leq (select (arr!445 qq!34) #b00000000000000000000000000000001) (fp #b0 #b01111100110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!445 qq!34) #b00000000000000000000000000000010)) (fp.leq (select (arr!445 qq!34) #b00000000000000000000000000000010) (fp #b0 #b01111001110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!445 qq!34) #b00000000000000000000000000000011)) (fp.leq (select (arr!445 qq!34) #b00000000000000000000000000000011) (fp #b0 #b01110110110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!445 qq!34) #b00000000000000000000000000000100)) (fp.leq (select (arr!445 qq!34) #b00000000000000000000000000000100) (fp #b0 #b01110011110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!445 qq!34) #b00000000000000000000000000000101)) (fp.leq (select (arr!445 qq!34) #b00000000000000000000000000000101) (fp #b0 #b01110000110 #b1111111111111111111111100000000000000000000000000000)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (select (arr!445 qq!34) #b00000000000000000000000000000110)) (fp.leq (select (arr!445 qq!34) #b00000000000000000000000000000110) (fp #b0 #b01101101110 #b1111111111111111111111100000000000000000000000000000)) (bvsge #b00000000000000000000000000000111 (size!445 qq!34)))))

(declare-fun array_inv!394 (array!1022) Bool)

(assert (=> start!2635 (array_inv!394 qq!34)))

(declare-fun bs!2888 () Bool)

(assert (= bs!2888 start!2635))

(declare-fun m!22549 () Bool)

(assert (=> bs!2888 m!22549))

(declare-fun m!22551 () Bool)

(assert (=> bs!2888 m!22551))

(declare-fun m!22553 () Bool)

(assert (=> bs!2888 m!22553))

(declare-fun m!22555 () Bool)

(assert (=> bs!2888 m!22555))

(declare-fun m!22557 () Bool)

(assert (=> bs!2888 m!22557))

(declare-fun m!22559 () Bool)

(assert (=> bs!2888 m!22559))

(declare-fun m!22561 () Bool)

(assert (=> bs!2888 m!22561))

(declare-fun m!22563 () Bool)

(assert (=> bs!2888 m!22563))

(push 1)

(assert (not start!2635))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

