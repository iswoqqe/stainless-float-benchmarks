; Options: -q --produce-models --incremental --print-success --lang smt2.6 --arrays-exp
(set-logic ALL)

(declare-fun start!2363 () Bool)

(assert start!2363)

(declare-fun b!11999 () Bool)

(declare-fun res!9643 () Bool)

(declare-fun e!6601 () Bool)

(assert (=> b!11999 (=> (not res!9643) (not e!6601))))

(declare-datatypes ((array!839 0))(
  ( (array!840 (arr!364 (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (size!364 (_ BitVec 32))) )
))
(declare-fun fq!120 () array!839)

(declare-fun fqInv!0 (array!839) Bool)

(assert (=> b!11999 (= res!9643 (fqInv!0 fq!120))))

(declare-fun b!12000 () Bool)

(declare-fun e!6599 () Bool)

(assert (=> b!12000 (= e!6601 e!6599)))

(declare-fun res!9645 () Bool)

(assert (=> b!12000 (=> (not res!9645) (not e!6599))))

(declare-datatypes ((tuple2!128 0))(
  ( (tuple2!129 (_1!274 (_ FloatingPoint 11 53)) (_2!274 (_ FloatingPoint 11 53))) )
))
(declare-fun lt!5853 () tuple2!128)

(declare-fun c!23 () (_ FloatingPoint 11 53))

(assert (=> b!12000 (= res!9645 (fp.geq (_1!274 lt!5853) (fp.add roundNearestTiesToEven c!23 (_2!274 lt!5853))))))

(declare-fun e!6600 () tuple2!128)

(assert (=> b!12000 (= lt!5853 e!6600)))

(declare-fun i!347 () (_ BitVec 32))

(declare-fun c!1390 () Bool)

(declare-fun s!25 () (_ FloatingPoint 11 53))

(assert (=> b!12000 (= c!1390 (fp.geq s!25 (select (arr!364 fq!120) i!347)))))

(declare-fun b!12001 () Bool)

(declare-fun lt!5855 () tuple2!128)

(declare-fun jz!77 () (_ BitVec 32))

(declare-fun lt!5854 () (_ BitVec 32))

(assert (=> b!12001 (= e!6599 (and (bvslt lt!5854 #b00000000000000000000000000000000) (bvsle #b11111111111111111111111111111111 lt!5854) (bvsle lt!5854 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (_1!274 lt!5855)) (= (bvand lt!5854 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (not (= (bvand lt!5854 #b10000000000000000000000000000000) (bvand (bvadd lt!5854 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))))

(assert (=> b!12001 (= lt!5854 (bvsub i!347 #b00000000000000000000000000000001))))

(declare-fun fast2Sum!0 ((_ FloatingPoint 11 53) (_ FloatingPoint 11 53)) tuple2!128)

(assert (=> b!12001 (= lt!5855 (fast2Sum!0 (_1!274 lt!5853) (fp.add roundNearestTiesToEven c!23 (_2!274 lt!5853))))))

(declare-fun res!9644 () Bool)

(assert (=> start!2363 (=> (not res!9644) (not e!6601))))

(assert (=> start!2363 (= res!9644 (= (size!364 fq!120) #b00000000000000000000000000010100))))

(assert (=> start!2363 e!6601))

(assert (=> start!2363 true))

(declare-fun array_inv!313 (array!839) Bool)

(assert (=> start!2363 (array_inv!313 fq!120)))

(declare-fun b!12002 () Bool)

(declare-fun res!9642 () Bool)

(assert (=> b!12002 (=> (not res!9642) (not e!6601))))

(assert (=> b!12002 (= res!9642 (and (bvsle #b00000000000000000000000000000000 jz!77) (bvslt jz!77 #b00000000000000000000000000010100) (bvsle #b11111111111111111111111111111111 i!347) (bvsle i!347 (bvsub jz!77 #b00000000000000000000000000000001)) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) s!25) (fp.leq s!25 (select (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ FloatingPoint 11 53))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (fp #b0 #b01111111110 #b1001001000011111101101010100010001000010110100011000)) #b00000000000000000000000000000001 (fp #b0 #b01111101000 #b0001101000100000100011100110000100011010011000100110)) #b00000000000000000000000000001010 (fp #b0 #b01100010001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001011 (fp #b0 #b01011111001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001100 (fp #b0 #b01011100001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001101 (fp #b0 #b01011001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001110 (fp #b0 #b01010110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001111 (fp #b0 #b01010011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010000 (fp #b0 #b01010000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010001 (fp #b0 #b01001101001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000010010 (fp #b0 #b01001010001 #b1011101001010010010101100111111111111111111111100100)) #b00000000000000000000000000010011 (fp #b0 #b01000111001 #b1011101001010010010101001100010110101101101010011000)) #b00000000000000000000000000000010 (fp #b0 #b01111010000 #b1100110001001011101001000110001100110001010001011100)) #b00000000000000000000000000000011 (fp #b0 #b01110111001 #b0100100001001011101001011110000000110111000001110000)) #b00000000000000000000000000000100 (fp #b0 #b01110100001 #b1001101000011011010011111000000000000000000000000000)) #b00000000000000000000000000000101 (fp #b0 #b01110001001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000110 (fp #b0 #b01101110001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000000111 (fp #b0 #b01101011001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001000 (fp #b0 #b01101000001 #b1011101001010010010101101000000000000000000000000000)) #b00000000000000000000000000001001 (fp #b0 #b01100101001 #b1011101001010010010101101000000000000000000000000000)) (bvadd i!347 #b00000000000000000000000000000001))) (fp.eq (fp.add roundNearestTiesToEven s!25 c!23) s!25) (bvsge i!347 #b00000000000000000000000000000000) (fp.leq s!25 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))

(declare-fun call!56 () tuple2!128)

(declare-fun bm!53 () Bool)

(assert (=> bm!53 (= call!56 (fast2Sum!0 (ite c!1390 s!25 (select (arr!364 fq!120) i!347)) (ite c!1390 (select (arr!364 fq!120) i!347) s!25)))))

(declare-fun b!12003 () Bool)

(assert (=> b!12003 (= e!6600 call!56)))

(declare-fun b!12004 () Bool)

(assert (=> b!12004 (= e!6600 call!56)))

(assert (= (and start!2363 res!9644) b!11999))

(assert (= (and b!11999 res!9643) b!12002))

(assert (= (and b!12002 res!9642) b!12000))

(assert (= (and b!12000 c!1390) b!12004))

(assert (= (and b!12000 (not c!1390)) b!12003))

(assert (= (or b!12004 b!12003) bm!53))

(assert (= (and b!12000 res!9645) b!12001))

(declare-fun m!19939 () Bool)

(assert (=> start!2363 m!19939))

(declare-fun m!19941 () Bool)

(assert (=> b!12000 m!19941))

(declare-fun m!19943 () Bool)

(assert (=> b!11999 m!19943))

(assert (=> bm!53 m!19941))

(declare-fun m!19945 () Bool)

(assert (=> bm!53 m!19945))

(declare-fun m!19947 () Bool)

(assert (=> b!12002 m!19947))

(declare-fun m!19949 () Bool)

(assert (=> b!12001 m!19949))

(push 1)

(assert (not b!12001))

(assert (not b!11999))

(assert (not start!2363))

(assert (not bm!53))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(pop 1)

